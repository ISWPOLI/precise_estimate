webpackJsonp([0,4],{

/***/ 1268:
/***/ function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(548);


/***/ },

/***/ 189:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return UserService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var UserService = (function () {
    function UserService(http) {
        this.http = http;
        this.endpoint_url = "http://localhost:3000/api/user";
        this.http = http;
    }
    UserService.prototype.createUser = function (UserForm) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.put(this.endpoint_url, UserForm, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    UserService.prototype.updateUser = function (UserForm) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.post(this.endpoint_url, UserForm, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    UserService.prototype.listUsers = function () {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    UserService.prototype.getUser = function (id) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url + "/" + id, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    UserService.prototype.assignAbility = function (idUser, idAbility) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url + "/assingAbility?idUser=" + idUser + "&idAbility=" + idAbility, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    UserService = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */]) === 'function' && _a) || Object])
    ], UserService);
    return UserService;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/user.service.js.map

/***/ },

/***/ 264:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return SAPB1; });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the platform-browser package.
 */
var SAPB1;
(function (SAPB1) {
    function callSL(b1cmd, actionUri, slsessionid, slrouteid) {
        var obj = [];
        for (var _a = 4; _a < arguments.length; _a++) {
            obj[_a - 4] = arguments[_a];
        }
        var obj = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            obj[_i - 4] = arguments[_i];
        }
        var data;
        if (b1cmd == SAPB1.B1ObjActionEnum.ADD || b1cmd == SAPB1.B1ObjActionEnum.UPDATE || b1cmd == SAPB1.B1ObjActionEnum.LOGIN) {
            // I think this grabs each argument and then sticks it all in a json object, so the object is composed of the type, the endpoint, the session id, the route, and then the actual object itself
            //data = JSON.stringify(obj[0][0]);
            data = JSON.stringify(obj[0]);
        }
        var callObject = new SLCallObject(actionUri, b1cmd, data);
        return callObject;
    }
    SAPB1.callSL = callSL;
    var SLCallObject = (function () {
        function SLCallObject(endpoint, httpverb, data) {
            this._endpoint = "";
            this._endpoint = endpoint;
            this._httpVerb = httpverb;
            this._callData = data;
        }
        return SLCallObject;
    }());
    SAPB1.SLCallObject = SLCallObject;
    var AccountCategorySourceEnum = (function () {
        function AccountCategorySourceEnum() {
        }
        AccountCategorySourceEnum.acsBalanceSheet = "acsBalanceSheet";
        AccountCategorySourceEnum.acsProfitAndLoss = "acsProfitAndLoss";
        return AccountCategorySourceEnum;
    }());
    SAPB1.AccountCategorySourceEnum = AccountCategorySourceEnum;
    var AccountSegmentationTypeEnum = (function () {
        function AccountSegmentationTypeEnum() {
        }
        AccountSegmentationTypeEnum.ast_Alphanumeric = "ast_Alphanumeric";
        AccountSegmentationTypeEnum.ast_Numeric = "ast_Numeric";
        return AccountSegmentationTypeEnum;
    }());
    SAPB1.AccountSegmentationTypeEnum = AccountSegmentationTypeEnum;
    var AcquisitionPeriodControlEnum = (function () {
        function AcquisitionPeriodControlEnum() {
        }
        AcquisitionPeriodControlEnum.apcProRataTemporis = "apcProRataTemporis";
        AcquisitionPeriodControlEnum.apcFirstYearConvention = "apcFirstYearConvention";
        AcquisitionPeriodControlEnum.apcHalfYear = "apcHalfYear";
        AcquisitionPeriodControlEnum.apcFullYear = "apcFullYear";
        return AcquisitionPeriodControlEnum;
    }());
    SAPB1.AcquisitionPeriodControlEnum = AcquisitionPeriodControlEnum;
    var AcquisitionProRataTypeEnum = (function () {
        function AcquisitionProRataTypeEnum() {
        }
        AcquisitionProRataTypeEnum.aprtExactlyDailyBase = "aprtExactlyDailyBase";
        AcquisitionProRataTypeEnum.aprtFirstDayOfCurrentPeriod = "aprtFirstDayOfCurrentPeriod";
        AcquisitionProRataTypeEnum.aprtFirstDayOfNextPeriod = "aprtFirstDayOfNextPeriod";
        return AcquisitionProRataTypeEnum;
    }());
    SAPB1.AcquisitionProRataTypeEnum = AcquisitionProRataTypeEnum;
    var AlertManagementDocumentEnum = (function () {
        function AlertManagementDocumentEnum() {
        }
        AlertManagementDocumentEnum.atd_NOB = "atd_NOB";
        AlertManagementDocumentEnum.atd_Invoices = "atd_Invoices";
        AlertManagementDocumentEnum.atd_RevertInvoice = "atd_RevertInvoice";
        AlertManagementDocumentEnum.atd_DeliveryNotes = "atd_DeliveryNotes";
        AlertManagementDocumentEnum.atd_Returns = "atd_Returns";
        AlertManagementDocumentEnum.atd_Orders = "atd_Orders";
        AlertManagementDocumentEnum.atd_PurchaseInvoices = "atd_PurchaseInvoices";
        AlertManagementDocumentEnum.atd_PurchaseDeliveryNotes = "atd_PurchaseDeliveryNotes";
        AlertManagementDocumentEnum.atd_PurchaseOrders = "atd_PurchaseOrders";
        AlertManagementDocumentEnum.atd_Quotations = "atd_Quotations";
        AlertManagementDocumentEnum.atd_IncomingPayments = "atd_IncomingPayments";
        AlertManagementDocumentEnum.atd_JournalEntries = "atd_JournalEntries";
        AlertManagementDocumentEnum.atd_OutgoingPayments = "atd_OutgoingPayments";
        AlertManagementDocumentEnum.atd_ChecksForPayment = "atd_ChecksForPayment";
        AlertManagementDocumentEnum.atd_CorrectionInvoice = "atd_CorrectionInvoice";
        AlertManagementDocumentEnum.atd_DownPaymentIncoming = "atd_DownPaymentIncoming";
        AlertManagementDocumentEnum.atd_DownPaymentOutgoing = "atd_DownPaymentOutgoing";
        return AlertManagementDocumentEnum;
    }());
    SAPB1.AlertManagementDocumentEnum = AlertManagementDocumentEnum;
    var AlertManagementFrequencyType = (function () {
        function AlertManagementFrequencyType() {
        }
        AlertManagementFrequencyType.atfi_Minutes = "atfi_Minutes";
        AlertManagementFrequencyType.atfi_Hours = "atfi_Hours";
        AlertManagementFrequencyType.atfi_Days = "atfi_Days";
        AlertManagementFrequencyType.atfi_Weeks = "atfi_Weeks";
        AlertManagementFrequencyType.atfi_Monthly = "atfi_Monthly";
        return AlertManagementFrequencyType;
    }());
    SAPB1.AlertManagementFrequencyType = AlertManagementFrequencyType;
    var AlertManagementPriorityEnum = (function () {
        function AlertManagementPriorityEnum() {
        }
        AlertManagementPriorityEnum.atp_Low = "atp_Low";
        AlertManagementPriorityEnum.atp_Normal = "atp_Normal";
        AlertManagementPriorityEnum.atp_High = "atp_High";
        return AlertManagementPriorityEnum;
    }());
    SAPB1.AlertManagementPriorityEnum = AlertManagementPriorityEnum;
    var AlertManagementTypeEnum = (function () {
        function AlertManagementTypeEnum() {
        }
        AlertManagementTypeEnum.att_User = "att_User";
        AlertManagementTypeEnum.att_System = "att_System";
        return AlertManagementTypeEnum;
    }());
    SAPB1.AlertManagementTypeEnum = AlertManagementTypeEnum;
    var AmountCatTypeEnum = (function () {
        function AmountCatTypeEnum() {
        }
        AmountCatTypeEnum.act_Open = "act_Open";
        AmountCatTypeEnum.act_Invoiced = "act_Invoiced";
        return AmountCatTypeEnum;
    }());
    SAPB1.AmountCatTypeEnum = AmountCatTypeEnum;
    var ApprovalTemplateConditionTypeEnum = (function () {
        function ApprovalTemplateConditionTypeEnum() {
        }
        ApprovalTemplateConditionTypeEnum.atctUndefined = "atctUndefined";
        ApprovalTemplateConditionTypeEnum.atctDeviationFromCreditLine = "atctDeviationFromCreditLine";
        ApprovalTemplateConditionTypeEnum.atctDeviationFromObligo = "atctDeviationFromObligo";
        ApprovalTemplateConditionTypeEnum.atctGrossProfitPercent = "atctGrossProfitPercent";
        ApprovalTemplateConditionTypeEnum.atctDiscountPercent = "atctDiscountPercent";
        ApprovalTemplateConditionTypeEnum.atctDeviationFromBudget = "atctDeviationFromBudget";
        ApprovalTemplateConditionTypeEnum.atctTotalDocument = "atctTotalDocument";
        ApprovalTemplateConditionTypeEnum.atctItemCode = "atctItemCode";
        ApprovalTemplateConditionTypeEnum.atctTotalLine = "atctTotalLine";
        ApprovalTemplateConditionTypeEnum.atctCountedQuantity = "atctCountedQuantity";
        ApprovalTemplateConditionTypeEnum.atctQuantity = "atctQuantity";
        ApprovalTemplateConditionTypeEnum.atctVariance = "atctVariance";
        ApprovalTemplateConditionTypeEnum.atctVariancePercent = "atctVariancePercent";
        return ApprovalTemplateConditionTypeEnum;
    }());
    SAPB1.ApprovalTemplateConditionTypeEnum = ApprovalTemplateConditionTypeEnum;
    var ApprovalTemplateOperationTypeEnum = (function () {
        function ApprovalTemplateOperationTypeEnum() {
        }
        ApprovalTemplateOperationTypeEnum.opcodeUndefined = "opcodeUndefined";
        ApprovalTemplateOperationTypeEnum.opcodeGreaterThan = "opcodeGreaterThan";
        ApprovalTemplateOperationTypeEnum.opcodeGreaterOrEqual = "opcodeGreaterOrEqual";
        ApprovalTemplateOperationTypeEnum.opcodeLessThan = "opcodeLessThan";
        ApprovalTemplateOperationTypeEnum.opcodeLessOrEqual = "opcodeLessOrEqual";
        ApprovalTemplateOperationTypeEnum.opcodeEqual = "opcodeEqual";
        ApprovalTemplateOperationTypeEnum.opcodeDoesNotEqual = "opcodeDoesNotEqual";
        ApprovalTemplateOperationTypeEnum.opcodeInRange = "opcodeInRange";
        ApprovalTemplateOperationTypeEnum.opcodeNotInRange = "opcodeNotInRange";
        return ApprovalTemplateOperationTypeEnum;
    }());
    SAPB1.ApprovalTemplateOperationTypeEnum = ApprovalTemplateOperationTypeEnum;
    var ApprovalTemplatesDocumentTypeEnum = (function () {
        function ApprovalTemplatesDocumentTypeEnum() {
        }
        ApprovalTemplatesDocumentTypeEnum.atdtQuotation = "atdtQuotation";
        ApprovalTemplatesDocumentTypeEnum.atdtOrder = "atdtOrder";
        ApprovalTemplatesDocumentTypeEnum.atdtDelivery = "atdtDelivery";
        ApprovalTemplatesDocumentTypeEnum.atdtReturns = "atdtReturns";
        ApprovalTemplatesDocumentTypeEnum.atdtArDownPayment = "atdtArDownPayment";
        ApprovalTemplatesDocumentTypeEnum.atdtArInvoice = "atdtArInvoice";
        ApprovalTemplatesDocumentTypeEnum.atdtArCreditMemo = "atdtArCreditMemo";
        ApprovalTemplatesDocumentTypeEnum.atdtCorrectionInvoice = "atdtCorrectionInvoice";
        ApprovalTemplatesDocumentTypeEnum.atdtPurchaseOrder = "atdtPurchaseOrder";
        ApprovalTemplatesDocumentTypeEnum.atdtGoodsReceiptPO = "atdtGoodsReceiptPO";
        ApprovalTemplatesDocumentTypeEnum.atdtGoodsReturns = "atdtGoodsReturns";
        ApprovalTemplatesDocumentTypeEnum.atdtApDownPayment = "atdtApDownPayment";
        ApprovalTemplatesDocumentTypeEnum.atdtApInvoice = "atdtApInvoice";
        ApprovalTemplatesDocumentTypeEnum.atdtApCreditMemo = "atdtApCreditMemo";
        ApprovalTemplatesDocumentTypeEnum.atdtGoodsReceipt = "atdtGoodsReceipt";
        ApprovalTemplatesDocumentTypeEnum.atdtGoodsIssue = "atdtGoodsIssue";
        ApprovalTemplatesDocumentTypeEnum.atdtInventoryTransfer = "atdtInventoryTransfer";
        ApprovalTemplatesDocumentTypeEnum.atdtPurchaseQuotation = "atdtPurchaseQuotation";
        ApprovalTemplatesDocumentTypeEnum.atdtInventoryTransferRequest = "atdtInventoryTransferRequest";
        ApprovalTemplatesDocumentTypeEnum.atdtOutgoingPayment = "atdtOutgoingPayment";
        ApprovalTemplatesDocumentTypeEnum.atdtInventoryCounting = "atdtInventoryCounting";
        ApprovalTemplatesDocumentTypeEnum.atdtInventoryPosting = "atdtInventoryPosting";
        ApprovalTemplatesDocumentTypeEnum.atdtInventoryOpeningBalance = "atdtInventoryOpeningBalance";
        return ApprovalTemplatesDocumentTypeEnum;
    }());
    SAPB1.ApprovalTemplatesDocumentTypeEnum = ApprovalTemplatesDocumentTypeEnum;
    var AreaTypeEnum = (function () {
        function AreaTypeEnum() {
        }
        AreaTypeEnum.atPostingtoGL = "atPostingtoGL";
        AreaTypeEnum.atAdditionalArea = "atAdditionalArea";
        AreaTypeEnum.atDerivedArea = "atDerivedArea";
        return AreaTypeEnum;
    }());
    SAPB1.AreaTypeEnum = AreaTypeEnum;
    var AssesseeTypeEnum = (function () {
        function AssesseeTypeEnum() {
        }
        AssesseeTypeEnum.atCompany = "atCompany";
        AssesseeTypeEnum.atOthers = "atOthers";
        return AssesseeTypeEnum;
    }());
    SAPB1.AssesseeTypeEnum = AssesseeTypeEnum;
    var AssetDocumentStatusEnum = (function () {
        function AssetDocumentStatusEnum() {
        }
        AssetDocumentStatusEnum.adsPosted = "adsPosted";
        AssetDocumentStatusEnum.adsDraft = "adsDraft";
        AssetDocumentStatusEnum.adsCancelled = "adsCancelled";
        return AssetDocumentStatusEnum;
    }());
    SAPB1.AssetDocumentStatusEnum = AssetDocumentStatusEnum;
    var AssetDocumentTypeEnum = (function () {
        function AssetDocumentTypeEnum() {
        }
        AssetDocumentTypeEnum.adtOrdinaryDepreciation = "adtOrdinaryDepreciation";
        AssetDocumentTypeEnum.adtUnplannedDepreciation = "adtUnplannedDepreciation";
        AssetDocumentTypeEnum.adtSpecialDepreciation = "adtSpecialDepreciation";
        AssetDocumentTypeEnum.adtAppreciation = "adtAppreciation";
        AssetDocumentTypeEnum.adtAssetTransfer = "adtAssetTransfer";
        AssetDocumentTypeEnum.adtSales = "adtSales";
        AssetDocumentTypeEnum.adtScrapping = "adtScrapping";
        AssetDocumentTypeEnum.adtAssetClassTransfer = "adtAssetClassTransfer";
        return AssetDocumentTypeEnum;
    }());
    SAPB1.AssetDocumentTypeEnum = AssetDocumentTypeEnum;
    var AssetOriginalTypeEnum = (function () {
        function AssetOriginalTypeEnum() {
        }
        AssetOriginalTypeEnum.aotARInvoice = "aotARInvoice";
        AssetOriginalTypeEnum.aotAPCreditMemo = "aotAPCreditMemo";
        AssetOriginalTypeEnum.aotAPInvoice = "aotAPInvoice";
        AssetOriginalTypeEnum.aotOutgoingPayment = "aotOutgoingPayment";
        AssetOriginalTypeEnum.aotAPCorrectionInvoice = "aotAPCorrectionInvoice";
        AssetOriginalTypeEnum.aotCapitalization = "aotCapitalization";
        AssetOriginalTypeEnum.aotFixedAssetsCreditMemo = "aotFixedAssetsCreditMemo";
        AssetOriginalTypeEnum.aotAllTransactions = "aotAllTransactions";
        AssetOriginalTypeEnum.aotManualDepreciation = "aotManualDepreciation";
        AssetOriginalTypeEnum.aotFixedAssetsTransfer = "aotFixedAssetsTransfer";
        AssetOriginalTypeEnum.aotRetirement = "aotRetirement";
        return AssetOriginalTypeEnum;
    }());
    SAPB1.AssetOriginalTypeEnum = AssetOriginalTypeEnum;
    var AssetStatusEnum = (function () {
        function AssetStatusEnum() {
        }
        AssetStatusEnum.New = "New";
        AssetStatusEnum.Active = "Active";
        AssetStatusEnum.Inactive = "Inactive";
        return AssetStatusEnum;
    }());
    SAPB1.AssetStatusEnum = AssetStatusEnum;
    var AssetTransactionTypeEnum = (function () {
        function AssetTransactionTypeEnum() {
        }
        AssetTransactionTypeEnum.att_BeginningOfYear = "att_BeginningOfYear";
        AssetTransactionTypeEnum.att_Acquistion = "att_Acquistion";
        AssetTransactionTypeEnum.att_Retirement = "att_Retirement";
        AssetTransactionTypeEnum.att_Transfer = "att_Transfer";
        AssetTransactionTypeEnum.att_WriteUp = "att_WriteUp";
        AssetTransactionTypeEnum.att_OrdinaryDepreciation = "att_OrdinaryDepreciation";
        AssetTransactionTypeEnum.att_UplannedDepreciation = "att_UplannedDepreciation";
        AssetTransactionTypeEnum.att_SpecialDepreciation = "att_SpecialDepreciation";
        AssetTransactionTypeEnum.att_EndOfYear = "att_EndOfYear";
        return AssetTransactionTypeEnum;
    }());
    SAPB1.AssetTransactionTypeEnum = AssetTransactionTypeEnum;
    var AssetTypeEnum = (function () {
        function AssetTypeEnum() {
        }
        AssetTypeEnum.atAssetTypeGeneral = "atAssetTypeGeneral";
        AssetTypeEnum.atAssetTypeLowValueAsset = "atAssetTypeLowValueAsset";
        return AssetTypeEnum;
    }());
    SAPB1.AssetTypeEnum = AssetTypeEnum;
    var AttributeGroupFieldTypeEnum = (function () {
        function AttributeGroupFieldTypeEnum() {
        }
        AttributeGroupFieldTypeEnum.agftText = "agftText";
        AttributeGroupFieldTypeEnum.agftNumeric = "agftNumeric";
        AttributeGroupFieldTypeEnum.agftDate = "agftDate";
        AttributeGroupFieldTypeEnum.agftAmount = "agftAmount";
        AttributeGroupFieldTypeEnum.agftPrice = "agftPrice";
        AttributeGroupFieldTypeEnum.agftQuantity = "agftQuantity";
        return AttributeGroupFieldTypeEnum;
    }());
    SAPB1.AttributeGroupFieldTypeEnum = AttributeGroupFieldTypeEnum;
    var AuthenticateUserResultsEnum = (function () {
        function AuthenticateUserResultsEnum() {
        }
        AuthenticateUserResultsEnum.aturNoUserConnectedToCompany = "aturNoUserConnectedToCompany";
        AuthenticateUserResultsEnum.aturUsernamePasswordMatched = "aturUsernamePasswordMatched";
        AuthenticateUserResultsEnum.aturLogOnUserNotAdmin = "aturLogOnUserNotAdmin";
        AuthenticateUserResultsEnum.aturBadUserOrPassword = "aturBadUserOrPassword";
        AuthenticateUserResultsEnum.aturUserHasBeenLocked = "aturUserHasBeenLocked";
        AuthenticateUserResultsEnum.aturPasswordExpired = "aturPasswordExpired";
        AuthenticateUserResultsEnum.aturDBErrors = "aturDBErrors";
        return AuthenticateUserResultsEnum;
    }());
    SAPB1.AuthenticateUserResultsEnum = AuthenticateUserResultsEnum;
    var AutoAllocOnReceiptMethodEnum = (function () {
        function AutoAllocOnReceiptMethodEnum() {
        }
        AutoAllocOnReceiptMethodEnum.aaormDefaultBin = "aaormDefaultBin";
        AutoAllocOnReceiptMethodEnum.aaormItemCurrentAndHistoricalBins = "aaormItemCurrentAndHistoricalBins";
        AutoAllocOnReceiptMethodEnum.aaormItemCurrentBins = "aaormItemCurrentBins";
        AutoAllocOnReceiptMethodEnum.aaormLastBinReceivedItem = "aaormLastBinReceivedItem";
        return AutoAllocOnReceiptMethodEnum;
    }());
    SAPB1.AutoAllocOnReceiptMethodEnum = AutoAllocOnReceiptMethodEnum;
    var AutomaticPostingEnum = (function () {
        function AutomaticPostingEnum() {
        }
        AutomaticPostingEnum.apNo = "apNo";
        AutomaticPostingEnum.apInterestAndFee = "apInterestAndFee";
        AutomaticPostingEnum.apInterestOnly = "apInterestOnly";
        AutomaticPostingEnum.apFeeOnly = "apFeeOnly";
        return AutomaticPostingEnum;
    }());
    SAPB1.AutomaticPostingEnum = AutomaticPostingEnum;
    var BankStatementDocTypeEnum = (function () {
        function BankStatementDocTypeEnum() {
        }
        BankStatementDocTypeEnum.bsdtReceipts = "bsdtReceipts";
        BankStatementDocTypeEnum.bsdtPaymentToVendor = "bsdtPaymentToVendor";
        BankStatementDocTypeEnum.bsdtInvoices = "bsdtInvoices";
        BankStatementDocTypeEnum.bsdtPurchases = "bsdtPurchases";
        BankStatementDocTypeEnum.bsdtDownPaymentIncoming = "bsdtDownPaymentIncoming";
        BankStatementDocTypeEnum.bsdtDownPaymentOutgoing = "bsdtDownPaymentOutgoing";
        BankStatementDocTypeEnum.bsdtRevertInvoices = "bsdtRevertInvoices";
        BankStatementDocTypeEnum.bsdtRevertPurchases = "bsdtRevertPurchases";
        BankStatementDocTypeEnum.bsdtJournalEntry = "bsdtJournalEntry";
        return BankStatementDocTypeEnum;
    }());
    SAPB1.BankStatementDocTypeEnum = BankStatementDocTypeEnum;
    var BankStatementRowSourceEnum = (function () {
        function BankStatementRowSourceEnum() {
        }
        BankStatementRowSourceEnum.bsImported = "bsImported";
        BankStatementRowSourceEnum.bsImportedAndAmended = "bsImportedAndAmended";
        BankStatementRowSourceEnum.bsManuallyEntered = "bsManuallyEntered";
        return BankStatementRowSourceEnum;
    }());
    SAPB1.BankStatementRowSourceEnum = BankStatementRowSourceEnum;
    var BankStatementStatusEnum = (function () {
        function BankStatementStatusEnum() {
        }
        BankStatementStatusEnum.bssExecuted = "bssExecuted";
        BankStatementStatusEnum.bssDraft = "bssDraft";
        BankStatementStatusEnum.bssOld = "bssOld";
        return BankStatementStatusEnum;
    }());
    SAPB1.BankStatementStatusEnum = BankStatementStatusEnum;
    var BaseDateSelectEnum = (function () {
        function BaseDateSelectEnum() {
        }
        BaseDateSelectEnum.bdsFromDueDate = "bdsFromDueDate";
        BaseDateSelectEnum.bdsFromLastDunningRun = "bdsFromLastDunningRun";
        return BaseDateSelectEnum;
    }());
    SAPB1.BaseDateSelectEnum = BaseDateSelectEnum;
    var BatchDetailServiceStatusEnum = (function () {
        function BatchDetailServiceStatusEnum() {
        }
        BatchDetailServiceStatusEnum.bdsStatus_Released = "bdsStatus_Released";
        BatchDetailServiceStatusEnum.bdsStatus_NotAccessible = "bdsStatus_NotAccessible";
        BatchDetailServiceStatusEnum.bdsStatus_Locked = "bdsStatus_Locked";
        return BatchDetailServiceStatusEnum;
    }());
    SAPB1.BatchDetailServiceStatusEnum = BatchDetailServiceStatusEnum;
    var BinActionTypeEnum = (function () {
        function BinActionTypeEnum() {
        }
        BinActionTypeEnum.batToWarehouse = "batToWarehouse";
        BinActionTypeEnum.batFromWarehouse = "batFromWarehouse";
        return BinActionTypeEnum;
    }());
    SAPB1.BinActionTypeEnum = BinActionTypeEnum;
    var BinLocationFieldTypeEnum = (function () {
        function BinLocationFieldTypeEnum() {
        }
        BinLocationFieldTypeEnum.blftWarehouseSublevel = "blftWarehouseSublevel";
        BinLocationFieldTypeEnum.blftBinLocationAttribute = "blftBinLocationAttribute";
        return BinLocationFieldTypeEnum;
    }());
    SAPB1.BinLocationFieldTypeEnum = BinLocationFieldTypeEnum;
    var BinRestrictItemEnum = (function () {
        function BinRestrictItemEnum() {
        }
        BinRestrictItemEnum.briNone = "briNone";
        BinRestrictItemEnum.briSpecificItem = "briSpecificItem";
        BinRestrictItemEnum.briSingleItemOnly = "briSingleItemOnly";
        BinRestrictItemEnum.briSpecificItemGroup = "briSpecificItemGroup";
        BinRestrictItemEnum.briSpecificItemGroupOnly = "briSpecificItemGroupOnly";
        return BinRestrictItemEnum;
    }());
    SAPB1.BinRestrictItemEnum = BinRestrictItemEnum;
    var BinRestrictTransactionEnum = (function () {
        function BinRestrictTransactionEnum() {
        }
        BinRestrictTransactionEnum.brtNoRestrictions = "brtNoRestrictions";
        BinRestrictTransactionEnum.brtAllTrans = "brtAllTrans";
        BinRestrictTransactionEnum.brtInboundTrans = "brtInboundTrans";
        BinRestrictTransactionEnum.brtOutboundTrans = "brtOutboundTrans";
        BinRestrictTransactionEnum.brtAllExceptInventoryTrans = "brtAllExceptInventoryTrans";
        return BinRestrictTransactionEnum;
    }());
    SAPB1.BinRestrictTransactionEnum = BinRestrictTransactionEnum;
    var BinRestrictUoMEnum = (function () {
        function BinRestrictUoMEnum() {
        }
        BinRestrictUoMEnum.bruNone = "bruNone";
        BinRestrictUoMEnum.bruSpecificUoM = "bruSpecificUoM";
        BinRestrictUoMEnum.bruSingleUoMOnly = "bruSingleUoMOnly";
        BinRestrictUoMEnum.bruSpecificUoMGroup = "bruSpecificUoMGroup";
        BinRestrictUoMEnum.bruSpecificUoMGroupOnly = "bruSpecificUoMGroupOnly";
        return BinRestrictUoMEnum;
    }());
    SAPB1.BinRestrictUoMEnum = BinRestrictUoMEnum;
    var BinRestrictionBatchEnum = (function () {
        function BinRestrictionBatchEnum() {
        }
        BinRestrictionBatchEnum.brbNoRestrictions = "brbNoRestrictions";
        BinRestrictionBatchEnum.brbSingleBatch = "brbSingleBatch";
        return BinRestrictionBatchEnum;
    }());
    SAPB1.BinRestrictionBatchEnum = BinRestrictionBatchEnum;
    var BlanketAgreementDatePeriodsEnum = (function () {
        function BlanketAgreementDatePeriodsEnum() {
        }
        BlanketAgreementDatePeriodsEnum.Daily = "Daily";
        BlanketAgreementDatePeriodsEnum.Weekly = "Weekly";
        BlanketAgreementDatePeriodsEnum.Monthly = "Monthly";
        BlanketAgreementDatePeriodsEnum.Quarterly = "Quarterly";
        BlanketAgreementDatePeriodsEnum.Semiannually = "Semiannually";
        BlanketAgreementDatePeriodsEnum.Annually = "Annually";
        BlanketAgreementDatePeriodsEnum.OneTime = "OneTime";
        return BlanketAgreementDatePeriodsEnum;
    }());
    SAPB1.BlanketAgreementDatePeriodsEnum = BlanketAgreementDatePeriodsEnum;
    var BlanketAgreementDocTypeEnum = (function () {
        function BlanketAgreementDocTypeEnum() {
        }
        BlanketAgreementDocTypeEnum.ARInvoice = "ARInvoice";
        BlanketAgreementDocTypeEnum.ARCreditMemo = "ARCreditMemo";
        BlanketAgreementDocTypeEnum.Delivery = "Delivery";
        BlanketAgreementDocTypeEnum.Return = "Return";
        BlanketAgreementDocTypeEnum.SalesOrder = "SalesOrder";
        BlanketAgreementDocTypeEnum.APInvoice = "APInvoice";
        BlanketAgreementDocTypeEnum.APCreditMemo = "APCreditMemo";
        BlanketAgreementDocTypeEnum.GoodsReceiptPO = "GoodsReceiptPO";
        BlanketAgreementDocTypeEnum.GoodsReturn = "GoodsReturn";
        BlanketAgreementDocTypeEnum.PurchaseOrder = "PurchaseOrder";
        BlanketAgreementDocTypeEnum.SalesQuotation = "SalesQuotation";
        BlanketAgreementDocTypeEnum.APCorrectionInvoice = "APCorrectionInvoice";
        BlanketAgreementDocTypeEnum.APCorrectionInvoiceReversal = "APCorrectionInvoiceReversal";
        BlanketAgreementDocTypeEnum.ARCorrectionInvoice = "ARCorrectionInvoice";
        BlanketAgreementDocTypeEnum.ARCorrectionInvoiceReversal = "ARCorrectionInvoiceReversal";
        BlanketAgreementDocTypeEnum.ARDownPayment = "ARDownPayment";
        BlanketAgreementDocTypeEnum.APDownPayment = "APDownPayment";
        BlanketAgreementDocTypeEnum.PurchaseQuotation = "PurchaseQuotation";
        return BlanketAgreementDocTypeEnum;
    }());
    SAPB1.BlanketAgreementDocTypeEnum = BlanketAgreementDocTypeEnum;
    var BlanketAgreementMethodEnum = (function () {
        function BlanketAgreementMethodEnum() {
        }
        BlanketAgreementMethodEnum.amItem = "amItem";
        BlanketAgreementMethodEnum.amMonetary = "amMonetary";
        return BlanketAgreementMethodEnum;
    }());
    SAPB1.BlanketAgreementMethodEnum = BlanketAgreementMethodEnum;
    var BlanketAgreementStatusEnum = (function () {
        function BlanketAgreementStatusEnum() {
        }
        BlanketAgreementStatusEnum.asApproved = "asApproved";
        BlanketAgreementStatusEnum.asOnHold = "asOnHold";
        BlanketAgreementStatusEnum.asDraft = "asDraft";
        BlanketAgreementStatusEnum.asTerminated = "asTerminated";
        return BlanketAgreementStatusEnum;
    }());
    SAPB1.BlanketAgreementStatusEnum = BlanketAgreementStatusEnum;
    var BlanketAgreementTypeEnum = (function () {
        function BlanketAgreementTypeEnum() {
        }
        BlanketAgreementTypeEnum.atGeneral = "atGeneral";
        BlanketAgreementTypeEnum.atSpecific = "atSpecific";
        return BlanketAgreementTypeEnum;
    }());
    SAPB1.BlanketAgreementTypeEnum = BlanketAgreementTypeEnum;
    var BoAPARDocumentTypes = (function () {
        function BoAPARDocumentTypes() {
        }
        BoAPARDocumentTypes.bodt_Invoice = "bodt_Invoice";
        BoAPARDocumentTypes.bodt_CreditNote = "bodt_CreditNote";
        BoAPARDocumentTypes.bodt_DeliveryNote = "bodt_DeliveryNote";
        BoAPARDocumentTypes.bodt_Return = "bodt_Return";
        BoAPARDocumentTypes.bodt_Order = "bodt_Order";
        BoAPARDocumentTypes.bodt_PurchaseInvoice = "bodt_PurchaseInvoice";
        BoAPARDocumentTypes.bodt_PurchaseCreditNote = "bodt_PurchaseCreditNote";
        BoAPARDocumentTypes.bodt_PurchaseDeliveryNote = "bodt_PurchaseDeliveryNote";
        BoAPARDocumentTypes.bodt_PurchaseReturn = "bodt_PurchaseReturn";
        BoAPARDocumentTypes.bodt_PurchaseOrder = "bodt_PurchaseOrder";
        BoAPARDocumentTypes.bodt_Quotation = "bodt_Quotation";
        BoAPARDocumentTypes.bodt_CorrectionAPInvoice = "bodt_CorrectionAPInvoice";
        BoAPARDocumentTypes.bodt_CorrectionARInvoice = "bodt_CorrectionARInvoice";
        BoAPARDocumentTypes.bodt_Zero = "bodt_Zero";
        BoAPARDocumentTypes.bodt_MinusOne = "bodt_MinusOne";
        BoAPARDocumentTypes.bodt_PurchaseQutation = "bodt_PurchaseQutation";
        return BoAPARDocumentTypes;
    }());
    SAPB1.BoAPARDocumentTypes = BoAPARDocumentTypes;
    var BoAccountTypes = (function () {
        function BoAccountTypes() {
        }
        BoAccountTypes.at_Expenses = "at_Expenses";
        BoAccountTypes.at_Other = "at_Other";
        BoAccountTypes.at_Revenues = "at_Revenues";
        return BoAccountTypes;
    }());
    SAPB1.BoAccountTypes = BoAccountTypes;
    var BoActivities = (function () {
        function BoActivities() {
        }
        BoActivities.cn_Conversation = "cn_Conversation";
        BoActivities.cn_Meeting = "cn_Meeting";
        BoActivities.cn_Task = "cn_Task";
        BoActivities.cn_Other = "cn_Other";
        BoActivities.cn_Note = "cn_Note";
        BoActivities.cn_Campaign = "cn_Campaign";
        return BoActivities;
    }());
    SAPB1.BoActivities = BoActivities;
    var BoAdEpnsDistribMethods = (function () {
        function BoAdEpnsDistribMethods() {
        }
        BoAdEpnsDistribMethods.aedm_None = "aedm_None";
        BoAdEpnsDistribMethods.aedm_Quantity = "aedm_Quantity";
        BoAdEpnsDistribMethods.aedm_Volume = "aedm_Volume";
        BoAdEpnsDistribMethods.aedm_Weight = "aedm_Weight";
        BoAdEpnsDistribMethods.aedm_Equally = "aedm_Equally";
        BoAdEpnsDistribMethods.aedm_RowTotal = "aedm_RowTotal";
        return BoAdEpnsDistribMethods;
    }());
    SAPB1.BoAdEpnsDistribMethods = BoAdEpnsDistribMethods;
    var BoAdEpnsTaxTypes = (function () {
        function BoAdEpnsTaxTypes() {
        }
        BoAdEpnsTaxTypes.aext_NormalTax = "aext_NormalTax";
        BoAdEpnsTaxTypes.aext_NoTax = "aext_NoTax";
        BoAdEpnsTaxTypes.aext_UseTax = "aext_UseTax";
        return BoAdEpnsTaxTypes;
    }());
    SAPB1.BoAdEpnsTaxTypes = BoAdEpnsTaxTypes;
    var BoAddressType = (function () {
        function BoAddressType() {
        }
        BoAddressType.bo_ShipTo = "bo_ShipTo";
        BoAddressType.bo_BillTo = "bo_BillTo";
        return BoAddressType;
    }());
    SAPB1.BoAddressType = BoAddressType;
    var BoAeDistMthd = (function () {
        function BoAeDistMthd() {
        }
        BoAeDistMthd.aed_Equally = "aed_Equally";
        BoAeDistMthd.aed_LineTotal = "aed_LineTotal";
        BoAeDistMthd.aed_None = "aed_None";
        BoAeDistMthd.aed_Quantity = "aed_Quantity";
        BoAeDistMthd.aed_Volume = "aed_Volume";
        BoAeDistMthd.aed_Weight = "aed_Weight";
        return BoAeDistMthd;
    }());
    SAPB1.BoAeDistMthd = BoAeDistMthd;
    var BoAlertTypeforWHStockEnum = (function () {
        function BoAlertTypeforWHStockEnum() {
        }
        BoAlertTypeforWHStockEnum.atfwhs_WarningOnly = "atfwhs_WarningOnly";
        BoAlertTypeforWHStockEnum.atfwhs_Block = "atfwhs_Block";
        BoAlertTypeforWHStockEnum.atfwhs_NoMessage = "atfwhs_NoMessage";
        return BoAlertTypeforWHStockEnum;
    }());
    SAPB1.BoAlertTypeforWHStockEnum = BoAlertTypeforWHStockEnum;
    var BoAllocationByEnum = (function () {
        function BoAllocationByEnum() {
        }
        BoAllocationByEnum.ab_CashValueAfterCustoms = "ab_CashValueAfterCustoms";
        BoAllocationByEnum.ab_CashValueBeforeCustoms = "ab_CashValueBeforeCustoms";
        BoAllocationByEnum.ab_Equal = "ab_Equal";
        BoAllocationByEnum.ab_Quantity = "ab_Quantity";
        BoAllocationByEnum.ab_Volume = "ab_Volume";
        BoAllocationByEnum.ab_Weight = "ab_Weight";
        return BoAllocationByEnum;
    }());
    SAPB1.BoAllocationByEnum = BoAllocationByEnum;
    var BoApprovalRequestDecisionEnum = (function () {
        function BoApprovalRequestDecisionEnum() {
        }
        BoApprovalRequestDecisionEnum.ardPending = "ardPending";
        BoApprovalRequestDecisionEnum.ardApproved = "ardApproved";
        BoApprovalRequestDecisionEnum.ardNotApproved = "ardNotApproved";
        return BoApprovalRequestDecisionEnum;
    }());
    SAPB1.BoApprovalRequestDecisionEnum = BoApprovalRequestDecisionEnum;
    var BoApprovalRequestStatusEnum = (function () {
        function BoApprovalRequestStatusEnum() {
        }
        BoApprovalRequestStatusEnum.arsPending = "arsPending";
        BoApprovalRequestStatusEnum.arsApproved = "arsApproved";
        BoApprovalRequestStatusEnum.arsNotApproved = "arsNotApproved";
        BoApprovalRequestStatusEnum.arsGenerated = "arsGenerated";
        BoApprovalRequestStatusEnum.arsGeneratedByAuthorizer = "arsGeneratedByAuthorizer";
        BoApprovalRequestStatusEnum.arsCancelled = "arsCancelled";
        return BoApprovalRequestStatusEnum;
    }());
    SAPB1.BoApprovalRequestStatusEnum = BoApprovalRequestStatusEnum;
    var BoBOETypes = (function () {
        function BoBOETypes() {
        }
        BoBOETypes.bobt_Incoming = "bobt_Incoming";
        BoBOETypes.bobt_Outgoing = "bobt_Outgoing";
        return BoBOETypes;
    }());
    SAPB1.BoBOETypes = BoBOETypes;
    var BoBOTFromStatus = (function () {
        function BoBOTFromStatus() {
        }
        BoBOTFromStatus.btfs_Sent = "btfs_Sent";
        BoBOTFromStatus.btfs_Generated = "btfs_Generated";
        BoBOTFromStatus.btfs_Deposited = "btfs_Deposited";
        BoBOTFromStatus.btfs_Paid = "btfs_Paid";
        return BoBOTFromStatus;
    }());
    SAPB1.BoBOTFromStatus = BoBOTFromStatus;
    var BoBOTToStatus = (function () {
        function BoBOTToStatus() {
        }
        BoBOTToStatus.btts_Canceled = "btts_Canceled";
        BoBOTToStatus.btts_Generated = "btts_Generated";
        BoBOTToStatus.btts_Deposit = "btts_Deposit";
        BoBOTToStatus.btts_Paid = "btts_Paid";
        BoBOTToStatus.btts_Failed = "btts_Failed";
        BoBOTToStatus.btts_Closed = "btts_Closed";
        return BoBOTToStatus;
    }());
    SAPB1.BoBOTToStatus = BoBOTToStatus;
    var BoBarCodeStandardEnum = (function () {
        function BoBarCodeStandardEnum() {
        }
        BoBarCodeStandardEnum.rlbsan13 = "rlbsan13";
        BoBarCodeStandardEnum.rlbsCode39 = "rlbsCode39";
        BoBarCodeStandardEnum.rlbsCode128 = "rlbsCode128";
        return BoBarCodeStandardEnum;
    }());
    SAPB1.BoBarCodeStandardEnum = BoBarCodeStandardEnum;
    var BoBaseDateRateEnum = (function () {
        function BoBaseDateRateEnum() {
        }
        BoBaseDateRateEnum.bdr_PostingDate = "bdr_PostingDate";
        BoBaseDateRateEnum.bdr_TaxDate = "bdr_TaxDate";
        return BoBaseDateRateEnum;
    }());
    SAPB1.BoBaseDateRateEnum = BoBaseDateRateEnum;
    var BoBaselineDate = (function () {
        function BoBaselineDate() {
        }
        BoBaselineDate.bld_ClosingDate = "bld_ClosingDate";
        BoBaselineDate.bld_PostingDate = "bld_PostingDate";
        BoBaselineDate.bld_SystemDate = "bld_SystemDate";
        BoBaselineDate.bld_TaxDate = "bld_TaxDate";
        return BoBaselineDate;
    }());
    SAPB1.BoBaselineDate = BoBaselineDate;
    var BoBlockBudget = (function () {
        function BoBlockBudget() {
        }
        BoBlockBudget.bb_OnlyAnnualAlert = "bb_OnlyAnnualAlert";
        BoBlockBudget.bb_MonthlyAlertOnly = "bb_MonthlyAlertOnly";
        BoBlockBudget.bb_Block = "bb_Block";
        return BoBlockBudget;
    }());
    SAPB1.BoBlockBudget = BoBlockBudget;
    var BoBoeStatus = (function () {
        function BoBoeStatus() {
        }
        BoBoeStatus.boes_Created = "boes_Created";
        BoBoeStatus.boes_Sent = "boes_Sent";
        BoBoeStatus.boes_Deposited = "boes_Deposited";
        BoBoeStatus.boes_Paid = "boes_Paid";
        BoBoeStatus.boes_Cancelled = "boes_Cancelled";
        BoBoeStatus.boes_Closed = "boes_Closed";
        BoBoeStatus.boes_Failed = "boes_Failed";
        return BoBoeStatus;
    }());
    SAPB1.BoBoeStatus = BoBoeStatus;
    var BoBpAccountTypes = (function () {
        function BoBpAccountTypes() {
        }
        BoBpAccountTypes.bpat_General = "bpat_General";
        BoBpAccountTypes.bpat_DownPayment = "bpat_DownPayment";
        BoBpAccountTypes.bpat_AssetsAccount = "bpat_AssetsAccount";
        BoBpAccountTypes.bpat_Receivable = "bpat_Receivable";
        BoBpAccountTypes.bpat_Payable = "bpat_Payable";
        BoBpAccountTypes.bpat_OnCollection = "bpat_OnCollection";
        BoBpAccountTypes.bpat_Presentation = "bpat_Presentation";
        BoBpAccountTypes.bpat_AssetsPayable = "bpat_AssetsPayable";
        BoBpAccountTypes.bpat_Discounted = "bpat_Discounted";
        BoBpAccountTypes.bpat_Unpaid = "bpat_Unpaid";
        BoBpAccountTypes.bpat_OpenDebts = "bpat_OpenDebts";
        BoBpAccountTypes.bpat_Domestic = "bpat_Domestic";
        BoBpAccountTypes.bpat_Foreign = "bpat_Foreign";
        BoBpAccountTypes.bpat_CashDiscountInterim = "bpat_CashDiscountInterim";
        BoBpAccountTypes.bpat_ExchangeRateInterim = "bpat_ExchangeRateInterim";
        return BoBpAccountTypes;
    }());
    SAPB1.BoBpAccountTypes = BoBpAccountTypes;
    var BoBpsDocTypes = (function () {
        function BoBpsDocTypes() {
        }
        BoBpsDocTypes.bpdt_PaymentReference = "bpdt_PaymentReference";
        BoBpsDocTypes.bpdt_ISR = "bpdt_ISR";
        BoBpsDocTypes.bpdt_DocNum = "bpdt_DocNum";
        return BoBpsDocTypes;
    }());
    SAPB1.BoBpsDocTypes = BoBpsDocTypes;
    var BoBudgetAlert = (function () {
        function BoBudgetAlert() {
        }
        BoBudgetAlert.ba_AnnualAlert = "ba_AnnualAlert";
        BoBudgetAlert.ba_MonthlyAlert = "ba_MonthlyAlert";
        return BoBudgetAlert;
    }());
    SAPB1.BoBudgetAlert = BoBudgetAlert;
    var BoBusinessAreaEnum = (function () {
        function BoBusinessAreaEnum() {
        }
        BoBusinessAreaEnum.baSales = "baSales";
        BoBusinessAreaEnum.baPurchase = "baPurchase";
        BoBusinessAreaEnum.baSalesAndPurchase = "baSalesAndPurchase";
        return BoBusinessAreaEnum;
    }());
    SAPB1.BoBusinessAreaEnum = BoBusinessAreaEnum;
    var BoBusinessPartnerGroupTypes = (function () {
        function BoBusinessPartnerGroupTypes() {
        }
        BoBusinessPartnerGroupTypes.bbpgt_CustomerGroup = "bbpgt_CustomerGroup";
        BoBusinessPartnerGroupTypes.bbpgt_VendorGroup = "bbpgt_VendorGroup";
        return BoBusinessPartnerGroupTypes;
    }());
    SAPB1.BoBusinessPartnerGroupTypes = BoBusinessPartnerGroupTypes;
    var BoBusinessPartnerTypes = (function () {
        function BoBusinessPartnerTypes() {
        }
        BoBusinessPartnerTypes.garAll = "garAll";
        BoBusinessPartnerTypes.garCompany = "garCompany";
        BoBusinessPartnerTypes.garPrivate = "garPrivate";
        BoBusinessPartnerTypes.garGovernment = "garGovernment";
        return BoBusinessPartnerTypes;
    }());
    SAPB1.BoBusinessPartnerTypes = BoBusinessPartnerTypes;
    var BoCardCompanyTypes = (function () {
        function BoCardCompanyTypes() {
        }
        BoCardCompanyTypes.cCompany = "cCompany";
        BoCardCompanyTypes.cPrivate = "cPrivate";
        BoCardCompanyTypes.cGovernment = "cGovernment";
        return BoCardCompanyTypes;
    }());
    SAPB1.BoCardCompanyTypes = BoCardCompanyTypes;
    var BoCardTypes = (function () {
        function BoCardTypes() {
        }
        BoCardTypes.cCustomer = "cCustomer";
        BoCardTypes.cSupplier = "cSupplier";
        BoCardTypes.cLid = "cLid";
        return BoCardTypes;
    }());
    SAPB1.BoCardTypes = BoCardTypes;
    var BoChangeLogEnum = (function () {
        function BoChangeLogEnum() {
        }
        BoChangeLogEnum.clChartOfAccounts = "clChartOfAccounts";
        BoChangeLogEnum.clBusinessPartners = "clBusinessPartners";
        BoChangeLogEnum.clItems = "clItems";
        BoChangeLogEnum.clVatGroups = "clVatGroups";
        BoChangeLogEnum.clUsers = "clUsers";
        BoChangeLogEnum.clInvoices = "clInvoices";
        BoChangeLogEnum.clCreditNotes = "clCreditNotes";
        BoChangeLogEnum.clDeliveryNotes = "clDeliveryNotes";
        BoChangeLogEnum.clReturns = "clReturns";
        BoChangeLogEnum.clOrders = "clOrders";
        BoChangeLogEnum.clPurchaseInvoices = "clPurchaseInvoices";
        BoChangeLogEnum.clPurchaseCreditNotes = "clPurchaseCreditNotes";
        BoChangeLogEnum.clPurchaseDeliveryNotes = "clPurchaseDeliveryNotes";
        BoChangeLogEnum.clPurchaseReturns = "clPurchaseReturns";
        BoChangeLogEnum.clPurchaseOrders = "clPurchaseOrders";
        BoChangeLogEnum.clQuotations = "clQuotations";
        BoChangeLogEnum.clIncomingPayments = "clIncomingPayments";
        BoChangeLogEnum.clJournalEntries = "clJournalEntries";
        BoChangeLogEnum.clCreditCards = "clCreditCards";
        BoChangeLogEnum.clAdminInfo = "clAdminInfo";
        BoChangeLogEnum.clVendorPayments = "clVendorPayments";
        BoChangeLogEnum.clItemGroups = "clItemGroups";
        BoChangeLogEnum.clInventoryGeneralEntry = "clInventoryGeneralEntry";
        BoChangeLogEnum.clInventoryGeneralExit = "clInventoryGeneralExit";
        BoChangeLogEnum.clWarehouses = "clWarehouses";
        BoChangeLogEnum.clProductTrees = "clProductTrees";
        BoChangeLogEnum.clStockTransfers = "clStockTransfers";
        BoChangeLogEnum.clFinancePeriods = "clFinancePeriods";
        BoChangeLogEnum.clAdditionalExpenses = "clAdditionalExpenses";
        BoChangeLogEnum.clPickLists = "clPickLists";
        BoChangeLogEnum.clMaterialRevaluation = "clMaterialRevaluation";
        BoChangeLogEnum.clCorrectionPurchaseInvoice = "clCorrectionPurchaseInvoice";
        BoChangeLogEnum.clCorrectionPurchaseInvoiceReversal = "clCorrectionPurchaseInvoiceReversal";
        BoChangeLogEnum.clCorrectionInvoice = "clCorrectionInvoice";
        BoChangeLogEnum.clCorrectionInvoiceReversal = "clCorrectionInvoiceReversal";
        BoChangeLogEnum.clEmployeesInfo = "clEmployeesInfo";
        BoChangeLogEnum.clCustomerEquipmentCards = "clCustomerEquipmentCards";
        BoChangeLogEnum.clWithholdingTaxCodes = "clWithholdingTaxCodes";
        BoChangeLogEnum.clBillOfExchange = "clBillOfExchange";
        BoChangeLogEnum.clServiceCalls = "clServiceCalls";
        BoChangeLogEnum.clProductionOrders = "clProductionOrders";
        BoChangeLogEnum.clDownPayments = "clDownPayments";
        BoChangeLogEnum.clPurchaseDownPayments = "clPurchaseDownPayments";
        BoChangeLogEnum.clPeriodCategory = "clPeriodCategory";
        BoChangeLogEnum.clHouseBankAccounts = "clHouseBankAccounts";
        BoChangeLogEnum.clSalesTaxInvoice = "clSalesTaxInvoice";
        BoChangeLogEnum.clPurchaseTaxInvoice = "clPurchaseTaxInvoice";
        BoChangeLogEnum.clExternalBankOperationCodes = "clExternalBankOperationCodes";
        BoChangeLogEnum.clInternalBankOperationCodes = "clInternalBankOperationCodes";
        BoChangeLogEnum.clOutgoingExciseInvoice = "clOutgoingExciseInvoice";
        BoChangeLogEnum.clIncomingExciseInvoice = "clIncomingExciseInvoice";
        BoChangeLogEnum.clInventoryTransferRequests = "clInventoryTransferRequests";
        BoChangeLogEnum.clPurchaseQuotation = "clPurchaseQuotation";
        BoChangeLogEnum.clUDO = "clUDO";
        return BoChangeLogEnum;
    }());
    SAPB1.BoChangeLogEnum = BoChangeLogEnum;
    var BoCheckDepositTypeEnum = (function () {
        function BoCheckDepositTypeEnum() {
        }
        BoCheckDepositTypeEnum.cdtCashChecks = "cdtCashChecks";
        BoCheckDepositTypeEnum.cdtPostdatedChecks = "cdtPostdatedChecks";
        return BoCheckDepositTypeEnum;
    }());
    SAPB1.BoCheckDepositTypeEnum = BoCheckDepositTypeEnum;
    var BoClosingDateProcedureBaseDateEnum = (function () {
        function BoClosingDateProcedureBaseDateEnum() {
        }
        BoClosingDateProcedureBaseDateEnum.bocpdbld_BaseSystemDate = "bocpdbld_BaseSystemDate";
        BoClosingDateProcedureBaseDateEnum.bocpdbld_PostingDate = "bocpdbld_PostingDate";
        return BoClosingDateProcedureBaseDateEnum;
    }());
    SAPB1.BoClosingDateProcedureBaseDateEnum = BoClosingDateProcedureBaseDateEnum;
    var BoClosingDateProcedureDueMonthEnum = (function () {
        function BoClosingDateProcedureDueMonthEnum() {
        }
        BoClosingDateProcedureDueMonthEnum.bocpddm_HalfMonth = "bocpddm_HalfMonth";
        BoClosingDateProcedureDueMonthEnum.bocpddm_MonthEnd = "bocpddm_MonthEnd";
        BoClosingDateProcedureDueMonthEnum.bocpddm_MonthStart = "bocpddm_MonthStart";
        BoClosingDateProcedureDueMonthEnum.bocpddm_None = "bocpddm_None";
        return BoClosingDateProcedureDueMonthEnum;
    }());
    SAPB1.BoClosingDateProcedureDueMonthEnum = BoClosingDateProcedureDueMonthEnum;
    var BoCockpitTypeEnum = (function () {
        function BoCockpitTypeEnum() {
        }
        BoCockpitTypeEnum.cptt_UserCockpit = "cptt_UserCockpit";
        BoCockpitTypeEnum.cptt_TemplateCockpit = "cptt_TemplateCockpit";
        return BoCockpitTypeEnum;
    }());
    SAPB1.BoCockpitTypeEnum = BoCockpitTypeEnum;
    var BoConsumptionMethod = (function () {
        function BoConsumptionMethod() {
        }
        BoConsumptionMethod.cm_BackwardForward = "cm_BackwardForward";
        BoConsumptionMethod.cm_ForwardBackward = "cm_ForwardBackward";
        return BoConsumptionMethod;
    }());
    SAPB1.BoConsumptionMethod = BoConsumptionMethod;
    var BoContractTypes = (function () {
        function BoContractTypes() {
        }
        BoContractTypes.ct_Customer = "ct_Customer";
        BoContractTypes.ct_ItemGroup = "ct_ItemGroup";
        BoContractTypes.ct_SerialNumber = "ct_SerialNumber";
        return BoContractTypes;
    }());
    SAPB1.BoContractTypes = BoContractTypes;
    var BoCorInvItemStatus = (function () {
        function BoCorInvItemStatus() {
        }
        BoCorInvItemStatus.ciis_Was = "ciis_Was";
        BoCorInvItemStatus.ciis_ShouldBe = "ciis_ShouldBe";
        return BoCorInvItemStatus;
    }());
    SAPB1.BoCorInvItemStatus = BoCorInvItemStatus;
    var BoCpCardAcct = (function () {
        function BoCpCardAcct() {
        }
        BoCpCardAcct.cfp_Card = "cfp_Card";
        BoCpCardAcct.cfp_Account = "cfp_Account";
        return BoCpCardAcct;
    }());
    SAPB1.BoCpCardAcct = BoCpCardAcct;
    var BoCurrencyCheck = (function () {
        function BoCurrencyCheck() {
        }
        BoCurrencyCheck.cc_Block = "cc_Block";
        BoCurrencyCheck.cc_NoMessage = "cc_NoMessage";
        return BoCurrencyCheck;
    }());
    SAPB1.BoCurrencyCheck = BoCurrencyCheck;
    var BoCurrencySources = (function () {
        function BoCurrencySources() {
        }
        BoCurrencySources.bocs_LocalCurrency = "bocs_LocalCurrency";
        BoCurrencySources.bocs_SystemCurrency = "bocs_SystemCurrency";
        BoCurrencySources.bocs_BPCurrency = "bocs_BPCurrency";
        return BoCurrencySources;
    }());
    SAPB1.BoCurrencySources = BoCurrencySources;
    var BoDataOwnershipManageMethodEnum = (function () {
        function BoDataOwnershipManageMethodEnum() {
        }
        BoDataOwnershipManageMethodEnum.doManageByDocOnly = "doManageByDocOnly";
        BoDataOwnershipManageMethodEnum.doManageByBPOnly = "doManageByBPOnly";
        BoDataOwnershipManageMethodEnum.doManageByBPnDoc = "doManageByBPnDoc";
        return BoDataOwnershipManageMethodEnum;
    }());
    SAPB1.BoDataOwnershipManageMethodEnum = BoDataOwnershipManageMethodEnum;
    var BoDataSourceEnum = (function () {
        function BoDataSourceEnum() {
        }
        BoDataSourceEnum.rldsFreeText = "rldsFreeText";
        BoDataSourceEnum.rldsSystemVariable = "rldsSystemVariable";
        BoDataSourceEnum.rldsDatabase = "rldsDatabase";
        BoDataSourceEnum.rldsFormula = "rldsFormula";
        return BoDataSourceEnum;
    }());
    SAPB1.BoDataSourceEnum = BoDataSourceEnum;
    var BoDateTemplate = (function () {
        function BoDateTemplate() {
        }
        BoDateTemplate.dt_DDMMYY = "dt_DDMMYY";
        BoDateTemplate.dt_DDMMCCYY = "dt_DDMMCCYY";
        BoDateTemplate.dt_MMDDYY = "dt_MMDDYY";
        BoDateTemplate.dt_MMDDCCYY = "dt_MMDDCCYY";
        BoDateTemplate.dt_CCYYMMDD = "dt_CCYYMMDD";
        BoDateTemplate.dt_DDMonthYYYY = "dt_DDMonthYYYY";
        BoDateTemplate.dt_YYMMDD = "dt_YYMMDD";
        return BoDateTemplate;
    }());
    SAPB1.BoDateTemplate = BoDateTemplate;
    var BoDeductionTaxGroupCodeEnum = (function () {
        function BoDeductionTaxGroupCodeEnum() {
        }
        BoDeductionTaxGroupCodeEnum.dtgcInterestReceivers = "dtgcInterestReceivers";
        BoDeductionTaxGroupCodeEnum.dtgcEmployeeReceivingCommission = "dtgcEmployeeReceivingCommission";
        BoDeductionTaxGroupCodeEnum.dtgcWritersPrice = "dtgcWritersPrice";
        BoDeductionTaxGroupCodeEnum.dtgcPaidServices = "dtgcPaidServices";
        BoDeductionTaxGroupCodeEnum.dtgcPaymentsToForeignCitizens = "dtgcPaymentsToForeignCitizens";
        BoDeductionTaxGroupCodeEnum.dtgcPaymentsForCitizensInForeignCountries = "dtgcPaymentsForCitizensInForeignCountries";
        BoDeductionTaxGroupCodeEnum.dtgcInvalidPaymentFromCompensationFund = "dtgcInvalidPaymentFromCompensationFund";
        BoDeductionTaxGroupCodeEnum.dtgcRepaymentToEmployerFromCompensationFund = "dtgcRepaymentToEmployerFromCompensationFund";
        BoDeductionTaxGroupCodeEnum.dtgcRentalPayments = "dtgcRentalPayments";
        BoDeductionTaxGroupCodeEnum.dtgcPaymentsFromStudyFund = "dtgcPaymentsFromStudyFund";
        BoDeductionTaxGroupCodeEnum.dtgcDividendPayments = "dtgcDividendPayments";
        return BoDeductionTaxGroupCodeEnum;
    }());
    SAPB1.BoDeductionTaxGroupCodeEnum = BoDeductionTaxGroupCodeEnum;
    var BoDefaultBatchStatus = (function () {
        function BoDefaultBatchStatus() {
        }
        BoDefaultBatchStatus.dbs_Released = "dbs_Released";
        BoDefaultBatchStatus.dbs_NotAccessible = "dbs_NotAccessible";
        BoDefaultBatchStatus.dbs_Locked = "dbs_Locked";
        return BoDefaultBatchStatus;
    }());
    SAPB1.BoDefaultBatchStatus = BoDefaultBatchStatus;
    var BoDepositAccountTypeEnum = (function () {
        function BoDepositAccountTypeEnum() {
        }
        BoDepositAccountTypeEnum.datBankAccount = "datBankAccount";
        BoDepositAccountTypeEnum.datBusinessPartner = "datBusinessPartner";
        return BoDepositAccountTypeEnum;
    }());
    SAPB1.BoDepositAccountTypeEnum = BoDepositAccountTypeEnum;
    var BoDepositCheckEnum = (function () {
        function BoDepositCheckEnum() {
        }
        BoDepositCheckEnum.dtNo = "dtNo";
        BoDepositCheckEnum.dcAsCash = "dcAsCash";
        BoDepositCheckEnum.dtAsPostdated = "dtAsPostdated";
        return BoDepositCheckEnum;
    }());
    SAPB1.BoDepositCheckEnum = BoDepositCheckEnum;
    var BoDepositPostingTypes = (function () {
        function BoDepositPostingTypes() {
        }
        BoDepositPostingTypes.dpt_Collection = "dpt_Collection";
        BoDepositPostingTypes.dpt_Discounted = "dpt_Discounted";
        return BoDepositPostingTypes;
    }());
    SAPB1.BoDepositPostingTypes = BoDepositPostingTypes;
    var BoDepositTypeEnum = (function () {
        function BoDepositTypeEnum() {
        }
        BoDepositTypeEnum.dtChecks = "dtChecks";
        BoDepositTypeEnum.dtCredit = "dtCredit";
        BoDepositTypeEnum.dtCash = "dtCash";
        BoDepositTypeEnum.dtBOE = "dtBOE";
        return BoDepositTypeEnum;
    }());
    SAPB1.BoDepositTypeEnum = BoDepositTypeEnum;
    var BoDocItemType = (function () {
        function BoDocItemType() {
        }
        BoDocItemType.dit_Item = "dit_Item";
        BoDocItemType.dit_Resource = "dit_Resource";
        return BoDocItemType;
    }());
    SAPB1.BoDocItemType = BoDocItemType;
    var BoDocLineType = (function () {
        function BoDocLineType() {
        }
        BoDocLineType.dlt_Regular = "dlt_Regular";
        BoDocLineType.dlt_Alternative = "dlt_Alternative";
        return BoDocLineType;
    }());
    SAPB1.BoDocLineType = BoDocLineType;
    var BoDocSpecialLineType = (function () {
        function BoDocSpecialLineType() {
        }
        BoDocSpecialLineType.dslt_Text = "dslt_Text";
        BoDocSpecialLineType.dslt_Subtotal = "dslt_Subtotal";
        return BoDocSpecialLineType;
    }());
    SAPB1.BoDocSpecialLineType = BoDocSpecialLineType;
    var BoDocSummaryTypes = (function () {
        function BoDocSummaryTypes() {
        }
        BoDocSummaryTypes.dNoSummary = "dNoSummary";
        BoDocSummaryTypes.dByItems = "dByItems";
        BoDocSummaryTypes.dByDocuments = "dByDocuments";
        return BoDocSummaryTypes;
    }());
    SAPB1.BoDocSummaryTypes = BoDocSummaryTypes;
    var BoDocWhsAutoIssueMethod = (function () {
        function BoDocWhsAutoIssueMethod() {
        }
        BoDocWhsAutoIssueMethod.whsBinSingleChoiceOnly = "whsBinSingleChoiceOnly";
        BoDocWhsAutoIssueMethod.whsBinBinCodeOrder = "whsBinBinCodeOrder";
        BoDocWhsAutoIssueMethod.whsBinAltSortCodeOrder = "whsBinAltSortCodeOrder";
        BoDocWhsAutoIssueMethod.whsBinQtyDescendingOrder = "whsBinQtyDescendingOrder";
        BoDocWhsAutoIssueMethod.whsBinQtyAscendingOrder = "whsBinQtyAscendingOrder";
        BoDocWhsAutoIssueMethod.whsBinFIFO = "whsBinFIFO";
        BoDocWhsAutoIssueMethod.whsBinLIFO = "whsBinLIFO";
        BoDocWhsAutoIssueMethod.whsBinSingleBinPreferred = "whsBinSingleBinPreferred";
        return BoDocWhsAutoIssueMethod;
    }());
    SAPB1.BoDocWhsAutoIssueMethod = BoDocWhsAutoIssueMethod;
    var BoDocWhsUpdateTypes = (function () {
        function BoDocWhsUpdateTypes() {
        }
        BoDocWhsUpdateTypes.dwh_No = "dwh_No";
        BoDocWhsUpdateTypes.dwh_OrdersFromVendors = "dwh_OrdersFromVendors";
        BoDocWhsUpdateTypes.dwh_CustomerOrders = "dwh_CustomerOrders";
        BoDocWhsUpdateTypes.dwh_Consignment = "dwh_Consignment";
        BoDocWhsUpdateTypes.dwh_Stock = "dwh_Stock";
        return BoDocWhsUpdateTypes;
    }());
    SAPB1.BoDocWhsUpdateTypes = BoDocWhsUpdateTypes;
    var BoDocumentLinePickStatus = (function () {
        function BoDocumentLinePickStatus() {
        }
        BoDocumentLinePickStatus.dlps_Picked = "dlps_Picked";
        BoDocumentLinePickStatus.dlps_NotPicked = "dlps_NotPicked";
        BoDocumentLinePickStatus.dlps_ReleasedForPicking = "dlps_ReleasedForPicking";
        BoDocumentLinePickStatus.dlps_PartiallyPicked = "dlps_PartiallyPicked";
        return BoDocumentLinePickStatus;
    }());
    SAPB1.BoDocumentLinePickStatus = BoDocumentLinePickStatus;
    var BoDocumentSubType = (function () {
        function BoDocumentSubType() {
        }
        BoDocumentSubType.bod_None = "bod_None";
        BoDocumentSubType.bod_InvoiceExempt = "bod_InvoiceExempt";
        BoDocumentSubType.bod_DebitMemo = "bod_DebitMemo";
        BoDocumentSubType.bod_Bill = "bod_Bill";
        BoDocumentSubType.bod_ExemptBill = "bod_ExemptBill";
        BoDocumentSubType.bod_PurchaseDebitMemo = "bod_PurchaseDebitMemo";
        BoDocumentSubType.bod_ExportInvoice = "bod_ExportInvoice";
        return BoDocumentSubType;
    }());
    SAPB1.BoDocumentSubType = BoDocumentSubType;
    var BoDocumentTypes = (function () {
        function BoDocumentTypes() {
        }
        BoDocumentTypes.dDocument_Items = "dDocument_Items";
        BoDocumentTypes.dDocument_Service = "dDocument_Service";
        return BoDocumentTypes;
    }());
    SAPB1.BoDocumentTypes = BoDocumentTypes;
    var BoDueDateEnum = (function () {
        function BoDueDateEnum() {
        }
        BoDueDateEnum.boddDateOfPaymentRun = "boddDateOfPaymentRun";
        BoDueDateEnum.boddDueDateOfInvoice = "boddDueDateOfInvoice";
        BoDueDateEnum.boddPaymentTerms = "boddPaymentTerms";
        return BoDueDateEnum;
    }());
    SAPB1.BoDueDateEnum = BoDueDateEnum;
    var BoDurations = (function () {
        function BoDurations() {
        }
        BoDurations.du_Minuts = "du_Minuts";
        BoDurations.du_Hours = "du_Hours";
        BoDurations.du_Days = "du_Days";
        return BoDurations;
    }());
    SAPB1.BoDurations = BoDurations;
    var BoExpenseOperationTypeEnum = (function () {
        function BoExpenseOperationTypeEnum() {
        }
        BoExpenseOperationTypeEnum.bo_ExpOpType_ProfessionalServices = "bo_ExpOpType_ProfessionalServices";
        BoExpenseOperationTypeEnum.bo_ExpOpType_RentingAssets = "bo_ExpOpType_RentingAssets";
        BoExpenseOperationTypeEnum.bo_ExpOpType_Others = "bo_ExpOpType_Others";
        BoExpenseOperationTypeEnum.bo_ExpOpType_None = "bo_ExpOpType_None";
        return BoExpenseOperationTypeEnum;
    }());
    SAPB1.BoExpenseOperationTypeEnum = BoExpenseOperationTypeEnum;
    var BoExtensionErrorActionEnum = (function () {
        function BoExtensionErrorActionEnum() {
        }
        BoExtensionErrorActionEnum.eeaStop = "eeaStop";
        BoExtensionErrorActionEnum.eeaIgnore = "eeaIgnore";
        BoExtensionErrorActionEnum.eeaPrompt = "eeaPrompt";
        return BoExtensionErrorActionEnum;
    }());
    SAPB1.BoExtensionErrorActionEnum = BoExtensionErrorActionEnum;
    var BoFatherCardTypes = (function () {
        function BoFatherCardTypes() {
        }
        BoFatherCardTypes.cPayments_sum = "cPayments_sum";
        BoFatherCardTypes.cDelivery_sum = "cDelivery_sum";
        return BoFatherCardTypes;
    }());
    SAPB1.BoFatherCardTypes = BoFatherCardTypes;
    var BoFieldTypes = (function () {
        function BoFieldTypes() {
        }
        BoFieldTypes.db_Alpha = "db_Alpha";
        BoFieldTypes.db_Memo = "db_Memo";
        BoFieldTypes.db_Numeric = "db_Numeric";
        BoFieldTypes.db_Date = "db_Date";
        BoFieldTypes.db_Float = "db_Float";
        return BoFieldTypes;
    }());
    SAPB1.BoFieldTypes = BoFieldTypes;
    var BoFldSubTypes = (function () {
        function BoFldSubTypes() {
        }
        BoFldSubTypes.st_None = "st_None";
        BoFldSubTypes.st_Address = "st_Address";
        BoFldSubTypes.st_Phone = "st_Phone";
        BoFldSubTypes.st_Time = "st_Time";
        BoFldSubTypes.st_Rate = "st_Rate";
        BoFldSubTypes.st_Sum = "st_Sum";
        BoFldSubTypes.st_Price = "st_Price";
        BoFldSubTypes.st_Quantity = "st_Quantity";
        BoFldSubTypes.st_Percentage = "st_Percentage";
        BoFldSubTypes.st_Measurement = "st_Measurement";
        BoFldSubTypes.st_Link = "st_Link";
        BoFldSubTypes.st_Image = "st_Image";
        return BoFldSubTypes;
    }());
    SAPB1.BoFldSubTypes = BoFldSubTypes;
    var BoForecastViewType = (function () {
        function BoForecastViewType() {
        }
        BoForecastViewType.fvtDaily = "fvtDaily";
        BoForecastViewType.fvtWeekly = "fvtWeekly";
        BoForecastViewType.fvtMonthly = "fvtMonthly";
        return BoForecastViewType;
    }());
    SAPB1.BoForecastViewType = BoForecastViewType;
    var BoFormattedSearchActionEnum = (function () {
        function BoFormattedSearchActionEnum() {
        }
        BoFormattedSearchActionEnum.bofsaNone = "bofsaNone";
        BoFormattedSearchActionEnum.bofsaQuery = "bofsaQuery";
        BoFormattedSearchActionEnum.bofsaValidValues = "bofsaValidValues";
        return BoFormattedSearchActionEnum;
    }());
    SAPB1.BoFormattedSearchActionEnum = BoFormattedSearchActionEnum;
    var BoFrequency = (function () {
        function BoFrequency() {
        }
        BoFrequency.bof_Daily = "bof_Daily";
        BoFrequency.bof_Weekly = "bof_Weekly";
        BoFrequency.bof_Every4Weeks = "bof_Every4Weeks";
        BoFrequency.bof_Monthly = "bof_Monthly";
        BoFrequency.bof_Quarterly = "bof_Quarterly";
        BoFrequency.bof_HalfYearly = "bof_HalfYearly";
        BoFrequency.bof_Annually = "bof_Annually";
        BoFrequency.bof_OneTime = "bof_OneTime";
        BoFrequency.bof_EveryXDays = "bof_EveryXDays";
        return BoFrequency;
    }());
    SAPB1.BoFrequency = BoFrequency;
    var BoGLMethods = (function () {
        function BoGLMethods() {
        }
        BoGLMethods.glm_WH = "glm_WH";
        BoGLMethods.glm_ItemClass = "glm_ItemClass";
        BoGLMethods.glm_ItemLevel = "glm_ItemLevel";
        return BoGLMethods;
    }());
    SAPB1.BoGLMethods = BoGLMethods;
    var BoGenderTypes = (function () {
        function BoGenderTypes() {
        }
        BoGenderTypes.gt_Female = "gt_Female";
        BoGenderTypes.gt_Male = "gt_Male";
        BoGenderTypes.gt_Undefined = "gt_Undefined";
        return BoGenderTypes;
    }());
    SAPB1.BoGenderTypes = BoGenderTypes;
    var BoGridTypeEnum = (function () {
        function BoGridTypeEnum() {
        }
        BoGridTypeEnum.gtCombination = "gtCombination";
        BoGridTypeEnum.gtContinuousLine = "gtContinuousLine";
        BoGridTypeEnum.gtBrokenLine = "gtBrokenLine";
        BoGridTypeEnum.gtDots = "gtDots";
        return BoGridTypeEnum;
    }());
    SAPB1.BoGridTypeEnum = BoGridTypeEnum;
    var BoHorizontalAlignmentEnum = (function () {
        function BoHorizontalAlignmentEnum() {
        }
        BoHorizontalAlignmentEnum.rlhjRight = "rlhjRight";
        BoHorizontalAlignmentEnum.rlhjLeft = "rlhjLeft";
        BoHorizontalAlignmentEnum.rlhjCentralized = "rlhjCentralized";
        BoHorizontalAlignmentEnum.rlhjLanguageDependent = "rlhjLanguageDependent";
        return BoHorizontalAlignmentEnum;
    }());
    SAPB1.BoHorizontalAlignmentEnum = BoHorizontalAlignmentEnum;
    var BoInterimDocTypes = (function () {
        function BoInterimDocTypes() {
        }
        BoInterimDocTypes.boidt_None = "boidt_None";
        BoInterimDocTypes.boidt_ExchangeRate = "boidt_ExchangeRate";
        BoInterimDocTypes.boidt_CashDiscount = "boidt_CashDiscount";
        return BoInterimDocTypes;
    }());
    SAPB1.BoInterimDocTypes = BoInterimDocTypes;
    var BoInventorySystem = (function () {
        function BoInventorySystem() {
        }
        BoInventorySystem.bis_MovingAverage = "bis_MovingAverage";
        BoInventorySystem.bis_Standard = "bis_Standard";
        BoInventorySystem.bis_FIFO = "bis_FIFO";
        BoInventorySystem.bis_SNB = "bis_SNB";
        return BoInventorySystem;
    }());
    SAPB1.BoInventorySystem = BoInventorySystem;
    var BoIssueMethod = (function () {
        function BoIssueMethod() {
        }
        BoIssueMethod.im_Backflush = "im_Backflush";
        BoIssueMethod.im_Manual = "im_Manual";
        return BoIssueMethod;
    }());
    SAPB1.BoIssueMethod = BoIssueMethod;
    var BoItemTreeTypes = (function () {
        function BoItemTreeTypes() {
        }
        BoItemTreeTypes.iNotATree = "iNotATree";
        BoItemTreeTypes.iAssemblyTree = "iAssemblyTree";
        BoItemTreeTypes.iSalesTree = "iSalesTree";
        BoItemTreeTypes.iProductionTree = "iProductionTree";
        BoItemTreeTypes.iTemplateTree = "iTemplateTree";
        BoItemTreeTypes.iIngredient = "iIngredient";
        return BoItemTreeTypes;
    }());
    SAPB1.BoItemTreeTypes = BoItemTreeTypes;
    var BoLineBreakEnum = (function () {
        function BoLineBreakEnum() {
        }
        BoLineBreakEnum.rlsAllowOverflow = "rlsAllowOverflow";
        BoLineBreakEnum.rlsAdjustToCell = "rlsAdjustToCell";
        BoLineBreakEnum.rlsDivideIntoRows = "rlsDivideIntoRows";
        return BoLineBreakEnum;
    }());
    SAPB1.BoLineBreakEnum = BoLineBreakEnum;
    var BoMRPComponentWarehouse = (function () {
        function BoMRPComponentWarehouse() {
        }
        BoMRPComponentWarehouse.bomcw_BOM = "bomcw_BOM";
        BoMRPComponentWarehouse.bomcw_Parent = "bomcw_Parent";
        return BoMRPComponentWarehouse;
    }());
    SAPB1.BoMRPComponentWarehouse = BoMRPComponentWarehouse;
    var BoManageMethod = (function () {
        function BoManageMethod() {
        }
        BoManageMethod.bomm_OnEveryTransaction = "bomm_OnEveryTransaction";
        BoManageMethod.bomm_OnReleaseOnly = "bomm_OnReleaseOnly";
        return BoManageMethod;
    }());
    SAPB1.BoManageMethod = BoManageMethod;
    var BoMaterialTypes = (function () {
        function BoMaterialTypes() {
        }
        BoMaterialTypes.mt_GoodsForReseller = "mt_GoodsForReseller";
        BoMaterialTypes.mt_FinishedGoods = "mt_FinishedGoods";
        BoMaterialTypes.mt_GoodsInProcess = "mt_GoodsInProcess";
        BoMaterialTypes.mt_RawMaterial = "mt_RawMaterial";
        BoMaterialTypes.mt_Package = "mt_Package";
        BoMaterialTypes.mt_SubProduct = "mt_SubProduct";
        BoMaterialTypes.mt_IntermediateMaterial = "mt_IntermediateMaterial";
        BoMaterialTypes.mt_ConsumerMaterial = "mt_ConsumerMaterial";
        BoMaterialTypes.mt_FixedAsset = "mt_FixedAsset";
        BoMaterialTypes.mt_Service = "mt_Service";
        BoMaterialTypes.mt_OtherInput = "mt_OtherInput";
        BoMaterialTypes.mt_Other = "mt_Other";
        return BoMaterialTypes;
    }());
    SAPB1.BoMaterialTypes = BoMaterialTypes;
    var BoMeritalStatuses = (function () {
        function BoMeritalStatuses() {
        }
        BoMeritalStatuses.mts_Single = "mts_Single";
        BoMeritalStatuses.mts_Married = "mts_Married";
        BoMeritalStatuses.mts_Divorced = "mts_Divorced";
        BoMeritalStatuses.mts_Widowed = "mts_Widowed";
        return BoMeritalStatuses;
    }());
    SAPB1.BoMeritalStatuses = BoMeritalStatuses;
    var BoMoneyPrecisionTypes = (function () {
        function BoMoneyPrecisionTypes() {
        }
        BoMoneyPrecisionTypes.mpt_Sum = "mpt_Sum";
        BoMoneyPrecisionTypes.mpt_Price = "mpt_Price";
        BoMoneyPrecisionTypes.mpt_Rate = "mpt_Rate";
        BoMoneyPrecisionTypes.mpt_Quantity = "mpt_Quantity";
        BoMoneyPrecisionTypes.mpt_Percent = "mpt_Percent";
        BoMoneyPrecisionTypes.mpt_Measure = "mpt_Measure";
        BoMoneyPrecisionTypes.mpt_Tax = "mpt_Tax";
        return BoMoneyPrecisionTypes;
    }());
    SAPB1.BoMoneyPrecisionTypes = BoMoneyPrecisionTypes;
    var BoMsgPriorities = (function () {
        function BoMsgPriorities() {
        }
        BoMsgPriorities.pr_Low = "pr_Low";
        BoMsgPriorities.pr_Normal = "pr_Normal";
        BoMsgPriorities.pr_High = "pr_High";
        return BoMsgPriorities;
    }());
    SAPB1.BoMsgPriorities = BoMsgPriorities;
    var BoMsgRcpTypes = (function () {
        function BoMsgRcpTypes() {
        }
        BoMsgRcpTypes.rt_RandomUser = "rt_RandomUser";
        BoMsgRcpTypes.rt_ContactPerson = "rt_ContactPerson";
        BoMsgRcpTypes.rt_InternalUser = "rt_InternalUser";
        return BoMsgRcpTypes;
    }());
    SAPB1.BoMsgRcpTypes = BoMsgRcpTypes;
    var BoORCTPaymentTypeEnum = (function () {
        function BoORCTPaymentTypeEnum() {
        }
        BoORCTPaymentTypeEnum.bopt_None = "bopt_None";
        BoORCTPaymentTypeEnum.bopt_Electronic = "bopt_Electronic";
        BoORCTPaymentTypeEnum.bopt_Post = "bopt_Post";
        BoORCTPaymentTypeEnum.bopt_Telegraph = "bopt_Telegraph";
        BoORCTPaymentTypeEnum.bopt_Express = "bopt_Express";
        return BoORCTPaymentTypeEnum;
    }());
    SAPB1.BoORCTPaymentTypeEnum = BoORCTPaymentTypeEnum;
    var BoObjectTypes = (function () {
        function BoObjectTypes() {
        }
        BoObjectTypes.oChartOfAccounts = "oChartOfAccounts";
        BoObjectTypes.oBusinessPartners = "oBusinessPartners";
        BoObjectTypes.oBanks = "oBanks";
        BoObjectTypes.oItems = "oItems";
        BoObjectTypes.oVatGroups = "oVatGroups";
        BoObjectTypes.oPriceLists = "oPriceLists";
        BoObjectTypes.oSpecialPrices = "oSpecialPrices";
        BoObjectTypes.oItemProperties = "oItemProperties";
        BoObjectTypes.oBusinessPartnerGroups = "oBusinessPartnerGroups";
        BoObjectTypes.oUsers = "oUsers";
        BoObjectTypes.oInvoices = "oInvoices";
        BoObjectTypes.oCreditNotes = "oCreditNotes";
        BoObjectTypes.oDeliveryNotes = "oDeliveryNotes";
        BoObjectTypes.oReturns = "oReturns";
        BoObjectTypes.oOrders = "oOrders";
        BoObjectTypes.oPurchaseInvoices = "oPurchaseInvoices";
        BoObjectTypes.oPurchaseCreditNotes = "oPurchaseCreditNotes";
        BoObjectTypes.oPurchaseDeliveryNotes = "oPurchaseDeliveryNotes";
        BoObjectTypes.oPurchaseReturns = "oPurchaseReturns";
        BoObjectTypes.oPurchaseOrders = "oPurchaseOrders";
        BoObjectTypes.oQuotations = "oQuotations";
        BoObjectTypes.oIncomingPayments = "oIncomingPayments";
        BoObjectTypes.oJournalVouchers = "oJournalVouchers";
        BoObjectTypes.oJournalEntries = "oJournalEntries";
        BoObjectTypes.oStockTakings = "oStockTakings";
        BoObjectTypes.oContacts = "oContacts";
        BoObjectTypes.oCreditCards = "oCreditCards";
        BoObjectTypes.oCurrencyCodes = "oCurrencyCodes";
        BoObjectTypes.oPaymentTermsTypes = "oPaymentTermsTypes";
        BoObjectTypes.oBankPages = "oBankPages";
        BoObjectTypes.oManufacturers = "oManufacturers";
        BoObjectTypes.oVendorPayments = "oVendorPayments";
        BoObjectTypes.oLandedCostsCodes = "oLandedCostsCodes";
        BoObjectTypes.oShippingTypes = "oShippingTypes";
        BoObjectTypes.oLengthMeasures = "oLengthMeasures";
        BoObjectTypes.oWeightMeasures = "oWeightMeasures";
        BoObjectTypes.oItemGroups = "oItemGroups";
        BoObjectTypes.oSalesPersons = "oSalesPersons";
        BoObjectTypes.oCustomsGroups = "oCustomsGroups";
        BoObjectTypes.oChecksforPayment = "oChecksforPayment";
        BoObjectTypes.oInventoryGenEntry = "oInventoryGenEntry";
        BoObjectTypes.oInventoryGenExit = "oInventoryGenExit";
        BoObjectTypes.oWarehouses = "oWarehouses";
        BoObjectTypes.oCommissionGroups = "oCommissionGroups";
        BoObjectTypes.oProductTrees = "oProductTrees";
        BoObjectTypes.oStockTransfer = "oStockTransfer";
        BoObjectTypes.oWorkOrders = "oWorkOrders";
        BoObjectTypes.oCreditPaymentMethods = "oCreditPaymentMethods";
        BoObjectTypes.oCreditCardPayments = "oCreditCardPayments";
        BoObjectTypes.oAlternateCatNum = "oAlternateCatNum";
        BoObjectTypes.oBudget = "oBudget";
        BoObjectTypes.oBudgetDistribution = "oBudgetDistribution";
        BoObjectTypes.oMessages = "oMessages";
        BoObjectTypes.oBudgetScenarios = "oBudgetScenarios";
        BoObjectTypes.oUserDefaultGroups = "oUserDefaultGroups";
        BoObjectTypes.oSalesOpportunities = "oSalesOpportunities";
        BoObjectTypes.oSalesStages = "oSalesStages";
        BoObjectTypes.oActivityTypes = "oActivityTypes";
        BoObjectTypes.oActivityLocations = "oActivityLocations";
        BoObjectTypes.oDrafts = "oDrafts";
        BoObjectTypes.oDeductionTaxHierarchies = "oDeductionTaxHierarchies";
        BoObjectTypes.oDeductionTaxGroups = "oDeductionTaxGroups";
        BoObjectTypes.oAdditionalExpenses = "oAdditionalExpenses";
        BoObjectTypes.oSalesTaxAuthorities = "oSalesTaxAuthorities";
        BoObjectTypes.oSalesTaxAuthoritiesTypes = "oSalesTaxAuthoritiesTypes";
        BoObjectTypes.oSalesTaxCodes = "oSalesTaxCodes";
        BoObjectTypes.oQueryCategories = "oQueryCategories";
        BoObjectTypes.oFactoringIndicators = "oFactoringIndicators";
        BoObjectTypes.oPaymentsDrafts = "oPaymentsDrafts";
        BoObjectTypes.oAccountSegmentations = "oAccountSegmentations";
        BoObjectTypes.oAccountSegmentationCategories = "oAccountSegmentationCategories";
        BoObjectTypes.oWarehouseLocations = "oWarehouseLocations";
        BoObjectTypes.oForms1099 = "oForms1099";
        BoObjectTypes.oInventoryCycles = "oInventoryCycles";
        BoObjectTypes.oWizardPaymentMethods = "oWizardPaymentMethods";
        BoObjectTypes.oBPPriorities = "oBPPriorities";
        BoObjectTypes.oDunningLetters = "oDunningLetters";
        BoObjectTypes.oUserFields = "oUserFields";
        BoObjectTypes.oUserTables = "oUserTables";
        BoObjectTypes.oPickLists = "oPickLists";
        BoObjectTypes.oPaymentRunExport = "oPaymentRunExport";
        BoObjectTypes.oUserQueries = "oUserQueries";
        BoObjectTypes.oMaterialRevaluation = "oMaterialRevaluation";
        BoObjectTypes.oCorrectionPurchaseInvoice = "oCorrectionPurchaseInvoice";
        BoObjectTypes.oCorrectionPurchaseInvoiceReversal = "oCorrectionPurchaseInvoiceReversal";
        BoObjectTypes.oCorrectionInvoice = "oCorrectionInvoice";
        BoObjectTypes.oCorrectionInvoiceReversal = "oCorrectionInvoiceReversal";
        BoObjectTypes.oContractTemplates = "oContractTemplates";
        BoObjectTypes.oEmployeesInfo = "oEmployeesInfo";
        BoObjectTypes.oCustomerEquipmentCards = "oCustomerEquipmentCards";
        BoObjectTypes.oWithholdingTaxCodes = "oWithholdingTaxCodes";
        BoObjectTypes.oBillOfExchangeTransactions = "oBillOfExchangeTransactions";
        BoObjectTypes.oKnowledgeBaseSolutions = "oKnowledgeBaseSolutions";
        BoObjectTypes.oServiceContracts = "oServiceContracts";
        BoObjectTypes.oServiceCalls = "oServiceCalls";
        BoObjectTypes.oUserKeys = "oUserKeys";
        BoObjectTypes.oQueue = "oQueue";
        BoObjectTypes.oSalesForecast = "oSalesForecast";
        BoObjectTypes.oTerritories = "oTerritories";
        BoObjectTypes.oIndustries = "oIndustries";
        BoObjectTypes.oProductionOrders = "oProductionOrders";
        BoObjectTypes.oDownPayments = "oDownPayments";
        BoObjectTypes.oPurchaseDownPayments = "oPurchaseDownPayments";
        BoObjectTypes.oPackagesTypes = "oPackagesTypes";
        BoObjectTypes.oUserObjectsMD = "oUserObjectsMD";
        BoObjectTypes.oTeams = "oTeams";
        BoObjectTypes.oRelationships = "oRelationships";
        BoObjectTypes.oUserPermissionTree = "oUserPermissionTree";
        BoObjectTypes.oActivityStatus = "oActivityStatus";
        BoObjectTypes.oChooseFromList = "oChooseFromList";
        BoObjectTypes.oFormattedSearches = "oFormattedSearches";
        BoObjectTypes.oAttachments2 = "oAttachments2";
        BoObjectTypes.oUserLanguages = "oUserLanguages";
        BoObjectTypes.oMultiLanguageTranslations = "oMultiLanguageTranslations";
        BoObjectTypes.oDynamicSystemStrings = "oDynamicSystemStrings";
        BoObjectTypes.oHouseBankAccounts = "oHouseBankAccounts";
        BoObjectTypes.oBusinessPlaces = "oBusinessPlaces";
        BoObjectTypes.oLocalEra = "oLocalEra";
        BoObjectTypes.oNotaFiscalCFOP = "oNotaFiscalCFOP";
        BoObjectTypes.oNotaFiscalCST = "oNotaFiscalCST";
        BoObjectTypes.oNotaFiscalUsage = "oNotaFiscalUsage";
        BoObjectTypes.oClosingDateProcedure = "oClosingDateProcedure";
        BoObjectTypes.oBPFiscalRegistryID = "oBPFiscalRegistryID";
        BoObjectTypes.oSalesTaxInvoice = "oSalesTaxInvoice";
        BoObjectTypes.oPurchaseTaxInvoice = "oPurchaseTaxInvoice";
        BoObjectTypes.oPurchaseQuotations = "oPurchaseQuotations";
        BoObjectTypes.oStockTransferDraft = "oStockTransferDraft";
        BoObjectTypes.oInventoryTransferRequest = "oInventoryTransferRequest";
        BoObjectTypes.oPurchaseRequest = "oPurchaseRequest";
        return BoObjectTypes;
    }());
    SAPB1.BoObjectTypes = BoObjectTypes;
    var BoOpenIncPayment = (function () {
        function BoOpenIncPayment() {
        }
        BoOpenIncPayment.oip_BankTransfer = "oip_BankTransfer";
        BoOpenIncPayment.oip_Cash = "oip_Cash";
        BoOpenIncPayment.oip_Checks = "oip_Checks";
        BoOpenIncPayment.oip_Credit = "oip_Credit";
        BoOpenIncPayment.oip_No = "oip_No";
        return BoOpenIncPayment;
    }());
    SAPB1.BoOpenIncPayment = BoOpenIncPayment;
    var BoOperationEnum = (function () {
        function BoOperationEnum() {
        }
        BoOperationEnum.rloNone = "rloNone";
        BoOperationEnum.rloAddition = "rloAddition";
        BoOperationEnum.rloSubtraction = "rloSubtraction";
        BoOperationEnum.rloMultiplication = "rloMultiplication";
        BoOperationEnum.rloDivision = "rloDivision";
        BoOperationEnum.rloPercentage = "rloPercentage";
        BoOperationEnum.rloLeftPartCharacters = "rloLeftPartCharacters";
        BoOperationEnum.rloRightPartMantissa = "rloRightPartMantissa";
        BoOperationEnum.rloRound = "rloRound";
        BoOperationEnum.rloConcat = "rloConcat";
        BoOperationEnum.rloRight = "rloRight";
        BoOperationEnum.rloLeft = "rloLeft";
        BoOperationEnum.rloSentence = "rloSentence";
        BoOperationEnum.rloLength = "rloLength";
        BoOperationEnum.rloCurrency = "rloCurrency";
        BoOperationEnum.rloNumber = "rloNumber";
        BoOperationEnum.rloLessThan = "rloLessThan";
        BoOperationEnum.rloLessOrEqual = "rloLessOrEqual";
        BoOperationEnum.rloEqual = "rloEqual";
        BoOperationEnum.rloNotEqual = "rloNotEqual";
        BoOperationEnum.rloGreaterOrEqual = "rloGreaterOrEqual";
        BoOperationEnum.rloGreaterThan = "rloGreaterThan";
        return BoOperationEnum;
    }());
    SAPB1.BoOperationEnum = BoOperationEnum;
    var BoOpexStatus = (function () {
        function BoOpexStatus() {
        }
        BoOpexStatus.bos_Open = "bos_Open";
        BoOpexStatus.bos_Close = "bos_Close";
        return BoOpexStatus;
    }());
    SAPB1.BoOpexStatus = BoOpexStatus;
    var BoOrientationEnum = (function () {
        function BoOrientationEnum() {
        }
        BoOrientationEnum.ortVertical = "ortVertical";
        BoOrientationEnum.ortHorizontal = "ortHorizontal";
        return BoOrientationEnum;
    }());
    SAPB1.BoOrientationEnum = BoOrientationEnum;
    var BoPayTermDueTypes = (function () {
        function BoPayTermDueTypes() {
        }
        BoPayTermDueTypes.pdt_MonthEnd = "pdt_MonthEnd";
        BoPayTermDueTypes.pdt_HalfMonth = "pdt_HalfMonth";
        BoPayTermDueTypes.pdt_MonthStart = "pdt_MonthStart";
        BoPayTermDueTypes.pdt_None = "pdt_None";
        return BoPayTermDueTypes;
    }());
    SAPB1.BoPayTermDueTypes = BoPayTermDueTypes;
    var BoPaymentMeansEnum = (function () {
        function BoPaymentMeansEnum() {
        }
        BoPaymentMeansEnum.bopmCheck = "bopmCheck";
        BoPaymentMeansEnum.bopmBankTransfer = "bopmBankTransfer";
        BoPaymentMeansEnum.bopmBillOfExchange = "bopmBillOfExchange";
        return BoPaymentMeansEnum;
    }());
    SAPB1.BoPaymentMeansEnum = BoPaymentMeansEnum;
    var BoPaymentPriorities = (function () {
        function BoPaymentPriorities() {
        }
        BoPaymentPriorities.bopp_Priority_1 = "bopp_Priority_1";
        BoPaymentPriorities.bopp_Priority_2 = "bopp_Priority_2";
        BoPaymentPriorities.bopp_Priority_3 = "bopp_Priority_3";
        BoPaymentPriorities.bopp_Priority_4 = "bopp_Priority_4";
        BoPaymentPriorities.bopp_Priority_5 = "bopp_Priority_5";
        BoPaymentPriorities.bopp_Priority_6 = "bopp_Priority_6";
        return BoPaymentPriorities;
    }());
    SAPB1.BoPaymentPriorities = BoPaymentPriorities;
    var BoPaymentTypeEnum = (function () {
        function BoPaymentTypeEnum() {
        }
        BoPaymentTypeEnum.boptIncoming = "boptIncoming";
        BoPaymentTypeEnum.boptOutgoing = "boptOutgoing";
        return BoPaymentTypeEnum;
    }());
    SAPB1.BoPaymentTypeEnum = BoPaymentTypeEnum;
    var BoPaymentsObjectType = (function () {
        function BoPaymentsObjectType() {
        }
        BoPaymentsObjectType.bopot_IncomingPayments = "bopot_IncomingPayments";
        BoPaymentsObjectType.bopot_OutgoingPayments = "bopot_OutgoingPayments";
        return BoPaymentsObjectType;
    }());
    SAPB1.BoPaymentsObjectType = BoPaymentsObjectType;
    var BoPermission = (function () {
        function BoPermission() {
        }
        BoPermission.boper_Full = "boper_Full";
        BoPermission.boper_ReadOnly = "boper_ReadOnly";
        BoPermission.boper_None = "boper_None";
        BoPermission.boper_Various = "boper_Various";
        BoPermission.boper_Undefined = "boper_Undefined";
        return BoPermission;
    }());
    SAPB1.BoPermission = BoPermission;
    var BoPickStatus = (function () {
        function BoPickStatus() {
        }
        BoPickStatus.ps_Released = "ps_Released";
        BoPickStatus.ps_Picked = "ps_Picked";
        BoPickStatus.ps_PartiallyPicked = "ps_PartiallyPicked";
        BoPickStatus.ps_PartiallyDelivered = "ps_PartiallyDelivered";
        BoPickStatus.ps_Closed = "ps_Closed";
        return BoPickStatus;
    }());
    SAPB1.BoPickStatus = BoPickStatus;
    var BoPictureSizeEnum = (function () {
        function BoPictureSizeEnum() {
        }
        BoPictureSizeEnum.rlpsOriginalSize = "rlpsOriginalSize";
        BoPictureSizeEnum.rlpsFitFieldSizeNonProportionally = "rlpsFitFieldSizeNonProportionally";
        BoPictureSizeEnum.rlpsFitFieldSizeProportionally = "rlpsFitFieldSizeProportionally";
        BoPictureSizeEnum.rlpsFitFieldHeight = "rlpsFitFieldHeight";
        BoPictureSizeEnum.rlpsFitFieldWidth = "rlpsFitFieldWidth";
        return BoPictureSizeEnum;
    }());
    SAPB1.BoPictureSizeEnum = BoPictureSizeEnum;
    var BoPlanningSystem = (function () {
        function BoPlanningSystem() {
        }
        BoPlanningSystem.bop_MRP = "bop_MRP";
        BoPlanningSystem.bop_None = "bop_None";
        return BoPlanningSystem;
    }());
    SAPB1.BoPlanningSystem = BoPlanningSystem;
    var BoPriceListGroupNum = (function () {
        function BoPriceListGroupNum() {
        }
        BoPriceListGroupNum.boplgn_Group1 = "boplgn_Group1";
        BoPriceListGroupNum.boplgn_Group2 = "boplgn_Group2";
        BoPriceListGroupNum.boplgn_Group3 = "boplgn_Group3";
        BoPriceListGroupNum.boplgn_Group4 = "boplgn_Group4";
        return BoPriceListGroupNum;
    }());
    SAPB1.BoPriceListGroupNum = BoPriceListGroupNum;
    var BoPrintReceiptEnum = (function () {
        function BoPrintReceiptEnum() {
        }
        BoPrintReceiptEnum.boprcAlways = "boprcAlways";
        BoPrintReceiptEnum.boprcNo = "boprcNo";
        BoPrintReceiptEnum.boprcOnlyWhenAdding = "boprcOnlyWhenAdding";
        return BoPrintReceiptEnum;
    }());
    SAPB1.BoPrintReceiptEnum = BoPrintReceiptEnum;
    var BoProcurementMethod = (function () {
        function BoProcurementMethod() {
        }
        BoProcurementMethod.bom_Buy = "bom_Buy";
        BoProcurementMethod.bom_Make = "bom_Make";
        return BoProcurementMethod;
    }());
    SAPB1.BoProcurementMethod = BoProcurementMethod;
    var BoProductSources = (function () {
        function BoProductSources() {
        }
        BoProductSources.bps_PurchasedFromDomVendor = "bps_PurchasedFromDomVendor";
        BoProductSources.bps_ImportedByCompany = "bps_ImportedByCompany";
        BoProductSources.bps_ImportedGoodsPurchasedFromDomVendor = "bps_ImportedGoodsPurchasedFromDomVendor";
        BoProductSources.bps_ProducedByCompany = "bps_ProducedByCompany";
        return BoProductSources;
    }());
    SAPB1.BoProductSources = BoProductSources;
    var BoProductionOrderOriginEnum = (function () {
        function BoProductionOrderOriginEnum() {
        }
        BoProductionOrderOriginEnum.bopooManual = "bopooManual";
        BoProductionOrderOriginEnum.bopooMRP = "bopooMRP";
        BoProductionOrderOriginEnum.bopooSalesOrder = "bopooSalesOrder";
        return BoProductionOrderOriginEnum;
    }());
    SAPB1.BoProductionOrderOriginEnum = BoProductionOrderOriginEnum;
    var BoProductionOrderStatusEnum = (function () {
        function BoProductionOrderStatusEnum() {
        }
        BoProductionOrderStatusEnum.boposPlanned = "boposPlanned";
        BoProductionOrderStatusEnum.boposReleased = "boposReleased";
        BoProductionOrderStatusEnum.boposClosed = "boposClosed";
        BoProductionOrderStatusEnum.boposCancelled = "boposCancelled";
        return BoProductionOrderStatusEnum;
    }());
    SAPB1.BoProductionOrderStatusEnum = BoProductionOrderStatusEnum;
    var BoProductionOrderTypeEnum = (function () {
        function BoProductionOrderTypeEnum() {
        }
        BoProductionOrderTypeEnum.bopotStandard = "bopotStandard";
        BoProductionOrderTypeEnum.bopotSpecial = "bopotSpecial";
        BoProductionOrderTypeEnum.bopotDisassembly = "bopotDisassembly";
        return BoProductionOrderTypeEnum;
    }());
    SAPB1.BoProductionOrderTypeEnum = BoProductionOrderTypeEnum;
    var BoQueryTypeEnum = (function () {
        function BoQueryTypeEnum() {
        }
        BoQueryTypeEnum.qtRegular = "qtRegular";
        BoQueryTypeEnum.qtWizard = "qtWizard";
        return BoQueryTypeEnum;
    }());
    SAPB1.BoQueryTypeEnum = BoQueryTypeEnum;
    var BoRcptCredTypes = (function () {
        function BoRcptCredTypes() {
        }
        BoRcptCredTypes.cr_Regular = "cr_Regular";
        BoRcptCredTypes.cr_Telephone = "cr_Telephone";
        BoRcptCredTypes.cr_InternetTransaction = "cr_InternetTransaction";
        return BoRcptCredTypes;
    }());
    SAPB1.BoRcptCredTypes = BoRcptCredTypes;
    var BoRcptInvTypes = (function () {
        function BoRcptInvTypes() {
        }
        BoRcptInvTypes.it_AllTransactions = "it_AllTransactions";
        BoRcptInvTypes.it_OpeningBalance = "it_OpeningBalance";
        BoRcptInvTypes.it_ClosingBalance = "it_ClosingBalance";
        BoRcptInvTypes.it_Invoice = "it_Invoice";
        BoRcptInvTypes.it_CredItnote = "it_CredItnote";
        BoRcptInvTypes.it_TaxInvoice = "it_TaxInvoice";
        BoRcptInvTypes.it_Return = "it_Return";
        BoRcptInvTypes.it_PurchaseInvoice = "it_PurchaseInvoice";
        BoRcptInvTypes.it_PurchaseCreditNote = "it_PurchaseCreditNote";
        BoRcptInvTypes.it_PurchaseDeliveryNote = "it_PurchaseDeliveryNote";
        BoRcptInvTypes.it_PurchaseReturn = "it_PurchaseReturn";
        BoRcptInvTypes.it_Receipt = "it_Receipt";
        BoRcptInvTypes.it_Deposit = "it_Deposit";
        BoRcptInvTypes.it_JournalEntry = "it_JournalEntry";
        BoRcptInvTypes.it_PaymentAdvice = "it_PaymentAdvice";
        BoRcptInvTypes.it_ChequesForPayment = "it_ChequesForPayment";
        BoRcptInvTypes.it_StockReconciliations = "it_StockReconciliations";
        BoRcptInvTypes.it_GeneralReceiptToStock = "it_GeneralReceiptToStock";
        BoRcptInvTypes.it_GeneralReleaseFromStock = "it_GeneralReleaseFromStock";
        BoRcptInvTypes.it_TransferBetweenWarehouses = "it_TransferBetweenWarehouses";
        BoRcptInvTypes.it_WorkInstructions = "it_WorkInstructions";
        BoRcptInvTypes.it_DeferredDeposit = "it_DeferredDeposit";
        BoRcptInvTypes.it_CorrectionInvoice = "it_CorrectionInvoice";
        BoRcptInvTypes.it_APCorrectionInvoice = "it_APCorrectionInvoice";
        BoRcptInvTypes.it_ARCorrectionInvoice = "it_ARCorrectionInvoice";
        BoRcptInvTypes.it_DownPayment = "it_DownPayment";
        BoRcptInvTypes.it_PurchaseDownPayment = "it_PurchaseDownPayment";
        return BoRcptInvTypes;
    }());
    SAPB1.BoRcptInvTypes = BoRcptInvTypes;
    var BoRcptTypes = (function () {
        function BoRcptTypes() {
        }
        BoRcptTypes.rCustomer = "rCustomer";
        BoRcptTypes.rAccount = "rAccount";
        BoRcptTypes.rSupplier = "rSupplier";
        return BoRcptTypes;
    }());
    SAPB1.BoRcptTypes = BoRcptTypes;
    var BoRemindUnits = (function () {
        function BoRemindUnits() {
        }
        BoRemindUnits.reu_Days = "reu_Days";
        BoRemindUnits.reu_Weeks = "reu_Weeks";
        BoRemindUnits.reu_Month = "reu_Month";
        return BoRemindUnits;
    }());
    SAPB1.BoRemindUnits = BoRemindUnits;
    var BoReportLayoutItemTypeEnum = (function () {
        function BoReportLayoutItemTypeEnum() {
        }
        BoReportLayoutItemTypeEnum.rlitPageHeader = "rlitPageHeader";
        BoReportLayoutItemTypeEnum.rlitStartOfReport = "rlitStartOfReport";
        BoReportLayoutItemTypeEnum.rlitRepetitiveAreaHeader = "rlitRepetitiveAreaHeader";
        BoReportLayoutItemTypeEnum.rlitRepetitiveArea = "rlitRepetitiveArea";
        BoReportLayoutItemTypeEnum.rlitRepetitiveAreaFooter = "rlitRepetitiveAreaFooter";
        BoReportLayoutItemTypeEnum.rlitEndOfReport = "rlitEndOfReport";
        BoReportLayoutItemTypeEnum.rlitPageFooter = "rlitPageFooter";
        BoReportLayoutItemTypeEnum.rlitTextField = "rlitTextField";
        BoReportLayoutItemTypeEnum.rlitPictureField = "rlitPictureField";
        BoReportLayoutItemTypeEnum.rlitUserField = "rlitUserField";
        return BoReportLayoutItemTypeEnum;
    }());
    SAPB1.BoReportLayoutItemTypeEnum = BoReportLayoutItemTypeEnum;
    var BoResolutionUnits = (function () {
        function BoResolutionUnits() {
        }
        BoResolutionUnits.rsu_Days = "rsu_Days";
        BoResolutionUnits.rsu_Hours = "rsu_Hours";
        return BoResolutionUnits;
    }());
    SAPB1.BoResolutionUnits = BoResolutionUnits;
    var BoResponseUnit = (function () {
        function BoResponseUnit() {
        }
        BoResponseUnit.boru_Day = "boru_Day";
        BoResponseUnit.boru_Hour = "boru_Hour";
        return BoResponseUnit;
    }());
    SAPB1.BoResponseUnit = BoResponseUnit;
    var BoRoleInTeam = (function () {
        function BoRoleInTeam() {
        }
        BoRoleInTeam.borit_Leader = "borit_Leader";
        BoRoleInTeam.borit_Member = "borit_Member";
        return BoRoleInTeam;
    }());
    SAPB1.BoRoleInTeam = BoRoleInTeam;
    var BoRoundingMethod = (function () {
        function BoRoundingMethod() {
        }
        BoRoundingMethod.borm_FixedEnding = "borm_FixedEnding";
        BoRoundingMethod.borm_FixedInterval = "borm_FixedInterval";
        BoRoundingMethod.borm_NoRounding = "borm_NoRounding";
        BoRoundingMethod.borm_RoundToFullAmount = "borm_RoundToFullAmount";
        BoRoundingMethod.borm_RoundToFullDecAmount = "borm_RoundToFullDecAmount";
        BoRoundingMethod.borm_RoundToFullTensAmount = "borm_RoundToFullTensAmount";
        return BoRoundingMethod;
    }());
    SAPB1.BoRoundingMethod = BoRoundingMethod;
    var BoRoundingRule = (function () {
        function BoRoundingRule() {
        }
        BoRoundingRule.borrRoundDown = "borrRoundDown";
        BoRoundingRule.borrRoundOff = "borrRoundOff";
        BoRoundingRule.borrRoundUp = "borrRoundUp";
        return BoRoundingRule;
    }());
    SAPB1.BoRoundingRule = BoRoundingRule;
    var BoSalaryCostUnits = (function () {
        function BoSalaryCostUnits() {
        }
        BoSalaryCostUnits.scu_Hour = "scu_Hour";
        BoSalaryCostUnits.scu_Day = "scu_Day";
        BoSalaryCostUnits.scu_Week = "scu_Week";
        BoSalaryCostUnits.scu_Month = "scu_Month";
        BoSalaryCostUnits.scu_Year = "scu_Year";
        BoSalaryCostUnits.scu_Semimonthly = "scu_Semimonthly";
        BoSalaryCostUnits.scu_Biweekly = "scu_Biweekly";
        return BoSalaryCostUnits;
    }());
    SAPB1.BoSalaryCostUnits = BoSalaryCostUnits;
    var BoSerialNumberStatus = (function () {
        function BoSerialNumberStatus() {
        }
        BoSerialNumberStatus.sns_Active = "sns_Active";
        BoSerialNumberStatus.sns_InLab = "sns_InLab";
        BoSerialNumberStatus.sns_Loaned = "sns_Loaned";
        BoSerialNumberStatus.sns_Returned = "sns_Returned";
        BoSerialNumberStatus.sns_Terminated = "sns_Terminated";
        return BoSerialNumberStatus;
    }());
    SAPB1.BoSerialNumberStatus = BoSerialNumberStatus;
    var BoSeriesGroupEnum = (function () {
        function BoSeriesGroupEnum() {
        }
        BoSeriesGroupEnum.sg_Group1 = "sg_Group1";
        BoSeriesGroupEnum.sg_Group2 = "sg_Group2";
        BoSeriesGroupEnum.sg_Group3 = "sg_Group3";
        BoSeriesGroupEnum.sg_Group4 = "sg_Group4";
        BoSeriesGroupEnum.sg_Group5 = "sg_Group5";
        BoSeriesGroupEnum.sg_Group6 = "sg_Group6";
        BoSeriesGroupEnum.sg_Group7 = "sg_Group7";
        BoSeriesGroupEnum.sg_Group8 = "sg_Group8";
        BoSeriesGroupEnum.sg_Group9 = "sg_Group9";
        BoSeriesGroupEnum.sg_Group10 = "sg_Group10";
        return BoSeriesGroupEnum;
    }());
    SAPB1.BoSeriesGroupEnum = BoSeriesGroupEnum;
    var BoSeriesTypeEnum = (function () {
        function BoSeriesTypeEnum() {
        }
        BoSeriesTypeEnum.stDocument = "stDocument";
        BoSeriesTypeEnum.stBusinessPartner = "stBusinessPartner";
        BoSeriesTypeEnum.stItem = "stItem";
        BoSeriesTypeEnum.stResource = "stResource";
        return BoSeriesTypeEnum;
    }());
    SAPB1.BoSeriesTypeEnum = BoSeriesTypeEnum;
    var BoServicePaymentMethods = (function () {
        function BoServicePaymentMethods() {
        }
        BoServicePaymentMethods.spmAccreditedToBankAccount = "spmAccreditedToBankAccount";
        BoServicePaymentMethods.spmBankTransfer = "spmBankTransfer";
        BoServicePaymentMethods.spmOther = "spmOther";
        return BoServicePaymentMethods;
    }());
    SAPB1.BoServicePaymentMethods = BoServicePaymentMethods;
    var BoServiceSupplyMethods = (function () {
        function BoServiceSupplyMethods() {
        }
        BoServiceSupplyMethods.ssmImmediate = "ssmImmediate";
        BoServiceSupplyMethods.ssmToMoreResumptions = "ssmToMoreResumptions";
        return BoServiceSupplyMethods;
    }());
    SAPB1.BoServiceSupplyMethods = BoServiceSupplyMethods;
    var BoServiceTypes = (function () {
        function BoServiceTypes() {
        }
        BoServiceTypes.bst_Regular = "bst_Regular";
        BoServiceTypes.bst_Warranty = "bst_Warranty";
        return BoServiceTypes;
    }());
    SAPB1.BoServiceTypes = BoServiceTypes;
    var BoSoClosedInTypes = (function () {
        function BoSoClosedInTypes() {
        }
        BoSoClosedInTypes.sos_Months = "sos_Months";
        BoSoClosedInTypes.sos_Weeks = "sos_Weeks";
        BoSoClosedInTypes.sos_Days = "sos_Days";
        return BoSoClosedInTypes;
    }());
    SAPB1.BoSoClosedInTypes = BoSoClosedInTypes;
    var BoSoOsStatus = (function () {
        function BoSoOsStatus() {
        }
        BoSoOsStatus.sos_Open = "sos_Open";
        BoSoOsStatus.sos_Missed = "sos_Missed";
        BoSoOsStatus.sos_Sold = "sos_Sold";
        return BoSoOsStatus;
    }());
    SAPB1.BoSoOsStatus = BoSoOsStatus;
    var BoSoStatus = (function () {
        function BoSoStatus() {
        }
        BoSoStatus.so_Open = "so_Open";
        BoSoStatus.so_Closed = "so_Closed";
        return BoSoStatus;
    }());
    SAPB1.BoSoStatus = BoSoStatus;
    var BoSortTypeEnum = (function () {
        function BoSortTypeEnum() {
        }
        BoSortTypeEnum.rlstAlpha = "rlstAlpha";
        BoSortTypeEnum.rlstNumeric = "rlstNumeric";
        BoSortTypeEnum.rlstMoney = "rlstMoney";
        BoSortTypeEnum.rlstDate = "rlstDate";
        return BoSortTypeEnum;
    }());
    SAPB1.BoSortTypeEnum = BoSortTypeEnum;
    var BoStatus = (function () {
        function BoStatus() {
        }
        BoStatus.bost_Open = "bost_Open";
        BoStatus.bost_Close = "bost_Close";
        BoStatus.bost_Paid = "bost_Paid";
        BoStatus.bost_Delivered = "bost_Delivered";
        return BoStatus;
    }());
    SAPB1.BoStatus = BoStatus;
    var BoStckTrnDir = (function () {
        function BoStckTrnDir() {
        }
        BoStckTrnDir.bos_TransferToTechnician = "bos_TransferToTechnician";
        BoStckTrnDir.bos_TransferFromTechnician = "bos_TransferFromTechnician";
        return BoStckTrnDir;
    }());
    SAPB1.BoStckTrnDir = BoStckTrnDir;
    var BoSubPeriodTypeEnum = (function () {
        function BoSubPeriodTypeEnum() {
        }
        BoSubPeriodTypeEnum.spt_Year = "spt_Year";
        BoSubPeriodTypeEnum.spt_Quarters = "spt_Quarters";
        BoSubPeriodTypeEnum.spt_Months = "spt_Months";
        BoSubPeriodTypeEnum.spt_Days = "spt_Days";
        return BoSubPeriodTypeEnum;
    }());
    SAPB1.BoSubPeriodTypeEnum = BoSubPeriodTypeEnum;
    var BoSvcCallPriorities = (function () {
        function BoSvcCallPriorities() {
        }
        BoSvcCallPriorities.scp_Low = "scp_Low";
        BoSvcCallPriorities.scp_Medium = "scp_Medium";
        BoSvcCallPriorities.scp_High = "scp_High";
        return BoSvcCallPriorities;
    }());
    SAPB1.BoSvcCallPriorities = BoSvcCallPriorities;
    var BoSvcContractStatus = (function () {
        function BoSvcContractStatus() {
        }
        BoSvcContractStatus.scs_Approved = "scs_Approved";
        BoSvcContractStatus.scs_Frozen = "scs_Frozen";
        BoSvcContractStatus.scs_Draft = "scs_Draft";
        BoSvcContractStatus.scs_Terminated = "scs_Terminated";
        return BoSvcContractStatus;
    }());
    SAPB1.BoSvcContractStatus = BoSvcContractStatus;
    var BoSvcEpxDocTypes = (function () {
        function BoSvcEpxDocTypes() {
        }
        BoSvcEpxDocTypes.edt_Invoice = "edt_Invoice";
        BoSvcEpxDocTypes.edt_Delivery = "edt_Delivery";
        BoSvcEpxDocTypes.edt_Return = "edt_Return";
        BoSvcEpxDocTypes.edt_StockTransfer = "edt_StockTransfer";
        BoSvcEpxDocTypes.edt_CreditMemo = "edt_CreditMemo";
        BoSvcEpxDocTypes.edt_Order = "edt_Order";
        BoSvcEpxDocTypes.edt_Quotation = "edt_Quotation";
        BoSvcEpxDocTypes.edt_AP_Invoice = "edt_AP_Invoice";
        BoSvcEpxDocTypes.edt_GoodsReceipt = "edt_GoodsReceipt";
        BoSvcEpxDocTypes.edt_GoodsReturn = "edt_GoodsReturn";
        BoSvcEpxDocTypes.edt_PurchaseOrder = "edt_PurchaseOrder";
        BoSvcEpxDocTypes.edt_PurchaseQuotation = "edt_PurchaseQuotation";
        BoSvcEpxDocTypes.edt_AR_CorrectionInvoice = "edt_AR_CorrectionInvoice";
        BoSvcEpxDocTypes.edt_AP_CorrectionInvoice = "edt_AP_CorrectionInvoice";
        return BoSvcEpxDocTypes;
    }());
    SAPB1.BoSvcEpxDocTypes = BoSvcEpxDocTypes;
    var BoSvcExpPartTypes = (function () {
        function BoSvcExpPartTypes() {
        }
        BoSvcExpPartTypes.sep_Inventory = "sep_Inventory";
        BoSvcExpPartTypes.sep_NonInventory = "sep_NonInventory";
        return BoSvcExpPartTypes;
    }());
    SAPB1.BoSvcExpPartTypes = BoSvcExpPartTypes;
    var BoTCDConditionEnum = (function () {
        function BoTCDConditionEnum() {
        }
        BoTCDConditionEnum.tcdcNone = "tcdcNone";
        BoTCDConditionEnum.tcdcFederalTaxID = "tcdcFederalTaxID";
        BoTCDConditionEnum.tcdcShipToAddress = "tcdcShipToAddress";
        BoTCDConditionEnum.tcdcShipToStreePOBox = "tcdcShipToStreePOBox";
        BoTCDConditionEnum.tcdcShipToCity = "tcdcShipToCity";
        BoTCDConditionEnum.tcdcShipToZipCode = "tcdcShipToZipCode";
        BoTCDConditionEnum.tcdcShipToCounty = "tcdcShipToCounty";
        BoTCDConditionEnum.tcdcShipToState = "tcdcShipToState";
        BoTCDConditionEnum.tcdcShipToCountry = "tcdcShipToCountry";
        BoTCDConditionEnum.tcdcItem = "tcdcItem";
        BoTCDConditionEnum.tcdcItemGroup = "tcdcItemGroup";
        BoTCDConditionEnum.tcdcBusinessPartner = "tcdcBusinessPartner";
        BoTCDConditionEnum.tcdcCustomerGroup = "tcdcCustomerGroup";
        BoTCDConditionEnum.tcdcVendorGroup = "tcdcVendorGroup";
        BoTCDConditionEnum.tcdcWarehouse = "tcdcWarehouse";
        BoTCDConditionEnum.tcdcGLAccount = "tcdcGLAccount";
        BoTCDConditionEnum.tcdcCustomerEquTax = "tcdcCustomerEquTax";
        BoTCDConditionEnum.tcdcTaxStatus = "tcdcTaxStatus";
        BoTCDConditionEnum.tcdcFreight = "tcdcFreight";
        BoTCDConditionEnum.tcdcUDF = "tcdcUDF";
        BoTCDConditionEnum.tcdcBranchNumber = "tcdcBranchNumber";
        return BoTCDConditionEnum;
    }());
    SAPB1.BoTCDConditionEnum = BoTCDConditionEnum;
    var BoTCDDocumentTypeEnum = (function () {
        function BoTCDDocumentTypeEnum() {
        }
        BoTCDDocumentTypeEnum.tcddtItem = "tcddtItem";
        BoTCDDocumentTypeEnum.tcddtService = "tcddtService";
        BoTCDDocumentTypeEnum.tcddtItemAndService = "tcddtItemAndService";
        return BoTCDDocumentTypeEnum;
    }());
    SAPB1.BoTCDDocumentTypeEnum = BoTCDDocumentTypeEnum;
    var BoTaxInvoiceTypes = (function () {
        function BoTaxInvoiceTypes() {
        }
        BoTaxInvoiceTypes.botit_AlterationCorrectionInvoice = "botit_AlterationCorrectionInvoice";
        BoTaxInvoiceTypes.botit_AlterationInvoice = "botit_AlterationInvoice";
        BoTaxInvoiceTypes.botit_CorrectionInvoice = "botit_CorrectionInvoice";
        BoTaxInvoiceTypes.botit_Invoice = "botit_Invoice";
        BoTaxInvoiceTypes.botit_JournalEntry = "botit_JournalEntry";
        BoTaxInvoiceTypes.botit_Payment = "botit_Payment";
        return BoTaxInvoiceTypes;
    }());
    SAPB1.BoTaxInvoiceTypes = BoTaxInvoiceTypes;
    var BoTaxPostAccEnum = (function () {
        function BoTaxPostAccEnum() {
        }
        BoTaxPostAccEnum.tpa_Default = "tpa_Default";
        BoTaxPostAccEnum.tpa_SalesTaxAccount = "tpa_SalesTaxAccount";
        BoTaxPostAccEnum.tpa_PurchaseTaxAccount = "tpa_PurchaseTaxAccount";
        return BoTaxPostAccEnum;
    }());
    SAPB1.BoTaxPostAccEnum = BoTaxPostAccEnum;
    var BoTaxRoundingRuleTypes = (function () {
        function BoTaxRoundingRuleTypes() {
        }
        BoTaxRoundingRuleTypes.trr_RoundDown = "trr_RoundDown";
        BoTaxRoundingRuleTypes.trr_RoundUp = "trr_RoundUp";
        BoTaxRoundingRuleTypes.trr_RoundOff = "trr_RoundOff";
        BoTaxRoundingRuleTypes.trr_CompanyDefault = "trr_CompanyDefault";
        return BoTaxRoundingRuleTypes;
    }());
    SAPB1.BoTaxRoundingRuleTypes = BoTaxRoundingRuleTypes;
    var BoTaxTypes = (function () {
        function BoTaxTypes() {
        }
        BoTaxTypes.tt_Yes = "tt_Yes";
        BoTaxTypes.tt_No = "tt_No";
        BoTaxTypes.tt_UseTax = "tt_UseTax";
        BoTaxTypes.tt_OffsetTax = "tt_OffsetTax";
        return BoTaxTypes;
    }());
    SAPB1.BoTaxTypes = BoTaxTypes;
    var BoTimeTemplate = (function () {
        function BoTimeTemplate() {
        }
        BoTimeTemplate.tt_24H = "tt_24H";
        BoTimeTemplate.tt_12H = "tt_12H";
        return BoTimeTemplate;
    }());
    SAPB1.BoTimeTemplate = BoTimeTemplate;
    var BoTransactionTypeEnum = (function () {
        function BoTransactionTypeEnum() {
        }
        BoTransactionTypeEnum.botrntComplete = "botrntComplete";
        BoTransactionTypeEnum.botrntReject = "botrntReject";
        return BoTransactionTypeEnum;
    }());
    SAPB1.BoTransactionTypeEnum = BoTransactionTypeEnum;
    var BoUDOObjType = (function () {
        function BoUDOObjType() {
        }
        BoUDOObjType.boud_Document = "boud_Document";
        BoUDOObjType.boud_MasterData = "boud_MasterData";
        return BoUDOObjType;
    }());
    SAPB1.BoUDOObjType = BoUDOObjType;
    var BoUPTOptions = (function () {
        function BoUPTOptions() {
        }
        BoUPTOptions.bou_FullNone = "bou_FullNone";
        BoUPTOptions.bou_FullReadNone = "bou_FullReadNone";
        return BoUPTOptions;
    }());
    SAPB1.BoUPTOptions = BoUPTOptions;
    var BoUTBTableType = (function () {
        function BoUTBTableType() {
        }
        BoUTBTableType.bott_Document = "bott_Document";
        BoUTBTableType.bott_DocumentLines = "bott_DocumentLines";
        BoUTBTableType.bott_MasterData = "bott_MasterData";
        BoUTBTableType.bott_MasterDataLines = "bott_MasterDataLines";
        BoUTBTableType.bott_NoObject = "bott_NoObject";
        BoUTBTableType.bott_NoObjectAutoIncrement = "bott_NoObjectAutoIncrement";
        return BoUTBTableType;
    }());
    SAPB1.BoUTBTableType = BoUTBTableType;
    var BoUniqueSerialNumber = (function () {
        function BoUniqueSerialNumber() {
        }
        BoUniqueSerialNumber.usn_None = "usn_None";
        BoUniqueSerialNumber.usn_MfrSerialNumber = "usn_MfrSerialNumber";
        BoUniqueSerialNumber.usn_SerialNumber = "usn_SerialNumber";
        BoUniqueSerialNumber.usn_LotNumber = "usn_LotNumber";
        return BoUniqueSerialNumber;
    }());
    SAPB1.BoUniqueSerialNumber = BoUniqueSerialNumber;
    var BoUserGroup = (function () {
        function BoUserGroup() {
        }
        BoUserGroup.ug_Regular = "ug_Regular";
        BoUserGroup.ug_Deleted = "ug_Deleted";
        return BoUserGroup;
    }());
    SAPB1.BoUserGroup = BoUserGroup;
    var BoVatCategoryEnum = (function () {
        function BoVatCategoryEnum() {
        }
        BoVatCategoryEnum.bovcInputTax = "bovcInputTax";
        BoVatCategoryEnum.bovcOutputTax = "bovcOutputTax";
        return BoVatCategoryEnum;
    }());
    SAPB1.BoVatCategoryEnum = BoVatCategoryEnum;
    var BoVatStatus = (function () {
        function BoVatStatus() {
        }
        BoVatStatus.vExempted = "vExempted";
        BoVatStatus.vLiable = "vLiable";
        BoVatStatus.vEC = "vEC";
        return BoVatStatus;
    }());
    SAPB1.BoVatStatus = BoVatStatus;
    var BoVerticalAlignmentEnum = (function () {
        function BoVerticalAlignmentEnum() {
        }
        BoVerticalAlignmentEnum.rlvaTop = "rlvaTop";
        BoVerticalAlignmentEnum.rlvaBottom = "rlvaBottom";
        BoVerticalAlignmentEnum.rlvaCentralized = "rlvaCentralized";
        return BoVerticalAlignmentEnum;
    }());
    SAPB1.BoVerticalAlignmentEnum = BoVerticalAlignmentEnum;
    var BoWorkOrderStat = (function () {
        function BoWorkOrderStat() {
        }
        BoWorkOrderStat.wk_ProductComplete = "wk_ProductComplete";
        BoWorkOrderStat.wk_WorkInstruction = "wk_WorkInstruction";
        BoWorkOrderStat.wk_WorkOrder = "wk_WorkOrder";
        return BoWorkOrderStat;
    }());
    SAPB1.BoWorkOrderStat = BoWorkOrderStat;
    var BoYesNoEnum = (function () {
        function BoYesNoEnum() {
        }
        BoYesNoEnum.tNO = "tNO";
        BoYesNoEnum.tYES = "tYES";
        return BoYesNoEnum;
    }());
    SAPB1.BoYesNoEnum = BoYesNoEnum;
    var BrazilMultiIndexerTypes = (function () {
        function BrazilMultiIndexerTypes() {
        }
        BrazilMultiIndexerTypes.bmitInvalid = "bmitInvalid";
        BrazilMultiIndexerTypes.bmitIncomeNature = "bmitIncomeNature";
        return BrazilMultiIndexerTypes;
    }());
    SAPB1.BrazilMultiIndexerTypes = BrazilMultiIndexerTypes;
    var BrazilNumericIndexerTypes = (function () {
        function BrazilNumericIndexerTypes() {
        }
        BrazilNumericIndexerTypes.bnitInvalid = "bnitInvalid";
        BrazilNumericIndexerTypes.bnitBeverageCommercialBrand = "bnitBeverageCommercialBrand";
        BrazilNumericIndexerTypes.bnitFuelGroup = "bnitFuelGroup";
        BrazilNumericIndexerTypes.bnitNatureOfCompany = "bnitNatureOfCompany";
        BrazilNumericIndexerTypes.bnitEconomicActivityType = "bnitEconomicActivityType";
        BrazilNumericIndexerTypes.bnitCooperativeAssociationType = "bnitCooperativeAssociationType";
        BrazilNumericIndexerTypes.bnitProfitTaxation = "bnitProfitTaxation";
        BrazilNumericIndexerTypes.bnitCompanyQualification = "bnitCompanyQualification";
        BrazilNumericIndexerTypes.bnitDeclarerType = "bnitDeclarerType";
        BrazilNumericIndexerTypes.bnitEnvironmentType = "bnitEnvironmentType";
        BrazilNumericIndexerTypes.bnitTributaryType = "bnitTributaryType";
        BrazilNumericIndexerTypes.bnitTributaryRegimeCode = "bnitTributaryRegimeCode";
        BrazilNumericIndexerTypes.bnitIncomeNatureTable = "bnitIncomeNatureTable";
        BrazilNumericIndexerTypes.bnitIncomeNatureCode = "bnitIncomeNatureCode";
        BrazilNumericIndexerTypes.bnitExportationDocumentType = "bnitExportationDocumentType";
        BrazilNumericIndexerTypes.bnitExportationNature = "bnitExportationNature";
        BrazilNumericIndexerTypes.bnitLadingBillType = "bnitLadingBillType";
        return BrazilNumericIndexerTypes;
    }());
    SAPB1.BrazilNumericIndexerTypes = BrazilNumericIndexerTypes;
    var BrazilStringIndexerTypes = (function () {
        function BrazilStringIndexerTypes() {
        }
        BrazilStringIndexerTypes.bsitInvalid = "bsitInvalid";
        BrazilStringIndexerTypes.bsitBeverageTable = "bsitBeverageTable";
        BrazilStringIndexerTypes.bsitNatureOfCalculationBase = "bsitNatureOfCalculationBase";
        BrazilStringIndexerTypes.bsitCreditOrigin = "bsitCreditOrigin";
        BrazilStringIndexerTypes.bsitBeverageGroup = "bsitBeverageGroup";
        BrazilStringIndexerTypes.bsitCreditContributionOrigin = "bsitCreditContributionOrigin";
        BrazilStringIndexerTypes.bsitIPIPeriod = "bsitIPIPeriod";
        BrazilStringIndexerTypes.bsitSPEDProfile = "bsitSPEDProfile";
        BrazilStringIndexerTypes.bsitImportationDocumentType = "bsitImportationDocumentType";
        BrazilStringIndexerTypes.bsitReferentialAccountCode = "bsitReferentialAccountCode";
        return BrazilStringIndexerTypes;
    }());
    SAPB1.BrazilStringIndexerTypes = BrazilStringIndexerTypes;
    var CalculateInterestMethodEnum = (function () {
        function CalculateInterestMethodEnum() {
        }
        CalculateInterestMethodEnum.cimOnRemainingAmount = "cimOnRemainingAmount";
        CalculateInterestMethodEnum.cimOnOriginalSum = "cimOnOriginalSum";
        return CalculateInterestMethodEnum;
    }());
    SAPB1.CalculateInterestMethodEnum = CalculateInterestMethodEnum;
    var CalculationBaseEnum = (function () {
        function CalculationBaseEnum() {
        }
        CalculationBaseEnum.cbYearly = "cbYearly";
        CalculationBaseEnum.cbMonthly = "cbMonthly";
        return CalculationBaseEnum;
    }());
    SAPB1.CalculationBaseEnum = CalculationBaseEnum;
    var CallMessageStatusEnum = (function () {
        function CallMessageStatusEnum() {
        }
        CallMessageStatusEnum.cmsUnread = "cmsUnread";
        CallMessageStatusEnum.cmsRead = "cmsRead";
        return CallMessageStatusEnum;
    }());
    SAPB1.CallMessageStatusEnum = CallMessageStatusEnum;
    var CallMessageTypeEnum = (function () {
        function CallMessageTypeEnum() {
        }
        CallMessageTypeEnum.cmtInformation = "cmtInformation";
        CallMessageTypeEnum.cmtWarning = "cmtWarning";
        CallMessageTypeEnum.cmtError = "cmtError";
        return CallMessageTypeEnum;
    }());
    SAPB1.CallMessageTypeEnum = CallMessageTypeEnum;
    var CampaignAssignToEnum = (function () {
        function CampaignAssignToEnum() {
        }
        CampaignAssignToEnum.catUser = "catUser";
        CampaignAssignToEnum.catEmployee = "catEmployee";
        return CampaignAssignToEnum;
    }());
    SAPB1.CampaignAssignToEnum = CampaignAssignToEnum;
    var CampaignBPStatusEnum = (function () {
        function CampaignBPStatusEnum() {
        }
        CampaignBPStatusEnum.cbpsActive = "cbpsActive";
        CampaignBPStatusEnum.cbpsInactive = "cbpsInactive";
        return CampaignBPStatusEnum;
    }());
    SAPB1.CampaignBPStatusEnum = CampaignBPStatusEnum;
    var CampaignItemTypeEnum = (function () {
        function CampaignItemTypeEnum() {
        }
        CampaignItemTypeEnum.citItems = "citItems";
        CampaignItemTypeEnum.citLabel = "citLabel";
        CampaignItemTypeEnum.citTravel = "citTravel";
        return CampaignItemTypeEnum;
    }());
    SAPB1.CampaignItemTypeEnum = CampaignItemTypeEnum;
    var CampaignStatusEnum = (function () {
        function CampaignStatusEnum() {
        }
        CampaignStatusEnum.csOpen = "csOpen";
        CampaignStatusEnum.csFinished = "csFinished";
        CampaignStatusEnum.csCanceled = "csCanceled";
        return CampaignStatusEnum;
    }());
    SAPB1.CampaignStatusEnum = CampaignStatusEnum;
    var CampaignTypeEnum = (function () {
        function CampaignTypeEnum() {
        }
        CampaignTypeEnum.ctEmail = "ctEmail";
        CampaignTypeEnum.ctMail = "ctMail";
        CampaignTypeEnum.ctFax = "ctFax";
        CampaignTypeEnum.ctPhoneCall = "ctPhoneCall";
        CampaignTypeEnum.ctMeeting = "ctMeeting";
        CampaignTypeEnum.ctSMS = "ctSMS";
        CampaignTypeEnum.ctWeb = "ctWeb";
        CampaignTypeEnum.ctOthers = "ctOthers";
        return CampaignTypeEnum;
    }());
    SAPB1.CampaignTypeEnum = CampaignTypeEnum;
    var CancelStatusEnum = (function () {
        function CancelStatusEnum() {
        }
        CancelStatusEnum.csYes = "csYes";
        CancelStatusEnum.csNo = "csNo";
        CancelStatusEnum.csCancellation = "csCancellation";
        return CancelStatusEnum;
    }());
    SAPB1.CancelStatusEnum = CancelStatusEnum;
    var ClosingOptionEnum = (function () {
        function ClosingOptionEnum() {
        }
        ClosingOptionEnum.coByCurrentSystemDate = "coByCurrentSystemDate";
        ClosingOptionEnum.coByOriginalDocumentDate = "coByOriginalDocumentDate";
        ClosingOptionEnum.coBySpecifiedDate = "coBySpecifiedDate";
        return ClosingOptionEnum;
    }());
    SAPB1.ClosingOptionEnum = ClosingOptionEnum;
    var ContractSequenceEnum = (function () {
        function ContractSequenceEnum() {
        }
        ContractSequenceEnum.cs_Monthly = "cs_Monthly";
        ContractSequenceEnum.cs_Quarterly = "cs_Quarterly";
        ContractSequenceEnum.cs_SemiAnnually = "cs_SemiAnnually";
        ContractSequenceEnum.cs_Yearly = "cs_Yearly";
        return ContractSequenceEnum;
    }());
    SAPB1.ContractSequenceEnum = ContractSequenceEnum;
    var CounterTypeEnum = (function () {
        function CounterTypeEnum() {
        }
        CounterTypeEnum.ctUser = "ctUser";
        CounterTypeEnum.ctEmployee = "ctEmployee";
        return CounterTypeEnum;
    }());
    SAPB1.CounterTypeEnum = CounterTypeEnum;
    var CountingDocumentStatusEnum = (function () {
        function CountingDocumentStatusEnum() {
        }
        CountingDocumentStatusEnum.cdsOpen = "cdsOpen";
        CountingDocumentStatusEnum.cdsClosed = "cdsClosed";
        return CountingDocumentStatusEnum;
    }());
    SAPB1.CountingDocumentStatusEnum = CountingDocumentStatusEnum;
    var CountingLineStatusEnum = (function () {
        function CountingLineStatusEnum() {
        }
        CountingLineStatusEnum.clsOpen = "clsOpen";
        CountingLineStatusEnum.clsClosed = "clsClosed";
        return CountingLineStatusEnum;
    }());
    SAPB1.CountingLineStatusEnum = CountingLineStatusEnum;
    var CountingTypeEnum = (function () {
        function CountingTypeEnum() {
        }
        CountingTypeEnum.ctSingleCounter = "ctSingleCounter";
        CountingTypeEnum.ctMultipleCounters = "ctMultipleCounters";
        return CountingTypeEnum;
    }());
    SAPB1.CountingTypeEnum = CountingTypeEnum;
    var CreateMethodEnum = (function () {
        function CreateMethodEnum() {
        }
        CreateMethodEnum.cmManual = "cmManual";
        CreateMethodEnum.cmAutomatic = "cmAutomatic";
        return CreateMethodEnum;
    }());
    SAPB1.CreateMethodEnum = CreateMethodEnum;
    var CurrenciesDecimalsEnum = (function () {
        function CurrenciesDecimalsEnum() {
        }
        CurrenciesDecimalsEnum.cd1Digit = "cd1Digit";
        CurrenciesDecimalsEnum.cd2Digits = "cd2Digits";
        CurrenciesDecimalsEnum.cd3Digits = "cd3Digits";
        CurrenciesDecimalsEnum.cd4Digits = "cd4Digits";
        CurrenciesDecimalsEnum.cd5Digits = "cd5Digits";
        CurrenciesDecimalsEnum.cd6Digits = "cd6Digits";
        CurrenciesDecimalsEnum.cdDefault = "cdDefault";
        CurrenciesDecimalsEnum.cdWithoutDecimals = "cdWithoutDecimals";
        return CurrenciesDecimalsEnum;
    }());
    SAPB1.CurrenciesDecimalsEnum = CurrenciesDecimalsEnum;
    var CycleCountDeterminationCycleByEnum = (function () {
        function CycleCountDeterminationCycleByEnum() {
        }
        CycleCountDeterminationCycleByEnum.ccdcbItemGroup = "ccdcbItemGroup";
        CycleCountDeterminationCycleByEnum.ccdcbWarehouseSublevel1 = "ccdcbWarehouseSublevel1";
        CycleCountDeterminationCycleByEnum.ccdcbWarehouseSublevel2 = "ccdcbWarehouseSublevel2";
        CycleCountDeterminationCycleByEnum.ccdcbWarehouseSublevel3 = "ccdcbWarehouseSublevel3";
        CycleCountDeterminationCycleByEnum.ccdcbWarehouseSublevel4 = "ccdcbWarehouseSublevel4";
        return CycleCountDeterminationCycleByEnum;
    }());
    SAPB1.CycleCountDeterminationCycleByEnum = CycleCountDeterminationCycleByEnum;
    var DepreciationCalculationBaseEnum = (function () {
        function DepreciationCalculationBaseEnum() {
        }
        DepreciationCalculationBaseEnum.dcbAcquisitionValue = "dcbAcquisitionValue";
        DepreciationCalculationBaseEnum.dcbNetBookValue = "dcbNetBookValue";
        return DepreciationCalculationBaseEnum;
    }());
    SAPB1.DepreciationCalculationBaseEnum = DepreciationCalculationBaseEnum;
    var DepreciationMethodEnum = (function () {
        function DepreciationMethodEnum() {
        }
        DepreciationMethodEnum.dmNoDepreciation = "dmNoDepreciation";
        DepreciationMethodEnum.dmStraightLine = "dmStraightLine";
        DepreciationMethodEnum.dmStraightLinePeriodControl = "dmStraightLinePeriodControl";
        DepreciationMethodEnum.dmDecliningBalance = "dmDecliningBalance";
        DepreciationMethodEnum.dmMultilevel = "dmMultilevel";
        DepreciationMethodEnum.dmImmediateWriteOff = "dmImmediateWriteOff";
        DepreciationMethodEnum.dmSpecialDepreciation = "dmSpecialDepreciation";
        DepreciationMethodEnum.dmManualDepreciation = "dmManualDepreciation";
        DepreciationMethodEnum.dmAccelerated = "dmAccelerated";
        return DepreciationMethodEnum;
    }());
    SAPB1.DepreciationMethodEnum = DepreciationMethodEnum;
    var DirectDebitTypeEnum = (function () {
        function DirectDebitTypeEnum() {
        }
        DirectDebitTypeEnum.ddtCORE = "ddtCORE";
        DirectDebitTypeEnum.ddtB2B = "ddtB2B";
        DirectDebitTypeEnum.ddtCOR1 = "ddtCOR1";
        return DirectDebitTypeEnum;
    }());
    SAPB1.DirectDebitTypeEnum = DirectDebitTypeEnum;
    var DiscountGroupBaseObjectEnum = (function () {
        function DiscountGroupBaseObjectEnum() {
        }
        DiscountGroupBaseObjectEnum.dgboNone = "dgboNone";
        DiscountGroupBaseObjectEnum.dgboItemGroups = "dgboItemGroups";
        DiscountGroupBaseObjectEnum.dgboItemProperties = "dgboItemProperties";
        DiscountGroupBaseObjectEnum.dgboManufacturer = "dgboManufacturer";
        DiscountGroupBaseObjectEnum.dgboItems = "dgboItems";
        return DiscountGroupBaseObjectEnum;
    }());
    SAPB1.DiscountGroupBaseObjectEnum = DiscountGroupBaseObjectEnum;
    var DiscountGroupDiscountTypeEnum = (function () {
        function DiscountGroupDiscountTypeEnum() {
        }
        DiscountGroupDiscountTypeEnum.dgdt_Fixed = "dgdt_Fixed";
        DiscountGroupDiscountTypeEnum.dgdt_Variable = "dgdt_Variable";
        return DiscountGroupDiscountTypeEnum;
    }());
    SAPB1.DiscountGroupDiscountTypeEnum = DiscountGroupDiscountTypeEnum;
    var DiscountGroupRelationsEnum = (function () {
        function DiscountGroupRelationsEnum() {
        }
        DiscountGroupRelationsEnum.dgrLowestDiscount = "dgrLowestDiscount";
        DiscountGroupRelationsEnum.dgrHighestDiscount = "dgrHighestDiscount";
        DiscountGroupRelationsEnum.dgrAverageDiscount = "dgrAverageDiscount";
        DiscountGroupRelationsEnum.dgrDiscountTotals = "dgrDiscountTotals";
        DiscountGroupRelationsEnum.dgrMultipliedDiscount = "dgrMultipliedDiscount";
        return DiscountGroupRelationsEnum;
    }());
    SAPB1.DiscountGroupRelationsEnum = DiscountGroupRelationsEnum;
    var DiscountGroupTypeEnum = (function () {
        function DiscountGroupTypeEnum() {
        }
        DiscountGroupTypeEnum.dgt_AllBPs = "dgt_AllBPs";
        DiscountGroupTypeEnum.dgt_CustomerGroup = "dgt_CustomerGroup";
        DiscountGroupTypeEnum.dgt_VendorGroup = "dgt_VendorGroup";
        DiscountGroupTypeEnum.dgt_SpecificBP = "dgt_SpecificBP";
        return DiscountGroupTypeEnum;
    }());
    SAPB1.DiscountGroupTypeEnum = DiscountGroupTypeEnum;
    var DocumentAuthorizationStatusEnum = (function () {
        function DocumentAuthorizationStatusEnum() {
        }
        DocumentAuthorizationStatusEnum.dasWithout = "dasWithout";
        DocumentAuthorizationStatusEnum.dasPending = "dasPending";
        DocumentAuthorizationStatusEnum.dasApproved = "dasApproved";
        DocumentAuthorizationStatusEnum.dasRejected = "dasRejected";
        DocumentAuthorizationStatusEnum.dasGenerated = "dasGenerated";
        DocumentAuthorizationStatusEnum.dasGeneratedbyAuthorizer = "dasGeneratedbyAuthorizer";
        DocumentAuthorizationStatusEnum.dasCancelled = "dasCancelled";
        return DocumentAuthorizationStatusEnum;
    }());
    SAPB1.DocumentAuthorizationStatusEnum = DocumentAuthorizationStatusEnum;
    var DocumentDeliveryTypeEnum = (function () {
        function DocumentDeliveryTypeEnum() {
        }
        DocumentDeliveryTypeEnum.ddtNoneSeleted = "ddtNoneSeleted";
        DocumentDeliveryTypeEnum.ddtCreateOnlineDocument = "ddtCreateOnlineDocument";
        DocumentDeliveryTypeEnum.ddtPostToAribaNetwork = "ddtPostToAribaNetwork";
        return DocumentDeliveryTypeEnum;
    }());
    SAPB1.DocumentDeliveryTypeEnum = DocumentDeliveryTypeEnum;
    var DomesticBankAccountValidationEnum = (function () {
        function DomesticBankAccountValidationEnum() {
        }
        DomesticBankAccountValidationEnum.dbavNone = "dbavNone";
        DomesticBankAccountValidationEnum.dbavBelgium = "dbavBelgium";
        DomesticBankAccountValidationEnum.dbavSpain = "dbavSpain";
        DomesticBankAccountValidationEnum.dbavFrance = "dbavFrance";
        DomesticBankAccountValidationEnum.dbavItaly = "dbavItaly";
        DomesticBankAccountValidationEnum.dbavNetherlands = "dbavNetherlands";
        DomesticBankAccountValidationEnum.dbavPortugal = "dbavPortugal";
        return DomesticBankAccountValidationEnum;
    }());
    SAPB1.DomesticBankAccountValidationEnum = DomesticBankAccountValidationEnum;
    var DownPaymentTypeEnum = (function () {
        function DownPaymentTypeEnum() {
        }
        DownPaymentTypeEnum.dptRequest = "dptRequest";
        DownPaymentTypeEnum.dptInvoice = "dptInvoice";
        return DownPaymentTypeEnum;
    }());
    SAPB1.DownPaymentTypeEnum = DownPaymentTypeEnum;
    var DrawingMethodEnum = (function () {
        function DrawingMethodEnum() {
        }
        DrawingMethodEnum.dmAll = "dmAll";
        DrawingMethodEnum.dmNone = "dmNone";
        DrawingMethodEnum.dmQuantity = "dmQuantity";
        DrawingMethodEnum.dmTotal = "dmTotal";
        return DrawingMethodEnum;
    }());
    SAPB1.DrawingMethodEnum = DrawingMethodEnum;
    var DueDateTypesEnum = (function () {
        function DueDateTypesEnum() {
        }
        DueDateTypesEnum.ddtAfterTimePeriod = "ddtAfterTimePeriod";
        DueDateTypesEnum.ddtByDates = "ddtByDates";
        return DueDateTypesEnum;
    }());
    SAPB1.DueDateTypesEnum = DueDateTypesEnum;
    var DunningLetterTypeEnum = (function () {
        function DunningLetterTypeEnum() {
        }
        DunningLetterTypeEnum.dltDunningLetter1 = "dltDunningLetter1";
        DunningLetterTypeEnum.dltDunningLetter2 = "dltDunningLetter2";
        DunningLetterTypeEnum.dltDunningLetter3 = "dltDunningLetter3";
        DunningLetterTypeEnum.dltDunningLetter4 = "dltDunningLetter4";
        DunningLetterTypeEnum.dltDunningLetter5 = "dltDunningLetter5";
        DunningLetterTypeEnum.dltDunningLetter6 = "dltDunningLetter6";
        DunningLetterTypeEnum.dltDunningLetter7 = "dltDunningLetter7";
        DunningLetterTypeEnum.dltDunningLetter8 = "dltDunningLetter8";
        DunningLetterTypeEnum.dltDunningLetter9 = "dltDunningLetter9";
        DunningLetterTypeEnum.dltDunningLetter10 = "dltDunningLetter10";
        DunningLetterTypeEnum.dltDunningALL = "dltDunningALL";
        return DunningLetterTypeEnum;
    }());
    SAPB1.DunningLetterTypeEnum = DunningLetterTypeEnum;
    var ECDPostingTypeEnum = (function () {
        function ECDPostingTypeEnum() {
        }
        ECDPostingTypeEnum.ecdNormal = "ecdNormal";
        ECDPostingTypeEnum.ecdStatement = "ecdStatement";
        return ECDPostingTypeEnum;
    }());
    SAPB1.ECDPostingTypeEnum = ECDPostingTypeEnum;
    var EDocGenerationTypeEnum = (function () {
        function EDocGenerationTypeEnum() {
        }
        EDocGenerationTypeEnum.edocGenerate = "edocGenerate";
        EDocGenerationTypeEnum.edocGenerateLater = "edocGenerateLater";
        EDocGenerationTypeEnum.edocNotRelevant = "edocNotRelevant";
        return EDocGenerationTypeEnum;
    }());
    SAPB1.EDocGenerationTypeEnum = EDocGenerationTypeEnum;
    var EDocStatusEnum = (function () {
        function EDocStatusEnum() {
        }
        EDocStatusEnum.edoc_New = "edoc_New";
        EDocStatusEnum.edoc_Pending = "edoc_Pending";
        EDocStatusEnum.edoc_Sent = "edoc_Sent";
        EDocStatusEnum.edoc_Error = "edoc_Error";
        EDocStatusEnum.edoc_Ok = "edoc_Ok";
        return EDocStatusEnum;
    }());
    SAPB1.EDocStatusEnum = EDocStatusEnum;
    var EcmActionLogTypeEnum = (function () {
        function EcmActionLogTypeEnum() {
        }
        EcmActionLogTypeEnum.altSend = "altSend";
        EcmActionLogTypeEnum.altReceive = "altReceive";
        EcmActionLogTypeEnum.altImport = "altImport";
        EcmActionLogTypeEnum.altNote = "altNote";
        EcmActionLogTypeEnum.altWarning = "altWarning";
        EcmActionLogTypeEnum.altError = "altError";
        return EcmActionLogTypeEnum;
    }());
    SAPB1.EcmActionLogTypeEnum = EcmActionLogTypeEnum;
    var EcmActionPeriodTypeEnum = (function () {
        function EcmActionPeriodTypeEnum() {
        }
        EcmActionPeriodTypeEnum.aptYear = "aptYear";
        EcmActionPeriodTypeEnum.aptQuarter = "aptQuarter";
        EcmActionPeriodTypeEnum.aptMonth = "aptMonth";
        EcmActionPeriodTypeEnum.aptDateRange = "aptDateRange";
        return EcmActionPeriodTypeEnum;
    }());
    SAPB1.EcmActionPeriodTypeEnum = EcmActionPeriodTypeEnum;
    var EcmActionStatusEnum = (function () {
        function EcmActionStatusEnum() {
        }
        EcmActionStatusEnum.lasNone = "lasNone";
        EcmActionStatusEnum.lasNew = "lasNew";
        EcmActionStatusEnum.lasPending = "lasPending";
        EcmActionStatusEnum.lasError = "lasError";
        EcmActionStatusEnum.lasOK = "lasOK";
        EcmActionStatusEnum.lasSent = "lasSent";
        EcmActionStatusEnum.lasDocError = "lasDocError";
        EcmActionStatusEnum.lasWaiting = "lasWaiting";
        EcmActionStatusEnum.lasAuthorized = "lasAuthorized";
        EcmActionStatusEnum.lasInProcess = "lasInProcess";
        EcmActionStatusEnum.lasRejected = "lasRejected";
        EcmActionStatusEnum.lasDenied = "lasDenied";
        EcmActionStatusEnum.lasCanceled = "lasCanceled";
        EcmActionStatusEnum.lasAborted = "lasAborted";
        EcmActionStatusEnum.lasQueued = "lasQueued";
        return EcmActionStatusEnum;
    }());
    SAPB1.EcmActionStatusEnum = EcmActionStatusEnum;
    var EcmActionTypeEnum = (function () {
        function EcmActionTypeEnum() {
        }
        EcmActionTypeEnum.latNone = "latNone";
        EcmActionTypeEnum.latSetup = "latSetup";
        EcmActionTypeEnum.latReport = "latReport";
        EcmActionTypeEnum.latDocumentAR = "latDocumentAR";
        EcmActionTypeEnum.latDocumentAP = "latDocumentAP";
        EcmActionTypeEnum.latDraft = "latDraft";
        EcmActionTypeEnum.latOther = "latOther";
        EcmActionTypeEnum.latSkip = "latSkip";
        EcmActionTypeEnum.latContingency = "latContingency";
        EcmActionTypeEnum.latBpCheck = "latBpCheck";
        return EcmActionTypeEnum;
    }());
    SAPB1.EcmActionTypeEnum = EcmActionTypeEnum;
    var ElecCommStatusEnum = (function () {
        function ElecCommStatusEnum() {
        }
        ElecCommStatusEnum.ecsApproved = "ecsApproved";
        ElecCommStatusEnum.ecsPendingApproval = "ecsPendingApproval";
        ElecCommStatusEnum.ecsRejected = "ecsRejected";
        return ElecCommStatusEnum;
    }());
    SAPB1.ElecCommStatusEnum = ElecCommStatusEnum;
    var EmployeeExemptionUnitEnum = (function () {
        function EmployeeExemptionUnitEnum() {
        }
        EmployeeExemptionUnitEnum.eeu_None = "eeu_None";
        EmployeeExemptionUnitEnum.eeu_Yearly = "eeu_Yearly";
        EmployeeExemptionUnitEnum.eeu_Monthly = "eeu_Monthly";
        EmployeeExemptionUnitEnum.eeu_Weekly = "eeu_Weekly";
        EmployeeExemptionUnitEnum.eeu_Daily = "eeu_Daily";
        return EmployeeExemptionUnitEnum;
    }());
    SAPB1.EmployeeExemptionUnitEnum = EmployeeExemptionUnitEnum;
    var EmployeePaymentMethodEnum = (function () {
        function EmployeePaymentMethodEnum() {
        }
        EmployeePaymentMethodEnum.epm_None = "epm_None";
        EmployeePaymentMethodEnum.epm_BankTransfer = "epm_BankTransfer";
        return EmployeePaymentMethodEnum;
    }());
    SAPB1.EmployeePaymentMethodEnum = EmployeePaymentMethodEnum;
    var EmployeeTransferProcessingStatusEnum = (function () {
        function EmployeeTransferProcessingStatusEnum() {
        }
        EmployeeTransferProcessingStatusEnum.etps_New = "etps_New";
        EmployeeTransferProcessingStatusEnum.etps_Sent = "etps_Sent";
        EmployeeTransferProcessingStatusEnum.etps_Accepted = "etps_Accepted";
        EmployeeTransferProcessingStatusEnum.etps_Error = "etps_Error";
        return EmployeeTransferProcessingStatusEnum;
    }());
    SAPB1.EmployeeTransferProcessingStatusEnum = EmployeeTransferProcessingStatusEnum;
    var EmployeeTransferStatusEnum = (function () {
        function EmployeeTransferStatusEnum() {
        }
        EmployeeTransferStatusEnum.ets_New = "ets_New";
        EmployeeTransferStatusEnum.ets_Processing = "ets_Processing";
        EmployeeTransferStatusEnum.ets_Sent = "ets_Sent";
        EmployeeTransferStatusEnum.ets_Received = "ets_Received";
        EmployeeTransferStatusEnum.ets_Accepted = "ets_Accepted";
        EmployeeTransferStatusEnum.ets_Error = "ets_Error";
        return EmployeeTransferStatusEnum;
    }());
    SAPB1.EmployeeTransferStatusEnum = EmployeeTransferStatusEnum;
    var EndTypeEnum = (function () {
        function EndTypeEnum() {
        }
        EndTypeEnum.etNoEndDate = "etNoEndDate";
        EndTypeEnum.etByCounter = "etByCounter";
        EndTypeEnum.etByDate = "etByDate";
        return EndTypeEnum;
    }());
    SAPB1.EndTypeEnum = EndTypeEnum;
    var ExchangeRateSelectEnum = (function () {
        function ExchangeRateSelectEnum() {
        }
        ExchangeRateSelectEnum.ierFromInovice = "ierFromInovice";
        ExchangeRateSelectEnum.ierCurrentRate = "ierCurrentRate";
        return ExchangeRateSelectEnum;
    }());
    SAPB1.ExchangeRateSelectEnum = ExchangeRateSelectEnum;
    var ExternalCallStatusEnum = (function () {
        function ExternalCallStatusEnum() {
        }
        ExternalCallStatusEnum.ecsNew = "ecsNew";
        ExternalCallStatusEnum.ecsInProcess = "ecsInProcess";
        ExternalCallStatusEnum.ecsCompleted = "ecsCompleted";
        ExternalCallStatusEnum.ecsConfirmed = "ecsConfirmed";
        ExternalCallStatusEnum.ecsFailed = "ecsFailed";
        return ExternalCallStatusEnum;
    }());
    SAPB1.ExternalCallStatusEnum = ExternalCallStatusEnum;
    var FolioLetterEnum = (function () {
        function FolioLetterEnum() {
        }
        FolioLetterEnum.fLetterA = "fLetterA";
        FolioLetterEnum.fLetterB = "fLetterB";
        FolioLetterEnum.fLetterC = "fLetterC";
        FolioLetterEnum.fLetterE = "fLetterE";
        FolioLetterEnum.fLetterM = "fLetterM";
        FolioLetterEnum.fLetterR = "fLetterR";
        return FolioLetterEnum;
    }());
    SAPB1.FolioLetterEnum = FolioLetterEnum;
    var FreightTypeEnum = (function () {
        function FreightTypeEnum() {
        }
        FreightTypeEnum.ftShipping = "ftShipping";
        FreightTypeEnum.ftInsurance = "ftInsurance";
        FreightTypeEnum.ftOther = "ftOther";
        FreightTypeEnum.ftSpecial = "ftSpecial";
        return FreightTypeEnum;
    }());
    SAPB1.FreightTypeEnum = FreightTypeEnum;
    var GTSResponseToExceedingEnum = (function () {
        function GTSResponseToExceedingEnum() {
        }
        GTSResponseToExceedingEnum.Block = "Block";
        GTSResponseToExceedingEnum.Split = "Split";
        return GTSResponseToExceedingEnum;
    }());
    SAPB1.GTSResponseToExceedingEnum = GTSResponseToExceedingEnum;
    var GeneratedAssetStatusEnum = (function () {
        function GeneratedAssetStatusEnum() {
        }
        GeneratedAssetStatusEnum.gasOpen = "gasOpen";
        GeneratedAssetStatusEnum.gasClosed = "gasClosed";
        return GeneratedAssetStatusEnum;
    }());
    SAPB1.GeneratedAssetStatusEnum = GeneratedAssetStatusEnum;
    var GetGLAccountByEnum = (function () {
        function GetGLAccountByEnum() {
        }
        GetGLAccountByEnum.gglab_General = "gglab_General";
        GetGLAccountByEnum.gglab_Warehouse = "gglab_Warehouse";
        GetGLAccountByEnum.gglab_ItemGroup = "gglab_ItemGroup";
        return GetGLAccountByEnum;
    }());
    SAPB1.GetGLAccountByEnum = GetGLAccountByEnum;
    var GovPayCodePeriodicityEnum = (function () {
        function GovPayCodePeriodicityEnum() {
        }
        GovPayCodePeriodicityEnum.gpcpMonth = "gpcpMonth";
        GovPayCodePeriodicityEnum.gpcpQuarter = "gpcpQuarter";
        GovPayCodePeriodicityEnum.gpcpHalfMonth = "gpcpHalfMonth";
        GovPayCodePeriodicityEnum.gpcpTenDays = "gpcpTenDays";
        return GovPayCodePeriodicityEnum;
    }());
    SAPB1.GovPayCodePeriodicityEnum = GovPayCodePeriodicityEnum;
    var GovPayCodeSPEDCategoryEnum = (function () {
        function GovPayCodeSPEDCategoryEnum() {
        }
        GovPayCodeSPEDCategoryEnum.gpcscICMS = "gpcscICMS";
        GovPayCodeSPEDCategoryEnum.gpcscICMSST = "gpcscICMSST";
        GovPayCodeSPEDCategoryEnum.gpcscIPI = "gpcscIPI";
        GovPayCodeSPEDCategoryEnum.gpcscISS = "gpcscISS";
        GovPayCodeSPEDCategoryEnum.gpcscPIS = "gpcscPIS";
        GovPayCodeSPEDCategoryEnum.gpcscCOFINS = "gpcscCOFINS";
        GovPayCodeSPEDCategoryEnum.gpcsPISST = "gpcsPISST";
        GovPayCodeSPEDCategoryEnum.gpcsCONFINSST = "gpcsCONFINSST";
        return GovPayCodeSPEDCategoryEnum;
    }());
    SAPB1.GovPayCodeSPEDCategoryEnum = GovPayCodeSPEDCategoryEnum;
    var GroupingMethodEnum = (function () {
        function GroupingMethodEnum() {
        }
        GroupingMethodEnum.gmPerInvoice = "gmPerInvoice";
        GroupingMethodEnum.gmPerDunningLevel = "gmPerDunningLevel";
        GroupingMethodEnum.gmPerBP = "gmPerBP";
        return GroupingMethodEnum;
    }());
    SAPB1.GroupingMethodEnum = GroupingMethodEnum;
    var InstallmentPaymentsPossiblityEnum = (function () {
        function InstallmentPaymentsPossiblityEnum() {
        }
        InstallmentPaymentsPossiblityEnum.ippCr = "ippCr";
        InstallmentPaymentsPossiblityEnum.ippNo = "ippNo";
        InstallmentPaymentsPossiblityEnum.ippRd = "ippRd";
        InstallmentPaymentsPossiblityEnum.ippYes = "ippYes";
        return InstallmentPaymentsPossiblityEnum;
    }());
    SAPB1.InstallmentPaymentsPossiblityEnum = InstallmentPaymentsPossiblityEnum;
    var IntrastatConfigurationEnum = (function () {
        function IntrastatConfigurationEnum() {
        }
        IntrastatConfigurationEnum.enAdditionalMeasureUnit = "enAdditionalMeasureUnit";
        IntrastatConfigurationEnum.enCommodityCodes = "enCommodityCodes";
        IntrastatConfigurationEnum.enCustomProcedures = "enCustomProcedures";
        IntrastatConfigurationEnum.enIncoterms = "enIncoterms";
        IntrastatConfigurationEnum.enNatureOfTransactions = "enNatureOfTransactions";
        IntrastatConfigurationEnum.enPortsOfEntryAndExit = "enPortsOfEntryAndExit";
        IntrastatConfigurationEnum.enServiceCodes = "enServiceCodes";
        IntrastatConfigurationEnum.enStatisticalProcedures = "enStatisticalProcedures";
        IntrastatConfigurationEnum.enTransportModes = "enTransportModes";
        IntrastatConfigurationEnum.enRegions = "enRegions";
        return IntrastatConfigurationEnum;
    }());
    SAPB1.IntrastatConfigurationEnum = IntrastatConfigurationEnum;
    var InvBaseDocTypeEnum = (function () {
        function InvBaseDocTypeEnum() {
        }
        InvBaseDocTypeEnum.Default = "Default";
        InvBaseDocTypeEnum.Empty = "Empty";
        InvBaseDocTypeEnum.PurchaseDeliveryNotes = "PurchaseDeliveryNotes";
        InvBaseDocTypeEnum.InventoryGeneralEntry = "InventoryGeneralEntry";
        InvBaseDocTypeEnum.WarehouseTransfers = "WarehouseTransfers";
        InvBaseDocTypeEnum.InventoryTransferRequest = "InventoryTransferRequest";
        return InvBaseDocTypeEnum;
    }());
    SAPB1.InvBaseDocTypeEnum = InvBaseDocTypeEnum;
    var InventoryAccountTypeEnum = (function () {
        function InventoryAccountTypeEnum() {
        }
        InventoryAccountTypeEnum.iatExpenses = "iatExpenses";
        InventoryAccountTypeEnum.iatRevenues = "iatRevenues";
        InventoryAccountTypeEnum.iatExemptIncome = "iatExemptIncome";
        InventoryAccountTypeEnum.iatInventory = "iatInventory";
        InventoryAccountTypeEnum.iatCost = "iatCost";
        InventoryAccountTypeEnum.iatTransfer = "iatTransfer";
        InventoryAccountTypeEnum.iatVarience = "iatVarience";
        InventoryAccountTypeEnum.iatPriceDifference = "iatPriceDifference";
        InventoryAccountTypeEnum.iatNegativeInventoryAdjustment = "iatNegativeInventoryAdjustment";
        InventoryAccountTypeEnum.iatDecreasing = "iatDecreasing";
        InventoryAccountTypeEnum.iatIncreasing = "iatIncreasing";
        InventoryAccountTypeEnum.iatReturning = "iatReturning";
        InventoryAccountTypeEnum.iatEURevenues = "iatEURevenues";
        InventoryAccountTypeEnum.iatEUExpenses = "iatEUExpenses";
        InventoryAccountTypeEnum.iatForeignRevenue = "iatForeignRevenue";
        InventoryAccountTypeEnum.iatForeignExpens = "iatForeignExpens";
        InventoryAccountTypeEnum.iatPurchase = "iatPurchase";
        InventoryAccountTypeEnum.iatPAReturn = "iatPAReturn";
        InventoryAccountTypeEnum.iatPurchaseOffset = "iatPurchaseOffset";
        InventoryAccountTypeEnum.iatExchangeRateDifferences = "iatExchangeRateDifferences";
        InventoryAccountTypeEnum.iatGoodsClearing = "iatGoodsClearing";
        InventoryAccountTypeEnum.iatGLDecrease = "iatGLDecrease";
        InventoryAccountTypeEnum.iatGLIncrease = "iatGLIncrease";
        InventoryAccountTypeEnum.iatWip = "iatWip";
        InventoryAccountTypeEnum.iatWipVariance = "iatWipVariance";
        InventoryAccountTypeEnum.iatWipOffsetProfitAndLoss = "iatWipOffsetProfitAndLoss";
        InventoryAccountTypeEnum.iatInventoryOffsetProfitAndLoss = "iatInventoryOffsetProfitAndLoss";
        InventoryAccountTypeEnum.iatStockInflationAdjust = "iatStockInflationAdjust";
        InventoryAccountTypeEnum.iatStockInflationOffset = "iatStockInflationOffset";
        InventoryAccountTypeEnum.iatCostInflation = "iatCostInflation";
        InventoryAccountTypeEnum.iatCostInflationOffset = "iatCostInflationOffset";
        InventoryAccountTypeEnum.iatExpenseClearing = "iatExpenseClearing";
        InventoryAccountTypeEnum.iatExpenseOffsetting = "iatExpenseOffsetting";
        InventoryAccountTypeEnum.iatStockInTransit = "iatStockInTransit";
        InventoryAccountTypeEnum.iatShippedGoods = "iatShippedGoods";
        InventoryAccountTypeEnum.iatVATInRevenue = "iatVATInRevenue";
        InventoryAccountTypeEnum.iatSalesCredit = "iatSalesCredit";
        InventoryAccountTypeEnum.iatPurchaseCredit = "iatPurchaseCredit";
        InventoryAccountTypeEnum.iatExemptedCredits = "iatExemptedCredits";
        InventoryAccountTypeEnum.iatSalesCreditForeign = "iatSalesCreditForeign";
        InventoryAccountTypeEnum.iatForeignPurchaseCredit = "iatForeignPurchaseCredit";
        InventoryAccountTypeEnum.iatSalesCreditEU = "iatSalesCreditEU";
        InventoryAccountTypeEnum.iatEUPurchaseCredit = "iatEUPurchaseCredit";
        InventoryAccountTypeEnum.iatPurchaseBalance = "iatPurchaseBalance";
        InventoryAccountTypeEnum.iatWHIncomingCenvat = "iatWHIncomingCenvat";
        InventoryAccountTypeEnum.iatWHOutgoingCenvat = "iatWHOutgoingCenvat";
        InventoryAccountTypeEnum.iatFreeOfChargeSales = "iatFreeOfChargeSales";
        InventoryAccountTypeEnum.iatFreeOfChargePurchase = "iatFreeOfChargePurchase";
        return InventoryAccountTypeEnum;
    }());
    SAPB1.InventoryAccountTypeEnum = InventoryAccountTypeEnum;
    var InventoryCycleTypeEnum = (function () {
        function InventoryCycleTypeEnum() {
        }
        InventoryCycleTypeEnum.ictCylce = "ictCylce";
        InventoryCycleTypeEnum.ictMRP = "ictMRP";
        return InventoryCycleTypeEnum;
    }());
    SAPB1.InventoryCycleTypeEnum = InventoryCycleTypeEnum;
    var InventoryOpeningBalancePriceSourceEnum = (function () {
        function InventoryOpeningBalancePriceSourceEnum() {
        }
        InventoryOpeningBalancePriceSourceEnum.iobpsByPriceList = "iobpsByPriceList";
        InventoryOpeningBalancePriceSourceEnum.iobpsLastEvaluatedPrice = "iobpsLastEvaluatedPrice";
        InventoryOpeningBalancePriceSourceEnum.iobpsItemCost = "iobpsItemCost";
        return InventoryOpeningBalancePriceSourceEnum;
    }());
    SAPB1.InventoryOpeningBalancePriceSourceEnum = InventoryOpeningBalancePriceSourceEnum;
    var InventoryPostingCopyOptionEnum = (function () {
        function InventoryPostingCopyOptionEnum() {
        }
        InventoryPostingCopyOptionEnum.ipcoNoCountersDiff = "ipcoNoCountersDiff";
        InventoryPostingCopyOptionEnum.ipcoIndividual1CountedQuantity = "ipcoIndividual1CountedQuantity";
        InventoryPostingCopyOptionEnum.ipcoIndividual2CountedQuantity = "ipcoIndividual2CountedQuantity";
        InventoryPostingCopyOptionEnum.ipcoIndividual3CountedQuantity = "ipcoIndividual3CountedQuantity";
        InventoryPostingCopyOptionEnum.ipcoIndividual4CountedQuantity = "ipcoIndividual4CountedQuantity";
        InventoryPostingCopyOptionEnum.ipcoIndividual5CountedQuantity = "ipcoIndividual5CountedQuantity";
        InventoryPostingCopyOptionEnum.ipcoTeamCountedQuantity = "ipcoTeamCountedQuantity";
        return InventoryPostingCopyOptionEnum;
    }());
    SAPB1.InventoryPostingCopyOptionEnum = InventoryPostingCopyOptionEnum;
    var InventoryPostingPriceSourceEnum = (function () {
        function InventoryPostingPriceSourceEnum() {
        }
        InventoryPostingPriceSourceEnum.ippsByPriceList = "ippsByPriceList";
        InventoryPostingPriceSourceEnum.ippsLastEvaluatedPrice = "ippsLastEvaluatedPrice";
        InventoryPostingPriceSourceEnum.ippsItemCost = "ippsItemCost";
        return InventoryPostingPriceSourceEnum;
    }());
    SAPB1.InventoryPostingPriceSourceEnum = InventoryPostingPriceSourceEnum;
    var IssuePrimarilyByEnum = (function () {
        function IssuePrimarilyByEnum() {
        }
        IssuePrimarilyByEnum.ipbSerialAndBatchNumbers = "ipbSerialAndBatchNumbers";
        IssuePrimarilyByEnum.ipbBinLocations = "ipbBinLocations";
        return IssuePrimarilyByEnum;
    }());
    SAPB1.IssuePrimarilyByEnum = IssuePrimarilyByEnum;
    var ItemClassEnum = (function () {
        function ItemClassEnum() {
        }
        ItemClassEnum.itcService = "itcService";
        ItemClassEnum.itcMaterial = "itcMaterial";
        return ItemClassEnum;
    }());
    SAPB1.ItemClassEnum = ItemClassEnum;
    var ItemTypeEnum = (function () {
        function ItemTypeEnum() {
        }
        ItemTypeEnum.itItems = "itItems";
        ItemTypeEnum.itLabor = "itLabor";
        ItemTypeEnum.itTravel = "itTravel";
        ItemTypeEnum.itFixedAssets = "itFixedAssets";
        return ItemTypeEnum;
    }());
    SAPB1.ItemTypeEnum = ItemTypeEnum;
    var ItemUoMTypeEnum = (function () {
        function ItemUoMTypeEnum() {
        }
        ItemUoMTypeEnum.iutPurchasing = "iutPurchasing";
        ItemUoMTypeEnum.iutSales = "iutSales";
        ItemUoMTypeEnum.iutInventory = "iutInventory";
        return ItemUoMTypeEnum;
    }());
    SAPB1.ItemUoMTypeEnum = ItemUoMTypeEnum;
    var KPITypeEnum = (function () {
        function KPITypeEnum() {
        }
        KPITypeEnum.asSingle = "asSingle";
        KPITypeEnum.asQuarterly = "asQuarterly";
        KPITypeEnum.asMonthly = "asMonthly";
        KPITypeEnum.asMultiple = "asMultiple";
        return KPITypeEnum;
    }());
    SAPB1.KPITypeEnum = KPITypeEnum;
    var LCCostTypeEnum = (function () {
        function LCCostTypeEnum() {
        }
        LCCostTypeEnum.asFixedCosts = "asFixedCosts";
        LCCostTypeEnum.asVariableCosts = "asVariableCosts";
        return LCCostTypeEnum;
    }());
    SAPB1.LCCostTypeEnum = LCCostTypeEnum;
    var LandedCostAllocationByEnum = (function () {
        function LandedCostAllocationByEnum() {
        }
        LandedCostAllocationByEnum.asCashValueBeforeCustoms = "asCashValueBeforeCustoms";
        LandedCostAllocationByEnum.asCashValueAfterCustoms = "asCashValueAfterCustoms";
        LandedCostAllocationByEnum.asQuantity = "asQuantity";
        LandedCostAllocationByEnum.asWeight = "asWeight";
        LandedCostAllocationByEnum.asVolume = "asVolume";
        LandedCostAllocationByEnum.asEqual = "asEqual";
        return LandedCostAllocationByEnum;
    }());
    SAPB1.LandedCostAllocationByEnum = LandedCostAllocationByEnum;
    var LandedCostBaseDocumentTypeEnum = (function () {
        function LandedCostBaseDocumentTypeEnum() {
        }
        LandedCostBaseDocumentTypeEnum.asDefault = "asDefault";
        LandedCostBaseDocumentTypeEnum.asEmpty = "asEmpty";
        LandedCostBaseDocumentTypeEnum.asGoodsReceiptPO = "asGoodsReceiptPO";
        LandedCostBaseDocumentTypeEnum.asLandedCosts = "asLandedCosts";
        LandedCostBaseDocumentTypeEnum.asPurchaseInvoice = "asPurchaseInvoice";
        return LandedCostBaseDocumentTypeEnum;
    }());
    SAPB1.LandedCostBaseDocumentTypeEnum = LandedCostBaseDocumentTypeEnum;
    var LandedCostDocStatusEnum = (function () {
        function LandedCostDocStatusEnum() {
        }
        LandedCostDocStatusEnum.lcOpen = "lcOpen";
        LandedCostDocStatusEnum.lcClosed = "lcClosed";
        return LandedCostDocStatusEnum;
    }());
    SAPB1.LandedCostDocStatusEnum = LandedCostDocStatusEnum;
    var LegalDataLineTypeEnum = (function () {
        function LegalDataLineTypeEnum() {
        }
        LegalDataLineTypeEnum.ldlt_DocumentTotal = "ldlt_DocumentTotal";
        LegalDataLineTypeEnum.ldlt_TaxPerLine = "ldlt_TaxPerLine";
        LegalDataLineTypeEnum.ldlt_TotalTax = "ldlt_TotalTax";
        return LegalDataLineTypeEnum;
    }());
    SAPB1.LegalDataLineTypeEnum = LegalDataLineTypeEnum;
    var LicenseTypeEnum = (function () {
        function LicenseTypeEnum() {
        }
        LicenseTypeEnum.lkIdirect = "lkIdirect";
        LicenseTypeEnum.lkSOAIndirect = "lkSOAIndirect";
        LicenseTypeEnum.lkSOA = "lkSOA";
        LicenseTypeEnum.lkB1iIndirect = "lkB1iIndirect";
        LicenseTypeEnum.lkB1i = "lkB1i";
        return LicenseTypeEnum;
    }());
    SAPB1.LicenseTypeEnum = LicenseTypeEnum;
    var LicenseUpdateTypeEnum = (function () {
        function LicenseUpdateTypeEnum() {
        }
        LicenseUpdateTypeEnum.ultAssign = "ultAssign";
        LicenseUpdateTypeEnum.ultRemove = "ultRemove";
        return LicenseUpdateTypeEnum;
    }());
    SAPB1.LicenseUpdateTypeEnum = LicenseUpdateTypeEnum;
    var LineStatusTypeEnum = (function () {
        function LineStatusTypeEnum() {
        }
        LineStatusTypeEnum.lst_Open = "lst_Open";
        LineStatusTypeEnum.lst_Closed = "lst_Closed";
        return LineStatusTypeEnum;
    }());
    SAPB1.LineStatusTypeEnum = LineStatusTypeEnum;
    var LineTypeEnum = (function () {
        function LineTypeEnum() {
        }
        LineTypeEnum.ltDocument = "ltDocument ";
        LineTypeEnum.ltRounding = "ltRounding";
        LineTypeEnum.ltVat = "ltVat";
        return LineTypeEnum;
    }());
    SAPB1.LineTypeEnum = LineTypeEnum;
    var LinkedDocTypeEnum = (function () {
        function LinkedDocTypeEnum() {
        }
        LinkedDocTypeEnum.ldtEmptyLink = "ldtEmptyLink";
        LinkedDocTypeEnum.ldtSalesOpportunitiesLink = "ldtSalesOpportunitiesLink";
        LinkedDocTypeEnum.ldtSalesQuotationsLink = "ldtSalesQuotationsLink";
        LinkedDocTypeEnum.ldtSalesOrdersLink = "ldtSalesOrdersLink";
        LinkedDocTypeEnum.ldtDeliveriesLink = "ldtDeliveriesLink";
        LinkedDocTypeEnum.ldtARInvoicesLink = "ldtARInvoicesLink";
        return LinkedDocTypeEnum;
    }());
    SAPB1.LinkedDocTypeEnum = LinkedDocTypeEnum;
    var MultipleCounterRoleEnum = (function () {
        function MultipleCounterRoleEnum() {
        }
        MultipleCounterRoleEnum.mcrTeamCounter = "mcrTeamCounter";
        MultipleCounterRoleEnum.mcrIndividualCounter = "mcrIndividualCounter";
        return MultipleCounterRoleEnum;
    }());
    SAPB1.MultipleCounterRoleEnum = MultipleCounterRoleEnum;
    var OperationCode347Enum = (function () {
        function OperationCode347Enum() {
        }
        OperationCode347Enum.ocGoodsOrServiciesAcquisitions = "ocGoodsOrServiciesAcquisitions";
        OperationCode347Enum.ocPublicEntitiesAcquisitions = "ocPublicEntitiesAcquisitions";
        OperationCode347Enum.ocTravelAgenciesPurchases = "ocTravelAgenciesPurchases";
        OperationCode347Enum.ocSalesOrServicesRevenues = "ocSalesOrServicesRevenues";
        OperationCode347Enum.ocPublicSubsidies = "ocPublicSubsidies";
        OperationCode347Enum.ocTravelAgenciesSales = "ocTravelAgenciesSales";
        return OperationCode347Enum;
    }());
    SAPB1.OperationCode347Enum = OperationCode347Enum;
    var OperationCodeTypeEnum = (function () {
        function OperationCodeTypeEnum() {
        }
        OperationCodeTypeEnum.octSummaryInvoicesEntry = "octSummaryInvoicesEntry";
        OperationCodeTypeEnum.octSummaryReceiptsEntry = "octSummaryReceiptsEntry";
        OperationCodeTypeEnum.octInvoicewithSeveralVATRates = "octInvoicewithSeveralVATRates";
        OperationCodeTypeEnum.octCorrectionInvoice = "octCorrectionInvoice";
        OperationCodeTypeEnum.octDueVATPendingInvoiceIssuance = "octDueVATPendingInvoiceIssuance";
        OperationCodeTypeEnum.octExpensesIncurredbyTravelAgentforCustomers = "octExpensesIncurredbyTravelAgentforCustomers";
        OperationCodeTypeEnum.octSpecialRegulationforVATGroup = "octSpecialRegulationforVATGroup";
        OperationCodeTypeEnum.octSpecialRegulationforGoldInvestment = "octSpecialRegulationforGoldInvestment";
        OperationCodeTypeEnum.octReverseChargeProcedure = "octReverseChargeProcedure";
        OperationCodeTypeEnum.octUnsummarizedReceipts = "octUnsummarizedReceipts";
        OperationCodeTypeEnum.octIdentificationofErrorTransactions = "octIdentificationofErrorTransactions";
        OperationCodeTypeEnum.octTransactionswithEntrepreneursIssuingReceiptsforAgriculturalCompensation = "octTransactionswithEntrepreneursIssuingReceiptsforAgriculturalCompensation";
        OperationCodeTypeEnum.octServiceInvoicingbyTravelAgenciesonBehalfofThirdParties = "octServiceInvoicingbyTravelAgenciesonBehalfofThirdParties";
        OperationCodeTypeEnum.octBusinessOfficeRental = "octBusinessOfficeRental";
        OperationCodeTypeEnum.octSubsidies = "octSubsidies";
        OperationCodeTypeEnum.octIncomingPaymentsforIndustrialandIntellectualPropertyRights = "octIncomingPaymentsforIndustrialandIntellectualPropertyRights";
        OperationCodeTypeEnum.octInsuranceTransactions = "octInsuranceTransactions";
        OperationCodeTypeEnum.octPurchasesfromTravelAgencies = "octPurchasesfromTravelAgencies";
        OperationCodeTypeEnum.octTransactionsSubjecttoProductionServiceandImportTaxesinCeutaandMelilla = "octTransactionsSubjecttoProductionServiceandImportTaxesinCeutaandMelilla";
        return OperationCodeTypeEnum;
    }());
    SAPB1.OperationCodeTypeEnum = OperationCodeTypeEnum;
    var OpportunityTypeEnum = (function () {
        function OpportunityTypeEnum() {
        }
        OpportunityTypeEnum.boOpSales = "boOpSales";
        OpportunityTypeEnum.boOpPurchasing = "boOpPurchasing";
        return OpportunityTypeEnum;
    }());
    SAPB1.OpportunityTypeEnum = OpportunityTypeEnum;
    var PMDocumentTypeEnum = (function () {
        function PMDocumentTypeEnum() {
        }
        PMDocumentTypeEnum.pmdt_ManualJournalEntry = "pmdt_ManualJournalEntry";
        PMDocumentTypeEnum.pmdt_SalesQuotation = "pmdt_SalesQuotation";
        PMDocumentTypeEnum.pmdt_SalesOrder = "pmdt_SalesOrder";
        PMDocumentTypeEnum.pmdt_Delivery = "pmdt_Delivery";
        PMDocumentTypeEnum.pmdt_Return = "pmdt_Return";
        PMDocumentTypeEnum.pmdt_ARDownPaymentRequest = "pmdt_ARDownPaymentRequest";
        PMDocumentTypeEnum.pmdt_ARDownPaymentInvoice = "pmdt_ARDownPaymentInvoice";
        PMDocumentTypeEnum.pmdt_ARInvoice = "pmdt_ARInvoice";
        PMDocumentTypeEnum.pmdt_ARCreditMemo = "pmdt_ARCreditMemo";
        PMDocumentTypeEnum.pmdt_ARReserveInvoice = "pmdt_ARReserveInvoice";
        PMDocumentTypeEnum.pmdt_PurchaseQuotation = "pmdt_PurchaseQuotation";
        PMDocumentTypeEnum.pmdt_PurchaseOrder = "pmdt_PurchaseOrder";
        PMDocumentTypeEnum.pmdt_GoodsReceiptPO = "pmdt_GoodsReceiptPO";
        PMDocumentTypeEnum.pmdt_GoodsReturn = "pmdt_GoodsReturn";
        PMDocumentTypeEnum.pmdt_APDownPaymentRequest = "pmdt_APDownPaymentRequest";
        PMDocumentTypeEnum.pmdt_APDownPaymentInvoice = "pmdt_APDownPaymentInvoice";
        PMDocumentTypeEnum.pmdt_APInvoice = "pmdt_APInvoice";
        PMDocumentTypeEnum.pmdt_APCreditMemo = "pmdt_APCreditMemo";
        PMDocumentTypeEnum.pmdt_APReserveInvoice = "pmdt_APReserveInvoice";
        PMDocumentTypeEnum.pmdt_ServiceCall = "pmdt_ServiceCall";
        PMDocumentTypeEnum.pmdt_GoodsReceipt = "pmdt_GoodsReceipt";
        PMDocumentTypeEnum.pmdt_GoodsIssue = "pmdt_GoodsIssue";
        PMDocumentTypeEnum.pmdt_ARCorrectionInvoice = "pmdt_ARCorrectionInvoice";
        PMDocumentTypeEnum.pmdt_ARCorrectionInvoiceReversal = "pmdt_ARCorrectionInvoiceReversal";
        PMDocumentTypeEnum.pmdt_APCorrectionInvoice = "pmdt_APCorrectionInvoice";
        PMDocumentTypeEnum.pmdt_APCorrectionInvoiceReversal = "pmdt_APCorrectionInvoiceReversal";
        return PMDocumentTypeEnum;
    }());
    SAPB1.PMDocumentTypeEnum = PMDocumentTypeEnum;
    var PaymentInvoiceTypeEnum = (function () {
        function PaymentInvoiceTypeEnum() {
        }
        PaymentInvoiceTypeEnum.itARInvoice = "itARInvoice";
        PaymentInvoiceTypeEnum.itARDownPaymentInvoice = "itARDownPaymentInvoice";
        return PaymentInvoiceTypeEnum;
    }());
    SAPB1.PaymentInvoiceTypeEnum = PaymentInvoiceTypeEnum;
    var PaymentMeansTypeEnum = (function () {
        function PaymentMeansTypeEnum() {
        }
        PaymentMeansTypeEnum.pmtNotAssigned = "pmtNotAssigned";
        PaymentMeansTypeEnum.pmtChecks = "pmtChecks";
        PaymentMeansTypeEnum.pmtBankTransfer = "pmtBankTransfer";
        PaymentMeansTypeEnum.pmtCash = "pmtCash";
        PaymentMeansTypeEnum.pmtCreditCard = "pmtCreditCard";
        return PaymentMeansTypeEnum;
    }());
    SAPB1.PaymentMeansTypeEnum = PaymentMeansTypeEnum;
    var PaymentRunExportRowTypeEnum = (function () {
        function PaymentRunExportRowTypeEnum() {
        }
        PaymentRunExportRowTypeEnum.prtGeneral = "prtGeneral";
        PaymentRunExportRowTypeEnum.prtPayOnAccount = "prtPayOnAccount";
        PaymentRunExportRowTypeEnum.prtPayToAccount = "prtPayToAccount";
        return PaymentRunExportRowTypeEnum;
    }());
    SAPB1.PaymentRunExportRowTypeEnum = PaymentRunExportRowTypeEnum;
    var PaymentsAuthorizationStatusEnum = (function () {
        function PaymentsAuthorizationStatusEnum() {
        }
        PaymentsAuthorizationStatusEnum.pasWithout = "pasWithout";
        PaymentsAuthorizationStatusEnum.pasPending = "pasPending";
        PaymentsAuthorizationStatusEnum.pasApproved = "pasApproved";
        PaymentsAuthorizationStatusEnum.pasRejected = "pasRejected";
        PaymentsAuthorizationStatusEnum.pasGenerated = "pasGenerated";
        PaymentsAuthorizationStatusEnum.pasGeneratedbyAuthorizer = "pasGeneratedbyAuthorizer";
        PaymentsAuthorizationStatusEnum.pasCancelled = "pasCancelled";
        return PaymentsAuthorizationStatusEnum;
    }());
    SAPB1.PaymentsAuthorizationStatusEnum = PaymentsAuthorizationStatusEnum;
    var PeriodStatusEnum = (function () {
        function PeriodStatusEnum() {
        }
        PeriodStatusEnum.ltUnlocked = "ltUnlocked";
        PeriodStatusEnum.ltUnlockedExceptSales = "ltUnlockedExceptSales";
        PeriodStatusEnum.ltPeriodClosing = "ltPeriodClosing";
        PeriodStatusEnum.ltLocked = "ltLocked";
        return PeriodStatusEnum;
    }());
    SAPB1.PeriodStatusEnum = PeriodStatusEnum;
    var PostingMethodEnum = (function () {
        function PostingMethodEnum() {
        }
        PostingMethodEnum.pmGLAccountBankAccount = "pmGLAccountBankAccount";
        PostingMethodEnum.pmBussinessPartnerBankAccount = "pmBussinessPartnerBankAccount";
        PostingMethodEnum.pmInterimAccountBankAccount = "pmInterimAccountBankAccount";
        PostingMethodEnum.pmExternalReconciliation = "pmExternalReconciliation";
        PostingMethodEnum.pmIgnore = "pmIgnore";
        return PostingMethodEnum;
    }());
    SAPB1.PostingMethodEnum = PostingMethodEnum;
    var PostingOfDepreciationEnum = (function () {
        function PostingOfDepreciationEnum() {
        }
        PostingOfDepreciationEnum.podDirectPosting = "podDirectPosting";
        PostingOfDepreciationEnum.podIndirectPosting = "podIndirectPosting";
        return PostingOfDepreciationEnum;
    }());
    SAPB1.PostingOfDepreciationEnum = PostingOfDepreciationEnum;
    var PriceProceedMethodEnum = (function () {
        function PriceProceedMethodEnum() {
        }
        PriceProceedMethodEnum.ppmRemove = "ppmRemove";
        PriceProceedMethodEnum.ppmUpdate = "ppmUpdate";
        PriceProceedMethodEnum.ppmKeepCorresponding = "ppmKeepCorresponding";
        PriceProceedMethodEnum.ppmKeepAll = "ppmKeepAll";
        return PriceProceedMethodEnum;
    }());
    SAPB1.PriceProceedMethodEnum = PriceProceedMethodEnum;
    var PrintOnEnum = (function () {
        function PrintOnEnum() {
        }
        PrintOnEnum.poBlankPaper = "poBlankPaper";
        PrintOnEnum.poDefault = "poDefault";
        PrintOnEnum.poOverflowBlankPaper = "poOverflowBlankPaper";
        PrintOnEnum.poOverflowCheckStock = "poOverflowCheckStock";
        return PrintOnEnum;
    }());
    SAPB1.PrintOnEnum = PrintOnEnum;
    var PrintStatusEnum = (function () {
        function PrintStatusEnum() {
        }
        PrintStatusEnum.psNo = "psNo";
        PrintStatusEnum.psYes = "psYes";
        PrintStatusEnum.psAmended = "psAmended";
        return PrintStatusEnum;
    }());
    SAPB1.PrintStatusEnum = PrintStatusEnum;
    var ProductionItemType = (function () {
        function ProductionItemType() {
        }
        ProductionItemType.pit_Item = "pit_Item";
        ProductionItemType.pit_Resource = "pit_Resource";
        ProductionItemType.pit_Text = "pit_Text";
        return ProductionItemType;
    }());
    SAPB1.ProductionItemType = ProductionItemType;
    var ProjectStatusTypeEnum = (function () {
        function ProjectStatusTypeEnum() {
        }
        ProjectStatusTypeEnum.pst_Started = "pst_Started";
        ProjectStatusTypeEnum.pst_Paused = "pst_Paused";
        ProjectStatusTypeEnum.pst_Stopped = "pst_Stopped";
        ProjectStatusTypeEnum.pst_Finished = "pst_Finished";
        ProjectStatusTypeEnum.pst_Canceled = "pst_Canceled";
        return ProjectStatusTypeEnum;
    }());
    SAPB1.ProjectStatusTypeEnum = ProjectStatusTypeEnum;
    var ProjectTypeEnum = (function () {
        function ProjectTypeEnum() {
        }
        ProjectTypeEnum.pt_External = "pt_External";
        ProjectTypeEnum.pt_Internal = "pt_Internal";
        return ProjectTypeEnum;
    }());
    SAPB1.ProjectTypeEnum = ProjectTypeEnum;
    var RclRecurringExecutionHandlingEnum = (function () {
        function RclRecurringExecutionHandlingEnum() {
        }
        RclRecurringExecutionHandlingEnum.rehStopOnError = "rehStopOnError";
        RclRecurringExecutionHandlingEnum.rehSkipTransaction = "rehSkipTransaction";
        return RclRecurringExecutionHandlingEnum;
    }());
    SAPB1.RclRecurringExecutionHandlingEnum = RclRecurringExecutionHandlingEnum;
    var RclRecurringTransactionStatusEnum = (function () {
        function RclRecurringTransactionStatusEnum() {
        }
        RclRecurringTransactionStatusEnum.rtsNotExecuted = "rtsNotExecuted";
        RclRecurringTransactionStatusEnum.rtsExecuted = "rtsExecuted";
        RclRecurringTransactionStatusEnum.rtsRemoved = "rtsRemoved";
        return RclRecurringTransactionStatusEnum;
    }());
    SAPB1.RclRecurringTransactionStatusEnum = RclRecurringTransactionStatusEnum;
    var ReceivingBinLocationsMethodEnum = (function () {
        function ReceivingBinLocationsMethodEnum() {
        }
        ReceivingBinLocationsMethodEnum.rblmBinLocationCodeOrder = "rblmBinLocationCodeOrder";
        ReceivingBinLocationsMethodEnum.rblmAlternativeSortCodeOrder = "rblmAlternativeSortCodeOrder";
        return ReceivingBinLocationsMethodEnum;
    }());
    SAPB1.ReceivingBinLocationsMethodEnum = ReceivingBinLocationsMethodEnum;
    var ReceivingUpToMethodEnum = (function () {
        function ReceivingUpToMethodEnum() {
        }
        ReceivingUpToMethodEnum.rutmBothMaxQtyAndWeight = "rutmBothMaxQtyAndWeight";
        ReceivingUpToMethodEnum.rutmMaximumQty = "rutmMaximumQty";
        ReceivingUpToMethodEnum.rutmMaximumWeight = "rutmMaximumWeight";
        return ReceivingUpToMethodEnum;
    }());
    SAPB1.ReceivingUpToMethodEnum = ReceivingUpToMethodEnum;
    var ReconciliationAccountTypeEnum = (function () {
        function ReconciliationAccountTypeEnum() {
        }
        ReconciliationAccountTypeEnum.rat_GLAccount = "rat_GLAccount";
        ReconciliationAccountTypeEnum.rat_BusinessPartner = "rat_BusinessPartner";
        return ReconciliationAccountTypeEnum;
    }());
    SAPB1.ReconciliationAccountTypeEnum = ReconciliationAccountTypeEnum;
    var RecurrenceDayOfWeekEnum = (function () {
        function RecurrenceDayOfWeekEnum() {
        }
        RecurrenceDayOfWeekEnum.rdowDay = "rdowDay";
        RecurrenceDayOfWeekEnum.rdowWeekDay = "rdowWeekDay";
        RecurrenceDayOfWeekEnum.rdowWeekendDay = "rdowWeekendDay";
        RecurrenceDayOfWeekEnum.rdowSun = "rdowSun";
        RecurrenceDayOfWeekEnum.rdowMon = "rdowMon";
        RecurrenceDayOfWeekEnum.rdowTue = "rdowTue";
        RecurrenceDayOfWeekEnum.rdowWed = "rdowWed";
        RecurrenceDayOfWeekEnum.rdowThu = "rdowThu";
        RecurrenceDayOfWeekEnum.rdowFri = "rdowFri";
        RecurrenceDayOfWeekEnum.rdowSat = "rdowSat";
        return RecurrenceDayOfWeekEnum;
    }());
    SAPB1.RecurrenceDayOfWeekEnum = RecurrenceDayOfWeekEnum;
    var RecurrencePatternEnum = (function () {
        function RecurrencePatternEnum() {
        }
        RecurrencePatternEnum.rpNone = "rpNone";
        RecurrencePatternEnum.rpDaily = "rpDaily";
        RecurrencePatternEnum.rpWeekly = "rpWeekly";
        RecurrencePatternEnum.rpMonthly = "rpMonthly";
        RecurrencePatternEnum.rpAnnually = "rpAnnually";
        return RecurrencePatternEnum;
    }());
    SAPB1.RecurrencePatternEnum = RecurrencePatternEnum;
    var RecurrenceSequenceEnum = (function () {
        function RecurrenceSequenceEnum() {
        }
        RecurrenceSequenceEnum.rsFirst = "rsFirst";
        RecurrenceSequenceEnum.rsSecond = "rsSecond";
        RecurrenceSequenceEnum.rsThird = "rsThird";
        RecurrenceSequenceEnum.rsFourth = "rsFourth";
        RecurrenceSequenceEnum.rsLast = "rsLast";
        return RecurrenceSequenceEnum;
    }());
    SAPB1.RecurrenceSequenceEnum = RecurrenceSequenceEnum;
    var RepeatOptionEnum = (function () {
        function RepeatOptionEnum() {
        }
        RepeatOptionEnum.roByDate = "roByDate";
        RepeatOptionEnum.roByWeekDay = "roByWeekDay";
        return RepeatOptionEnum;
    }());
    SAPB1.RepeatOptionEnum = RepeatOptionEnum;
    var Report349CodeListEnum = (function () {
        function Report349CodeListEnum() {
        }
        Report349CodeListEnum.r349cA = "r349cA";
        Report349CodeListEnum.r349cE = "r349cE";
        Report349CodeListEnum.r349cEmpty = "r349cEmpty";
        Report349CodeListEnum.r349cH = "r349cH";
        Report349CodeListEnum.r349cI = "r349cI";
        Report349CodeListEnum.r349cM = "r349cM";
        Report349CodeListEnum.r349cS = "r349cS";
        Report349CodeListEnum.r349cT = "r349cT";
        return Report349CodeListEnum;
    }());
    SAPB1.Report349CodeListEnum = Report349CodeListEnum;
    var ReportLayoutCategoryEnum = (function () {
        function ReportLayoutCategoryEnum() {
        }
        ReportLayoutCategoryEnum.rlcPLD = "rlcPLD";
        ReportLayoutCategoryEnum.rlcCrystal = "rlcCrystal";
        ReportLayoutCategoryEnum.rlcLegalList = "rlcLegalList";
        ReportLayoutCategoryEnum.rlcUserDefinedType = "rlcUserDefinedType";
        return ReportLayoutCategoryEnum;
    }());
    SAPB1.ReportLayoutCategoryEnum = ReportLayoutCategoryEnum;
    var ResidenceNumberTypeEnum = (function () {
        function ResidenceNumberTypeEnum() {
        }
        ResidenceNumberTypeEnum.rntSpanishFiscalID = "rntSpanishFiscalID";
        ResidenceNumberTypeEnum.rntVATRegistrationNumber = "rntVATRegistrationNumber";
        ResidenceNumberTypeEnum.rntPassport = "rntPassport";
        ResidenceNumberTypeEnum.rntFiscalIDIssuedbytheResidenceCountry = "rntFiscalIDIssuedbytheResidenceCountry";
        ResidenceNumberTypeEnum.rntCertificateofFiscalResidence = "rntCertificateofFiscalResidence";
        ResidenceNumberTypeEnum.rntOtherDocument = "rntOtherDocument";
        return ResidenceNumberTypeEnum;
    }());
    SAPB1.ResidenceNumberTypeEnum = ResidenceNumberTypeEnum;
    var ResourceAllocationEnum = (function () {
        function ResourceAllocationEnum() {
        }
        ResourceAllocationEnum.raOnStartDate = "raOnStartDate";
        ResourceAllocationEnum.raOnEndDate = "raOnEndDate";
        ResourceAllocationEnum.raStartDateForwards = "raStartDateForwards";
        ResourceAllocationEnum.raEndDateBackwards = "raEndDateBackwards";
        return ResourceAllocationEnum;
    }());
    SAPB1.ResourceAllocationEnum = ResourceAllocationEnum;
    var ResourceCapacityActionEnum = (function () {
        function ResourceCapacityActionEnum() {
        }
        ResourceCapacityActionEnum.rcaUnknown = "rcaUnknown";
        ResourceCapacityActionEnum.rcaProductionOrderCreate = "rcaProductionOrderCreate";
        ResourceCapacityActionEnum.rcaProductionOrderClose = "rcaProductionOrderClose";
        ResourceCapacityActionEnum.rcaProductionOrderReschedule = "rcaProductionOrderReschedule";
        ResourceCapacityActionEnum.rcaProductionOrderAddLine = "rcaProductionOrderAddLine";
        ResourceCapacityActionEnum.rcaProductionOrderDeleteLine = "rcaProductionOrderDeleteLine";
        ResourceCapacityActionEnum.rcaProductionOrderUpdateLine = "rcaProductionOrderUpdateLine";
        ResourceCapacityActionEnum.rcaIssueForProductionCreate = "rcaIssueForProductionCreate";
        ResourceCapacityActionEnum.rcaReceiptFromProductionCreate = "rcaReceiptFromProductionCreate";
        return ResourceCapacityActionEnum;
    }());
    SAPB1.ResourceCapacityActionEnum = ResourceCapacityActionEnum;
    var ResourceCapacityBaseTypeEnum = (function () {
        function ResourceCapacityBaseTypeEnum() {
        }
        ResourceCapacityBaseTypeEnum.rcbtNone = "rcbtNone";
        ResourceCapacityBaseTypeEnum.rcbtProductionOrder = "rcbtProductionOrder";
        return ResourceCapacityBaseTypeEnum;
    }());
    SAPB1.ResourceCapacityBaseTypeEnum = ResourceCapacityBaseTypeEnum;
    var ResourceCapacityMemoSourceEnum = (function () {
        function ResourceCapacityMemoSourceEnum() {
        }
        ResourceCapacityMemoSourceEnum.rcmsUnknown = "rcmsUnknown";
        ResourceCapacityMemoSourceEnum.rcmsResourceCapacityForm = "rcmsResourceCapacityForm";
        ResourceCapacityMemoSourceEnum.rcmsSetDailyInternalCapacitiesForm = "rcmsSetDailyInternalCapacitiesForm";
        return ResourceCapacityMemoSourceEnum;
    }());
    SAPB1.ResourceCapacityMemoSourceEnum = ResourceCapacityMemoSourceEnum;
    var ResourceCapacityOwningTypeEnum = (function () {
        function ResourceCapacityOwningTypeEnum() {
        }
        ResourceCapacityOwningTypeEnum.rcotNone = "rcotNone";
        ResourceCapacityOwningTypeEnum.rcotProductionOrder = "rcotProductionOrder";
        ResourceCapacityOwningTypeEnum.rcotIssueForProduction = "rcotIssueForProduction";
        ResourceCapacityOwningTypeEnum.rcotReceiptFromProduction = "rcotReceiptFromProduction";
        return ResourceCapacityOwningTypeEnum;
    }());
    SAPB1.ResourceCapacityOwningTypeEnum = ResourceCapacityOwningTypeEnum;
    var ResourceCapacityRevertedTypeEnum = (function () {
        function ResourceCapacityRevertedTypeEnum() {
        }
        ResourceCapacityRevertedTypeEnum.rcrtNone = "rcrtNone";
        ResourceCapacityRevertedTypeEnum.rcrtIssueForProduction = "rcrtIssueForProduction";
        return ResourceCapacityRevertedTypeEnum;
    }());
    SAPB1.ResourceCapacityRevertedTypeEnum = ResourceCapacityRevertedTypeEnum;
    var ResourceCapacitySourceTypeEnum = (function () {
        function ResourceCapacitySourceTypeEnum() {
        }
        ResourceCapacitySourceTypeEnum.rcstNone = "rcstNone";
        ResourceCapacitySourceTypeEnum.rcstProductionOrder = "rcstProductionOrder";
        ResourceCapacitySourceTypeEnum.rcstIssueForProduction = "rcstIssueForProduction";
        ResourceCapacitySourceTypeEnum.rcstReceiptFromProduction = "rcstReceiptFromProduction";
        return ResourceCapacitySourceTypeEnum;
    }());
    SAPB1.ResourceCapacitySourceTypeEnum = ResourceCapacitySourceTypeEnum;
    var ResourceCapacityTypeEnum = (function () {
        function ResourceCapacityTypeEnum() {
        }
        ResourceCapacityTypeEnum.rctInternal = "rctInternal";
        ResourceCapacityTypeEnum.rctOrdered = "rctOrdered";
        ResourceCapacityTypeEnum.rctCommitted = "rctCommitted";
        ResourceCapacityTypeEnum.rctConsumed = "rctConsumed";
        return ResourceCapacityTypeEnum;
    }());
    SAPB1.ResourceCapacityTypeEnum = ResourceCapacityTypeEnum;
    var ResourceDailyCapacityWeekdayEnum = (function () {
        function ResourceDailyCapacityWeekdayEnum() {
        }
        ResourceDailyCapacityWeekdayEnum.rdcwFirst = "rdcwFirst";
        ResourceDailyCapacityWeekdayEnum.rdcwSecond = "rdcwSecond";
        ResourceDailyCapacityWeekdayEnum.rdcwThird = "rdcwThird";
        ResourceDailyCapacityWeekdayEnum.rdcwFourth = "rdcwFourth";
        ResourceDailyCapacityWeekdayEnum.rdcwFifth = "rdcwFifth";
        ResourceDailyCapacityWeekdayEnum.rdcwSixth = "rdcwSixth";
        ResourceDailyCapacityWeekdayEnum.rdcwSeventh = "rdcwSeventh";
        return ResourceDailyCapacityWeekdayEnum;
    }());
    SAPB1.ResourceDailyCapacityWeekdayEnum = ResourceDailyCapacityWeekdayEnum;
    var ResourceIssueMethodEnum = (function () {
        function ResourceIssueMethodEnum() {
        }
        ResourceIssueMethodEnum.rimBackflush = "rimBackflush";
        ResourceIssueMethodEnum.rimManual = "rimManual";
        return ResourceIssueMethodEnum;
    }());
    SAPB1.ResourceIssueMethodEnum = ResourceIssueMethodEnum;
    var ResourceTypeEnum = (function () {
        function ResourceTypeEnum() {
        }
        ResourceTypeEnum.rtMachine = "rtMachine";
        ResourceTypeEnum.rtLabor = "rtLabor";
        ResourceTypeEnum.rtOther = "rtOther";
        return ResourceTypeEnum;
    }());
    SAPB1.ResourceTypeEnum = ResourceTypeEnum;
    var RetirementMethodEnum = (function () {
        function RetirementMethodEnum() {
        }
        RetirementMethodEnum.rmGross = "rmGross";
        RetirementMethodEnum.rmNet = "rmNet";
        return RetirementMethodEnum;
    }());
    SAPB1.RetirementMethodEnum = RetirementMethodEnum;
    var RetirementPeriodControlEnum = (function () {
        function RetirementPeriodControlEnum() {
        }
        RetirementPeriodControlEnum.rpcProRataTemporis = "rpcProRataTemporis";
        RetirementPeriodControlEnum.rpcHalfYearConvention = "rpcHalfYearConvention";
        RetirementPeriodControlEnum.rpcOnlyAfterEndOfUsefulLife = "rpcOnlyAfterEndOfUsefulLife";
        return RetirementPeriodControlEnum;
    }());
    SAPB1.RetirementPeriodControlEnum = RetirementPeriodControlEnum;
    var RetirementProRataTypeEnum = (function () {
        function RetirementProRataTypeEnum() {
        }
        RetirementProRataTypeEnum.rprtExactlyDailyBase = "rprtExactlyDailyBase";
        RetirementProRataTypeEnum.rprtLastDayOfPriorPeriod = "rprtLastDayOfPriorPeriod";
        RetirementProRataTypeEnum.rprtLastDayOfCurrentPeriod = "rprtLastDayOfCurrentPeriod";
        return RetirementProRataTypeEnum;
    }());
    SAPB1.RetirementProRataTypeEnum = RetirementProRataTypeEnum;
    var ReturnTypeEnum = (function () {
        function ReturnTypeEnum() {
        }
        ReturnTypeEnum.rt26Q = "rt26Q";
        ReturnTypeEnum.rt27Q = "rt27Q";
        return ReturnTypeEnum;
    }());
    SAPB1.ReturnTypeEnum = ReturnTypeEnum;
    var RiskLevelTypeEnum = (function () {
        function RiskLevelTypeEnum() {
        }
        RiskLevelTypeEnum.rlt_Low = "rlt_Low";
        RiskLevelTypeEnum.rlt_Medium = "rlt_Medium";
        RiskLevelTypeEnum.rlt_High = "rlt_High";
        return RiskLevelTypeEnum;
    }());
    SAPB1.RiskLevelTypeEnum = RiskLevelTypeEnum;
    var RoundingContextEnum = (function () {
        function RoundingContextEnum() {
        }
        RoundingContextEnum.rcSum = "rcSum";
        RoundingContextEnum.rcPrice = "rcPrice";
        RoundingContextEnum.rcRate = "rcRate";
        RoundingContextEnum.rcQuantity = "rcQuantity";
        RoundingContextEnum.rcMeasure = "rcMeasure";
        RoundingContextEnum.rcPercent = "rcPercent";
        RoundingContextEnum.rcTax = "rcTax";
        RoundingContextEnum.rcTaxPerGroup = "rcTaxPerGroup";
        RoundingContextEnum.rcBudgetSum = "rcBudgetSum";
        RoundingContextEnum.rcPriceListSum = "rcPriceListSum";
        RoundingContextEnum.rcRealAmountInPayment = "rcRealAmountInPayment";
        RoundingContextEnum.rcStockSumRoundUp = "rcStockSumRoundUp";
        RoundingContextEnum.rcDocHeaderTotal = "rcDocHeaderTotal";
        RoundingContextEnum.rcVatReportAmount = "rcVatReportAmount";
        RoundingContextEnum.rcLineGrossTotal = "rcLineGrossTotal";
        RoundingContextEnum.rcExpenseTotal = "rcExpenseTotal";
        RoundingContextEnum.rcWTax = "rcWTax";
        RoundingContextEnum.rcBASCode = "rcBASCode";
        RoundingContextEnum.rcTaxForPrice = "rcTaxForPrice";
        return RoundingContextEnum;
    }());
    SAPB1.RoundingContextEnum = RoundingContextEnum;
    var RoundingSysEnum = (function () {
        function RoundingSysEnum() {
        }
        RoundingSysEnum.rsNoRounding = "rsNoRounding";
        RoundingSysEnum.rsRoundToFiveHundredth = "rsRoundToFiveHundredth";
        RoundingSysEnum.rsRoundToOne = "rsRoundToOne";
        RoundingSysEnum.rsRoundToTen = "rsRoundToTen";
        RoundingSysEnum.rsRoundToTenHundredth = "rsRoundToTenHundredth";
        return RoundingSysEnum;
    }());
    SAPB1.RoundingSysEnum = RoundingSysEnum;
    var RoundingTypeEnum = (function () {
        function RoundingTypeEnum() {
        }
        RoundingTypeEnum.rt_TruncatedAU = "rt_TruncatedAU";
        RoundingTypeEnum.rt_CommercialValues = "rt_CommercialValues";
        RoundingTypeEnum.rt_NoRounding = "rt_NoRounding";
        return RoundingTypeEnum;
    }());
    SAPB1.RoundingTypeEnum = RoundingTypeEnum;
    var SEPASequenceTypeEnum = (function () {
        function SEPASequenceTypeEnum() {
        }
        SEPASequenceTypeEnum.sstOOFF = "sstOOFF";
        SEPASequenceTypeEnum.sstFRST = "sstFRST";
        SEPASequenceTypeEnum.sstRCUR = "sstRCUR";
        SEPASequenceTypeEnum.sstFNAL = "sstFNAL";
        return SEPASequenceTypeEnum;
    }());
    SAPB1.SEPASequenceTypeEnum = SEPASequenceTypeEnum;
    var SPEDContabilAccountPurposeCode = (function () {
        function SPEDContabilAccountPurposeCode() {
        }
        SPEDContabilAccountPurposeCode.spedContasDeAtivo = "spedContasDeAtivo";
        SPEDContabilAccountPurposeCode.spedContasDePassivo = "spedContasDePassivo";
        SPEDContabilAccountPurposeCode.spedPatrimonioLiquido = "spedPatrimonioLiquido";
        SPEDContabilAccountPurposeCode.spedContasDeResultado = "spedContasDeResultado";
        SPEDContabilAccountPurposeCode.spedContasDeCompensacao = "spedContasDeCompensacao";
        SPEDContabilAccountPurposeCode.spedOutras = "spedOutras";
        return SPEDContabilAccountPurposeCode;
    }());
    SAPB1.SPEDContabilAccountPurposeCode = SPEDContabilAccountPurposeCode;
    var SPEDContabilQualificationCodeEnum = (function () {
        function SPEDContabilQualificationCodeEnum() {
        }
        SPEDContabilQualificationCodeEnum.spedNA = "spedNA";
        SPEDContabilQualificationCodeEnum.spedDiretor = "spedDiretor";
        SPEDContabilQualificationCodeEnum.spedConselheiroDeAdministracao = "spedConselheiroDeAdministracao";
        SPEDContabilQualificationCodeEnum.spedAdministrador = "spedAdministrador";
        SPEDContabilQualificationCodeEnum.spedAdministradorDoGrupo = "spedAdministradorDoGrupo";
        SPEDContabilQualificationCodeEnum.spedAdministradorDeSociedadeFiliada = "spedAdministradorDeSociedadeFiliada";
        SPEDContabilQualificationCodeEnum.spedAdministradorJudicialPessoaFisica = "spedAdministradorJudicialPessoaFisica";
        SPEDContabilQualificationCodeEnum.spedAdministradorJudicialPessoaJuridicaProfissionalResponsavel = "spedAdministradorJudicialPessoaJuridicaProfissionalResponsavel";
        SPEDContabilQualificationCodeEnum.spedAdministradorJudicialGestor = "spedAdministradorJudicialGestor";
        SPEDContabilQualificationCodeEnum.spedGestorJudicial = "spedGestorJudicial";
        SPEDContabilQualificationCodeEnum.spedProcurador = "spedProcurador";
        SPEDContabilQualificationCodeEnum.spedInventariante = "spedInventariante";
        SPEDContabilQualificationCodeEnum.spedLiquidante = "spedLiquidante";
        SPEDContabilQualificationCodeEnum.spedInterventor = "spedInterventor";
        SPEDContabilQualificationCodeEnum.spedEmpresario = "spedEmpresario";
        SPEDContabilQualificationCodeEnum.spedContador = "spedContador";
        SPEDContabilQualificationCodeEnum.spedOutros = "spedOutros";
        return SPEDContabilQualificationCodeEnum;
    }());
    SAPB1.SPEDContabilQualificationCodeEnum = SPEDContabilQualificationCodeEnum;
    var ServiceTypeEnum = (function () {
        function ServiceTypeEnum() {
        }
        ServiceTypeEnum.srvcSales = "srvcSales";
        ServiceTypeEnum.srvcPurchasing = "srvcPurchasing";
        return ServiceTypeEnum;
    }());
    SAPB1.ServiceTypeEnum = ServiceTypeEnum;
    var Services = (function () {
        function Services() {
        }
        Services.MessagesService = "MessagesService";
        Services.CompanyService = "CompanyService";
        Services.SeriesService = "SeriesService";
        Services.ReportLayoutsService = "ReportLayoutsService";
        Services.FormPreferencesService = "FormPreferencesService";
        Services.AccountsService = "AccountsService";
        Services.BusinessPartnersService = "BusinessPartnersService";
        return Services;
    }());
    SAPB1.Services = Services;
    var ShaamGroupEnum = (function () {
        function ShaamGroupEnum() {
        }
        ShaamGroupEnum.sgServicesAndAsset = "sgServicesAndAsset";
        ShaamGroupEnum.sgAgriculturalProducts = "sgAgriculturalProducts";
        ShaamGroupEnum.sgInsuranceCommissions = "sgInsuranceCommissions";
        ShaamGroupEnum.sgWHTaxInstructions = "sgWHTaxInstructions";
        ShaamGroupEnum.sgInterestExchangeRateDiffs = "sgInterestExchangeRateDiffs";
        return ShaamGroupEnum;
    }());
    SAPB1.ShaamGroupEnum = ShaamGroupEnum;
    var SortOrderEnum = (function () {
        function SortOrderEnum() {
        }
        SortOrderEnum.soAscending = "soAscending";
        SortOrderEnum.soDescending = "soDescending";
        return SortOrderEnum;
    }());
    SAPB1.SortOrderEnum = SortOrderEnum;
    var SourceCurrencyEnum = (function () {
        function SourceCurrencyEnum() {
        }
        SourceCurrencyEnum.sc_PrimaryCurrency = "sc_PrimaryCurrency";
        SourceCurrencyEnum.sc_AdditionalCurrency1 = "sc_AdditionalCurrency1";
        SourceCurrencyEnum.sc_AdditionalCurrency2 = "sc_AdditionalCurrency2";
        return SourceCurrencyEnum;
    }());
    SAPB1.SourceCurrencyEnum = SourceCurrencyEnum;
    var SpecialDepreciationCalculationMethodEnum = (function () {
        function SpecialDepreciationCalculationMethodEnum() {
        }
        SpecialDepreciationCalculationMethodEnum.spcmAdditional = "spcmAdditional";
        SpecialDepreciationCalculationMethodEnum.spcmAlternative = "spcmAlternative";
        return SpecialDepreciationCalculationMethodEnum;
    }());
    SAPB1.SpecialDepreciationCalculationMethodEnum = SpecialDepreciationCalculationMethodEnum;
    var SpecialDepreciationMaximumFlagEnum = (function () {
        function SpecialDepreciationMaximumFlagEnum() {
        }
        SpecialDepreciationMaximumFlagEnum.spmfPercentage = "spmfPercentage";
        SpecialDepreciationMaximumFlagEnum.spmfAmount = "spmfAmount";
        return SpecialDepreciationMaximumFlagEnum;
    }());
    SAPB1.SpecialDepreciationMaximumFlagEnum = SpecialDepreciationMaximumFlagEnum;
    var SpecialProductTypeEnum = (function () {
        function SpecialProductTypeEnum() {
        }
        SpecialProductTypeEnum.sptMT = "sptMT";
        SpecialProductTypeEnum.sptIO = "sptIO";
        return SpecialProductTypeEnum;
    }());
    SAPB1.SpecialProductTypeEnum = SpecialProductTypeEnum;
    var StageDepTypeEnum = (function () {
        function StageDepTypeEnum() {
        }
        StageDepTypeEnum.sdt_Project = "sdt_Project";
        StageDepTypeEnum.sdt_Subproject = "sdt_Subproject";
        return StageDepTypeEnum;
    }());
    SAPB1.StageDepTypeEnum = StageDepTypeEnum;
    var StockTransferAuthorizationStatusEnum = (function () {
        function StockTransferAuthorizationStatusEnum() {
        }
        StockTransferAuthorizationStatusEnum.sasWithout = "sasWithout";
        StockTransferAuthorizationStatusEnum.sasPending = "sasPending";
        StockTransferAuthorizationStatusEnum.sasApproved = "sasApproved";
        StockTransferAuthorizationStatusEnum.sasRejected = "sasRejected";
        StockTransferAuthorizationStatusEnum.sasGenerated = "sasGenerated";
        StockTransferAuthorizationStatusEnum.sasGeneratedbyAuthorizer = "sasGeneratedbyAuthorizer";
        StockTransferAuthorizationStatusEnum.sasCancelled = "sasCancelled";
        return StockTransferAuthorizationStatusEnum;
    }());
    SAPB1.StockTransferAuthorizationStatusEnum = StockTransferAuthorizationStatusEnum;
    var StraightLineCalculationMethodEnum = (function () {
        function StraightLineCalculationMethodEnum() {
        }
        StraightLineCalculationMethodEnum.slcmAuquisitionValueDividedByTotalUsefulLife = "slcmAuquisitionValueDividedByTotalUsefulLife";
        StraightLineCalculationMethodEnum.slcmPercentageOfAcquisitionValue = "slcmPercentageOfAcquisitionValue";
        StraightLineCalculationMethodEnum.slcmNetBookValueDividedByRemainingLife = "slcmNetBookValueDividedByRemainingLife";
        return StraightLineCalculationMethodEnum;
    }());
    SAPB1.StraightLineCalculationMethodEnum = StraightLineCalculationMethodEnum;
    var StraightLinePeriodControlDepreciationPeriodsEnum = (function () {
        function StraightLinePeriodControlDepreciationPeriodsEnum() {
        }
        StraightLinePeriodControlDepreciationPeriodsEnum.slpcdpStandard = "slpcdpStandard";
        StraightLinePeriodControlDepreciationPeriodsEnum.slpcdpIndividual = "slpcdpIndividual";
        StraightLinePeriodControlDepreciationPeriodsEnum.slpcdpIndividualUsage = "slpcdpIndividualUsage";
        return StraightLinePeriodControlDepreciationPeriodsEnum;
    }());
    SAPB1.StraightLinePeriodControlDepreciationPeriodsEnum = StraightLinePeriodControlDepreciationPeriodsEnum;
    var SubprojectStatusTypeEnum = (function () {
        function SubprojectStatusTypeEnum() {
        }
        SubprojectStatusTypeEnum.sst_Open = "sst_Open";
        SubprojectStatusTypeEnum.sst_Closed = "sst_Closed";
        return SubprojectStatusTypeEnum;
    }());
    SAPB1.SubprojectStatusTypeEnum = SubprojectStatusTypeEnum;
    var SubsequentAcquisitionPeriodControlEnum = (function () {
        function SubsequentAcquisitionPeriodControlEnum() {
        }
        SubsequentAcquisitionPeriodControlEnum.sapcProRataTemporis = "sapcProRataTemporis";
        SubsequentAcquisitionPeriodControlEnum.sapcHalfYearConvention = "sapcHalfYearConvention";
        SubsequentAcquisitionPeriodControlEnum.sapcFullYear = "sapcFullYear";
        return SubsequentAcquisitionPeriodControlEnum;
    }());
    SAPB1.SubsequentAcquisitionPeriodControlEnum = SubsequentAcquisitionPeriodControlEnum;
    var SubsequentAcquisitionProRataTypeEnum = (function () {
        function SubsequentAcquisitionProRataTypeEnum() {
        }
        SubsequentAcquisitionProRataTypeEnum.saprtExactlyDailyBase = "saprtExactlyDailyBase";
        SubsequentAcquisitionProRataTypeEnum.saprtFirstDayOfCurrentPeriod = "saprtFirstDayOfCurrentPeriod";
        SubsequentAcquisitionProRataTypeEnum.saprtFirstDayOfNextPeriod = "saprtFirstDayOfNextPeriod";
        return SubsequentAcquisitionProRataTypeEnum;
    }());
    SAPB1.SubsequentAcquisitionProRataTypeEnum = SubsequentAcquisitionProRataTypeEnum;
    var TargetGroupTypeEnum = (function () {
        function TargetGroupTypeEnum() {
        }
        TargetGroupTypeEnum.tgtCustomer = "tgtCustomer";
        TargetGroupTypeEnum.tgtVendor = "tgtVendor";
        return TargetGroupTypeEnum;
    }());
    SAPB1.TargetGroupTypeEnum = TargetGroupTypeEnum;
    var TargetGroupsDetailStatusEnum = (function () {
        function TargetGroupsDetailStatusEnum() {
        }
        TargetGroupsDetailStatusEnum.tdsActive = "tdsActive";
        TargetGroupsDetailStatusEnum.tdsInactive = "tdsInactive";
        return TargetGroupsDetailStatusEnum;
    }());
    SAPB1.TargetGroupsDetailStatusEnum = TargetGroupsDetailStatusEnum;
    var TaxCalcSysEnum = (function () {
        function TaxCalcSysEnum() {
        }
        TaxCalcSysEnum.PreconfiguredFormulaWithJurisdictionSupport = "PreconfiguredFormulaWithJurisdictionSupport";
        TaxCalcSysEnum.UserDefinedFormula = "UserDefinedFormula";
        TaxCalcSysEnum.PreconfiguredFormula = "PreconfiguredFormula";
        return TaxCalcSysEnum;
    }());
    SAPB1.TaxCalcSysEnum = TaxCalcSysEnum;
    var TaxCodeDeterminationTCDByUsageTypeEnum = (function () {
        function TaxCodeDeterminationTCDByUsageTypeEnum() {
        }
        TaxCodeDeterminationTCDByUsageTypeEnum.tcdbutDefaultSales = "tcdbutDefaultSales";
        TaxCodeDeterminationTCDByUsageTypeEnum.tcdbutDefaultPurchase = "tcdbutDefaultPurchase";
        TaxCodeDeterminationTCDByUsageTypeEnum.tcdbutLine = "tcdbutLine";
        return TaxCodeDeterminationTCDByUsageTypeEnum;
    }());
    SAPB1.TaxCodeDeterminationTCDByUsageTypeEnum = TaxCodeDeterminationTCDByUsageTypeEnum;
    var TaxCodeDeterminationTCDDefaultWTTypeEnum = (function () {
        function TaxCodeDeterminationTCDDefaultWTTypeEnum() {
        }
        TaxCodeDeterminationTCDDefaultWTTypeEnum.tcddwttDefaultSales = "tcddwttDefaultSales";
        TaxCodeDeterminationTCDDefaultWTTypeEnum.tcddwttDefaultPurchase = "tcddwttDefaultPurchase";
        TaxCodeDeterminationTCDDefaultWTTypeEnum.tcddwttLine = "tcddwttLine";
        return TaxCodeDeterminationTCDDefaultWTTypeEnum;
    }());
    SAPB1.TaxCodeDeterminationTCDDefaultWTTypeEnum = TaxCodeDeterminationTCDDefaultWTTypeEnum;
    var TaxCodeDeterminationTCDTypeEnum = (function () {
        function TaxCodeDeterminationTCDTypeEnum() {
        }
        TaxCodeDeterminationTCDTypeEnum.tcdtMaterialItem = "tcdtMaterialItem";
        TaxCodeDeterminationTCDTypeEnum.tcdtServiceItem = "tcdtServiceItem";
        TaxCodeDeterminationTCDTypeEnum.tcdtServiceDocument = "tcdtServiceDocument";
        TaxCodeDeterminationTCDTypeEnum.tcdtWithholdingTax = "tcdtWithholdingTax";
        return TaxCodeDeterminationTCDTypeEnum;
    }());
    SAPB1.TaxCodeDeterminationTCDTypeEnum = TaxCodeDeterminationTCDTypeEnum;
    var TaxInvoiceReportLineTypeEnum = (function () {
        function TaxInvoiceReportLineTypeEnum() {
        }
        TaxInvoiceReportLineTypeEnum.LineOfBusinessPlace = "LineOfBusinessPlace";
        TaxInvoiceReportLineTypeEnum.LineOfBusinessPartner = "LineOfBusinessPartner";
        TaxInvoiceReportLineTypeEnum.LineOfDocument = "LineOfDocument";
        TaxInvoiceReportLineTypeEnum.LineOfItem = "LineOfItem";
        return TaxInvoiceReportLineTypeEnum;
    }());
    SAPB1.TaxInvoiceReportLineTypeEnum = TaxInvoiceReportLineTypeEnum;
    var TaxInvoiceReportNTSApprovedEnum = (function () {
        function TaxInvoiceReportNTSApprovedEnum() {
        }
        TaxInvoiceReportNTSApprovedEnum.NotApproved = "NotApproved";
        TaxInvoiceReportNTSApprovedEnum.Approved = "Approved";
        return TaxInvoiceReportNTSApprovedEnum;
    }());
    SAPB1.TaxInvoiceReportNTSApprovedEnum = TaxInvoiceReportNTSApprovedEnum;
    var TaxRateDeterminationEnum = (function () {
        function TaxRateDeterminationEnum() {
        }
        TaxRateDeterminationEnum.trd_PostingDate = "trd_PostingDate";
        TaxRateDeterminationEnum.trd_DocumentDate = "trd_DocumentDate";
        return TaxRateDeterminationEnum;
    }());
    SAPB1.TaxRateDeterminationEnum = TaxRateDeterminationEnum;
    var TaxReportFilterApArDocumentType = (function () {
        function TaxReportFilterApArDocumentType() {
        }
        TaxReportFilterApArDocumentType.trfadt_APDocuments = "trfadt_APDocuments";
        TaxReportFilterApArDocumentType.trfadt_ARDocuments = "trfadt_ARDocuments";
        return TaxReportFilterApArDocumentType;
    }());
    SAPB1.TaxReportFilterApArDocumentType = TaxReportFilterApArDocumentType;
    var TaxReportFilterDeclarationType = (function () {
        function TaxReportFilterDeclarationType() {
        }
        TaxReportFilterDeclarationType.trfdt_Original = "trfdt_Original";
        TaxReportFilterDeclarationType.trfdt_Substitute = "trfdt_Substitute";
        TaxReportFilterDeclarationType.trfdt_Complementary = "trfdt_Complementary";
        return TaxReportFilterDeclarationType;
    }());
    SAPB1.TaxReportFilterDeclarationType = TaxReportFilterDeclarationType;
    var TaxReportFilterDocumentType = (function () {
        function TaxReportFilterDocumentType() {
        }
        TaxReportFilterDocumentType.trfdt_ARInvoices = "trfdt_ARInvoices";
        TaxReportFilterDocumentType.trfdt_ARCreditMemos = "trfdt_ARCreditMemos";
        TaxReportFilterDocumentType.trfdt_APInvoices = "trfdt_APInvoices";
        TaxReportFilterDocumentType.trfdt_APCreditMemos = "trfdt_APCreditMemos";
        TaxReportFilterDocumentType.trfdt_IncomingPayments = "trfdt_IncomingPayments";
        TaxReportFilterDocumentType.trfdt_JournalEntries = "trfdt_JournalEntries";
        TaxReportFilterDocumentType.trfdt_OutgoingPayments = "trfdt_OutgoingPayments";
        TaxReportFilterDocumentType.trfdt_ChecksforPayment = "trfdt_ChecksforPayment";
        TaxReportFilterDocumentType.trfdt_InventoryTransfers = "trfdt_InventoryTransfers";
        TaxReportFilterDocumentType.trfdt_ARDownPayment = "trfdt_ARDownPayment";
        TaxReportFilterDocumentType.trfdt_APDownPayment = "trfdt_APDownPayment";
        return TaxReportFilterDocumentType;
    }());
    SAPB1.TaxReportFilterDocumentType = TaxReportFilterDocumentType;
    var TaxReportFilterPeriod = (function () {
        function TaxReportFilterPeriod() {
        }
        TaxReportFilterPeriod.trfP_Quarter = "trfP_Quarter";
        TaxReportFilterPeriod.trfP_Year = "trfP_Year";
        TaxReportFilterPeriod.trfP_Month = "trfP_Month";
        TaxReportFilterPeriod.trfP_NULL = "trfP_NULL";
        return TaxReportFilterPeriod;
    }());
    SAPB1.TaxReportFilterPeriod = TaxReportFilterPeriod;
    var TaxReportFilterQuarterOrDates = (function () {
        function TaxReportFilterQuarterOrDates() {
        }
        TaxReportFilterQuarterOrDates.trfqd_Interval = "trfqd_Interval";
        TaxReportFilterQuarterOrDates.trfqd_Date = "trfqd_Date";
        return TaxReportFilterQuarterOrDates;
    }());
    SAPB1.TaxReportFilterQuarterOrDates = TaxReportFilterQuarterOrDates;
    var TaxReportFilterReportLayoutType = (function () {
        function TaxReportFilterReportLayoutType() {
        }
        TaxReportFilterReportLayoutType.trfrlt_RegisterBookLayout = "trfrlt_RegisterBookLayout";
        TaxReportFilterReportLayoutType.trfrlt_DeclarationLayout = "trfrlt_DeclarationLayout";
        return TaxReportFilterReportLayoutType;
    }());
    SAPB1.TaxReportFilterReportLayoutType = TaxReportFilterReportLayoutType;
    var TaxReportFilterType = (function () {
        function TaxReportFilterType() {
        }
        TaxReportFilterType.trft_TaxReport = "trft_TaxReport";
        TaxReportFilterType.trft_WTReport = "trft_WTReport";
        TaxReportFilterType.trft_Report347 = "trft_Report347";
        TaxReportFilterType.trft_Report349 = "trft_Report349";
        TaxReportFilterType.trft_ReconciliationReport = "trft_ReconciliationReport";
        TaxReportFilterType.trft_StampTax = "trft_StampTax";
        TaxReportFilterType.trft_SalesReport = "trft_SalesReport";
        TaxReportFilterType.trft_None = "trft_None";
        TaxReportFilterType.trft_BoxReport = "trft_BoxReport";
        TaxReportFilterType.trft_AppendixOP = "trft_AppendixOP";
        TaxReportFilterType.trft_AnnualSalesReport = "trft_AnnualSalesReport";
        TaxReportFilterType.trft_VATRefundReport = "trft_VATRefundReport";
        return TaxReportFilterType;
    }());
    SAPB1.TaxReportFilterType = TaxReportFilterType;
    var TaxTypeBlackListEnum = (function () {
        function TaxTypeBlackListEnum() {
        }
        TaxTypeBlackListEnum.ttblExcluded = "ttblExcluded";
        TaxTypeBlackListEnum.ttblExempt = "ttblExempt";
        TaxTypeBlackListEnum.ttblNonSubject = "ttblNonSubject";
        TaxTypeBlackListEnum.ttblNotTaxable = "ttblNotTaxable";
        TaxTypeBlackListEnum.ttblTaxable = "ttblTaxable";
        return TaxTypeBlackListEnum;
    }());
    SAPB1.TaxTypeBlackListEnum = TaxTypeBlackListEnum;
    var ThreatLevelEnum = (function () {
        function ThreatLevelEnum() {
        }
        ThreatLevelEnum.tlLow = "tlLow";
        ThreatLevelEnum.tlMedium = "tlMedium";
        ThreatLevelEnum.tlHigh = "tlHigh";
        return ThreatLevelEnum;
    }());
    SAPB1.ThreatLevelEnum = ThreatLevelEnum;
    var TimeSheetTypeEnum = (function () {
        function TimeSheetTypeEnum() {
        }
        TimeSheetTypeEnum.tsh_Employee = "tsh_Employee";
        TimeSheetTypeEnum.tsh_User = "tsh_User";
        TimeSheetTypeEnum.tsh_Other = "tsh_Other";
        return TimeSheetTypeEnum;
    }());
    SAPB1.TimeSheetTypeEnum = TimeSheetTypeEnum;
    var TransTypesEnum = (function () {
        function TransTypesEnum() {
        }
        TransTypesEnum.ttAllTransactions = "ttAllTransactions";
        TransTypesEnum.ttOpeningBalance = "ttOpeningBalance";
        TransTypesEnum.ttClosingBalance = "ttClosingBalance";
        TransTypesEnum.ttARInvoice = "ttARInvoice";
        TransTypesEnum.ttARCredItnote = "ttARCredItnote";
        TransTypesEnum.ttDelivery = "ttDelivery";
        TransTypesEnum.ttReturn = "ttReturn";
        TransTypesEnum.ttAPInvoice = "ttAPInvoice";
        TransTypesEnum.ttAPCreditNote = "ttAPCreditNote";
        TransTypesEnum.ttPurchaseDeliveryNote = "ttPurchaseDeliveryNote";
        TransTypesEnum.ttPurchaseReturn = "ttPurchaseReturn";
        TransTypesEnum.ttReceipt = "ttReceipt";
        TransTypesEnum.ttDeposit = "ttDeposit";
        TransTypesEnum.ttJournalEntry = "ttJournalEntry";
        TransTypesEnum.ttVendorPayment = "ttVendorPayment";
        TransTypesEnum.ttChequesForPayment = "ttChequesForPayment";
        TransTypesEnum.ttStockList = "ttStockList";
        TransTypesEnum.ttGeneralReceiptToStock = "ttGeneralReceiptToStock";
        TransTypesEnum.ttGeneralReleaseFromStock = "ttGeneralReleaseFromStock";
        TransTypesEnum.ttTransferBetweenWarehouses = "ttTransferBetweenWarehouses";
        TransTypesEnum.ttWorkInstructions = "ttWorkInstructions";
        TransTypesEnum.ttLandedCosts = "ttLandedCosts";
        TransTypesEnum.ttDeferredDeposit = "ttDeferredDeposit";
        TransTypesEnum.ttCorrectionInvoice = "ttCorrectionInvoice";
        TransTypesEnum.ttInventoryValuation = "ttInventoryValuation";
        TransTypesEnum.ttAPCorrectionInvoice = "ttAPCorrectionInvoice";
        TransTypesEnum.ttAPCorrectionInvoiceReversal = "ttAPCorrectionInvoiceReversal";
        TransTypesEnum.ttARCorrectionInvoice = "ttARCorrectionInvoice";
        TransTypesEnum.ttARCorrectionInvoiceReversal = "ttARCorrectionInvoiceReversal";
        TransTypesEnum.ttBoETransaction = "ttBoETransaction";
        TransTypesEnum.ttProductionOrder = "ttProductionOrder";
        TransTypesEnum.ttDownPayment = "ttDownPayment";
        TransTypesEnum.ttPurchaseDownPayment = "ttPurchaseDownPayment";
        TransTypesEnum.ttInternalReconciliation = "ttInternalReconciliation";
        return TransTypesEnum;
    }());
    SAPB1.TransTypesEnum = TransTypesEnum;
    var TransferSourcePeriodControlEnum = (function () {
        function TransferSourcePeriodControlEnum() {
        }
        TransferSourcePeriodControlEnum.tspcProRataTemporis = "tspcProRataTemporis";
        return TransferSourcePeriodControlEnum;
    }());
    SAPB1.TransferSourcePeriodControlEnum = TransferSourcePeriodControlEnum;
    var TransferSourceProRataTypeEnum = (function () {
        function TransferSourceProRataTypeEnum() {
        }
        TransferSourceProRataTypeEnum.tsprtExactlyDailyBase = "tsprtExactlyDailyBase";
        TransferSourceProRataTypeEnum.tsprtLastDayOfPriorPeriod = "tsprtLastDayOfPriorPeriod";
        TransferSourceProRataTypeEnum.tsprtLastDayofCurrentPeriod = "tsprtLastDayofCurrentPeriod";
        return TransferSourceProRataTypeEnum;
    }());
    SAPB1.TransferSourceProRataTypeEnum = TransferSourceProRataTypeEnum;
    var TransferTargetPeriodControlEnum = (function () {
        function TransferTargetPeriodControlEnum() {
        }
        TransferTargetPeriodControlEnum.ttpcProRataTemporis = "ttpcProRataTemporis";
        return TransferTargetPeriodControlEnum;
    }());
    SAPB1.TransferTargetPeriodControlEnum = TransferTargetPeriodControlEnum;
    var TransferTargetProRataTypeEnum = (function () {
        function TransferTargetProRataTypeEnum() {
        }
        TransferTargetProRataTypeEnum.ttprtExactlyDailyBase = "ttprtExactlyDailyBase";
        TransferTargetProRataTypeEnum.ttprtFirstDayOfCurrentPeriod = "ttprtFirstDayOfCurrentPeriod";
        TransferTargetProRataTypeEnum.ttprtFirstDayOfNextPeriod = "ttprtFirstDayOfNextPeriod";
        return TransferTargetProRataTypeEnum;
    }());
    SAPB1.TransferTargetProRataTypeEnum = TransferTargetProRataTypeEnum;
    var TranslationCategoryEnum = (function () {
        function TranslationCategoryEnum() {
        }
        TranslationCategoryEnum.asCRReport = "asCRReport";
        TranslationCategoryEnum.asMenuItem = "asMenuItem";
        TranslationCategoryEnum.asEFMItem = "asEFMItem";
        return TranslationCategoryEnum;
    }());
    SAPB1.TranslationCategoryEnum = TranslationCategoryEnum;
    var TypeOfAdvancedRulesEnum = (function () {
        function TypeOfAdvancedRulesEnum() {
        }
        TypeOfAdvancedRulesEnum.toarGeneral = "toarGeneral";
        TypeOfAdvancedRulesEnum.toarWarehouse = "toarWarehouse";
        TypeOfAdvancedRulesEnum.toarItemGroup = "toarItemGroup";
        return TypeOfAdvancedRulesEnum;
    }());
    SAPB1.TypeOfAdvancedRulesEnum = TypeOfAdvancedRulesEnum;
    var TypeOfOperationEnum = (function () {
        function TypeOfOperationEnum() {
        }
        TypeOfOperationEnum.tooProfessionalServices = "tooProfessionalServices";
        TypeOfOperationEnum.tooRentingAssets = "tooRentingAssets";
        TypeOfOperationEnum.tooOthers = "tooOthers";
        return TypeOfOperationEnum;
    }());
    SAPB1.TypeOfOperationEnum = TypeOfOperationEnum;
    var UserActionTypeEnum = (function () {
        function UserActionTypeEnum() {
        }
        UserActionTypeEnum.actionLogin = "actionLogin";
        UserActionTypeEnum.actionLoginFail = "actionLoginFail";
        UserActionTypeEnum.actionLogoff = "actionLogoff";
        UserActionTypeEnum.actionCreateUser = "actionCreateUser";
        UserActionTypeEnum.actionRemoveUser = "actionRemoveUser";
        UserActionTypeEnum.actionSelectSU = "actionSelectSU";
        UserActionTypeEnum.actionDeselectSU = "actionDeselectSU";
        UserActionTypeEnum.actionLock = "actionLock";
        UserActionTypeEnum.actionUnlock = "actionUnlock";
        UserActionTypeEnum.actionChPasswd = "actionChPasswd";
        UserActionTypeEnum.actionUnlockFail = "actionUnlockFail";
        return UserActionTypeEnum;
    }());
    SAPB1.UserActionTypeEnum = UserActionTypeEnum;
    var UserMenuItemTypeEnum = (function () {
        function UserMenuItemTypeEnum() {
        }
        UserMenuItemTypeEnum.umitForm = "umitForm";
        UserMenuItemTypeEnum.umitQuery = "umitQuery";
        UserMenuItemTypeEnum.umitFolder = "umitFolder";
        UserMenuItemTypeEnum.umitReport = "umitReport";
        UserMenuItemTypeEnum.umitLink = "umitLink";
        return UserMenuItemTypeEnum;
    }());
    SAPB1.UserMenuItemTypeEnum = UserMenuItemTypeEnum;
    var UserQueryTypeEnum = (function () {
        function UserQueryTypeEnum() {
        }
        UserQueryTypeEnum.uqtRegular = "uqtRegular";
        UserQueryTypeEnum.uqtWizard = "uqtWizard";
        UserQueryTypeEnum.uqtGenerator = "uqtGenerator";
        UserQueryTypeEnum.uqtStoredProcedure = "uqtStoredProcedure";
        return UserQueryTypeEnum;
    }());
    SAPB1.UserQueryTypeEnum = UserQueryTypeEnum;
    var VMCommunicationStatusEnum = (function () {
        function VMCommunicationStatusEnum() {
        }
        VMCommunicationStatusEnum.vmcs_Pending = "vmcs_Pending";
        VMCommunicationStatusEnum.vmcs_Error = "vmcs_Error";
        VMCommunicationStatusEnum.vmcs_Successful = "vmcs_Successful";
        VMCommunicationStatusEnum.vmcs_New = "vmcs_New";
        VMCommunicationStatusEnum.vmcs_Rejected = "vmcs_Rejected";
        return VMCommunicationStatusEnum;
    }());
    SAPB1.VMCommunicationStatusEnum = VMCommunicationStatusEnum;
    var VMCommunicationTypeEnum = (function () {
        function VMCommunicationTypeEnum() {
        }
        VMCommunicationTypeEnum.vmct_MasterData = "vmct_MasterData";
        VMCommunicationTypeEnum.vmct_Transaction = "vmct_Transaction";
        return VMCommunicationTypeEnum;
    }());
    SAPB1.VMCommunicationTypeEnum = VMCommunicationTypeEnum;
    var VatGroupsTaxRegionEnum = (function () {
        function VatGroupsTaxRegionEnum() {
        }
        VatGroupsTaxRegionEnum.vgtrPT = "vgtrPT";
        VatGroupsTaxRegionEnum.vgtrPT_AC = "vgtrPT_AC";
        VatGroupsTaxRegionEnum.vgtrPT_MA = "vgtrPT_MA";
        return VatGroupsTaxRegionEnum;
    }());
    SAPB1.VatGroupsTaxRegionEnum = VatGroupsTaxRegionEnum;
    var WTDDetailType = (function () {
        function WTDDetailType() {
        }
        WTDDetailType.Allowed = "Allowed";
        WTDDetailType.SpecialRate = "SpecialRate";
        WTDDetailType.Exemption = "Exemption";
        return WTDDetailType;
    }());
    SAPB1.WTDDetailType = WTDDetailType;
    var WithholdingTaxCodeBaseTypeEnum = (function () {
        function WithholdingTaxCodeBaseTypeEnum() {
        }
        WithholdingTaxCodeBaseTypeEnum.wtcbt_Gross = "wtcbt_Gross";
        WithholdingTaxCodeBaseTypeEnum.wtcbt_Net = "wtcbt_Net";
        WithholdingTaxCodeBaseTypeEnum.wtcbt_VAT = "wtcbt_VAT";
        WithholdingTaxCodeBaseTypeEnum.wtcbt_Gross_VAT = "wtcbt_Gross_VAT";
        return WithholdingTaxCodeBaseTypeEnum;
    }());
    SAPB1.WithholdingTaxCodeBaseTypeEnum = WithholdingTaxCodeBaseTypeEnum;
    var WithholdingTaxCodeCategoryEnum = (function () {
        function WithholdingTaxCodeCategoryEnum() {
        }
        WithholdingTaxCodeCategoryEnum.wtcc_Invoice = "wtcc_Invoice";
        WithholdingTaxCodeCategoryEnum.wtcc_Payment = "wtcc_Payment";
        return WithholdingTaxCodeCategoryEnum;
    }());
    SAPB1.WithholdingTaxCodeCategoryEnum = WithholdingTaxCodeCategoryEnum;
    var WithholdingTypeEnum = (function () {
        function WithholdingTypeEnum() {
        }
        WithholdingTypeEnum.wt_VatWithholding = "wt_VatWithholding";
        WithholdingTypeEnum.wt_IncomeTaxWithholding = "wt_IncomeTaxWithholding";
        return WithholdingTypeEnum;
    }());
    SAPB1.WithholdingTypeEnum = WithholdingTypeEnum;
    var ChartOfAccount = (function () {
        function ChartOfAccount() {
        }
        return ChartOfAccount;
    }());
    SAPB1.ChartOfAccount = ChartOfAccount;
    var ChartOfAccountKey = (function () {
        function ChartOfAccountKey() {
        }
        return ChartOfAccountKey;
    }());
    SAPB1.ChartOfAccountKey = ChartOfAccountKey;
    var BusinessPartnerGroup = (function () {
        function BusinessPartnerGroup() {
        }
        return BusinessPartnerGroup;
    }());
    SAPB1.BusinessPartnerGroup = BusinessPartnerGroup;
    var BusinessPartnerGroupKey = (function () {
        function BusinessPartnerGroupKey() {
        }
        return BusinessPartnerGroupKey;
    }());
    SAPB1.BusinessPartnerGroupKey = BusinessPartnerGroupKey;
    var SalesOpportunitySourceSetup = (function () {
        function SalesOpportunitySourceSetup() {
        }
        return SalesOpportunitySourceSetup;
    }());
    SAPB1.SalesOpportunitySourceSetup = SalesOpportunitySourceSetup;
    var SalesOpportunitySourceSetupKey = (function () {
        function SalesOpportunitySourceSetupKey() {
        }
        return SalesOpportunitySourceSetupKey;
    }());
    SAPB1.SalesOpportunitySourceSetupKey = SalesOpportunitySourceSetupKey;
    var SalesOpportunitySourceSetupParams = (function () {
        function SalesOpportunitySourceSetupParams() {
        }
        return SalesOpportunitySourceSetupParams;
    }());
    SAPB1.SalesOpportunitySourceSetupParams = SalesOpportunitySourceSetupParams;
    var BankStatement = (function () {
        function BankStatement() {
        }
        return BankStatement;
    }());
    SAPB1.BankStatement = BankStatement;
    var BankStatementKey = (function () {
        function BankStatementKey() {
        }
        return BankStatementKey;
    }());
    SAPB1.BankStatementKey = BankStatementKey;
    var BankStatementRow = (function () {
        function BankStatementRow() {
        }
        return BankStatementRow;
    }());
    SAPB1.BankStatementRow = BankStatementRow;
    var MultiplePayment = (function () {
        function MultiplePayment() {
        }
        return MultiplePayment;
    }());
    SAPB1.MultiplePayment = MultiplePayment;
    var BankStatementParams = (function () {
        function BankStatementParams() {
        }
        return BankStatementParams;
    }());
    SAPB1.BankStatementParams = BankStatementParams;
    var BankStatementsFilter = (function () {
        function BankStatementsFilter() {
        }
        return BankStatementsFilter;
    }());
    SAPB1.BankStatementsFilter = BankStatementsFilter;
    var BatchNumberDetail = (function () {
        function BatchNumberDetail() {
        }
        return BatchNumberDetail;
    }());
    SAPB1.BatchNumberDetail = BatchNumberDetail;
    var BatchNumberDetailKey = (function () {
        function BatchNumberDetailKey() {
        }
        return BatchNumberDetailKey;
    }());
    SAPB1.BatchNumberDetailKey = BatchNumberDetailKey;
    var BatchNumberDetailParams = (function () {
        function BatchNumberDetailParams() {
        }
        return BatchNumberDetailParams;
    }());
    SAPB1.BatchNumberDetailParams = BatchNumberDetailParams;
    var SerialNumberDetail = (function () {
        function SerialNumberDetail() {
        }
        return SerialNumberDetail;
    }());
    SAPB1.SerialNumberDetail = SerialNumberDetail;
    var SerialNumberDetailKey = (function () {
        function SerialNumberDetailKey() {
        }
        return SerialNumberDetailKey;
    }());
    SAPB1.SerialNumberDetailKey = SerialNumberDetailKey;
    var SerialNumberDetailParams = (function () {
        function SerialNumberDetailParams() {
        }
        return SerialNumberDetailParams;
    }());
    SAPB1.SerialNumberDetailParams = SerialNumberDetailParams;
    var InventoryPostingCopyOption = (function () {
        function InventoryPostingCopyOption() {
        }
        return InventoryPostingCopyOption;
    }());
    SAPB1.InventoryPostingCopyOption = InventoryPostingCopyOption;
    var InventoryPosting = (function () {
        function InventoryPosting() {
        }
        return InventoryPosting;
    }());
    SAPB1.InventoryPosting = InventoryPosting;
    var InventoryPostingKey = (function () {
        function InventoryPostingKey() {
        }
        return InventoryPostingKey;
    }());
    SAPB1.InventoryPostingKey = InventoryPostingKey;
    var InventoryPostingLine = (function () {
        function InventoryPostingLine() {
        }
        return InventoryPostingLine;
    }());
    SAPB1.InventoryPostingLine = InventoryPostingLine;
    var InventoryPostingLineUoM = (function () {
        function InventoryPostingLineUoM() {
        }
        return InventoryPostingLineUoM;
    }());
    SAPB1.InventoryPostingLineUoM = InventoryPostingLineUoM;
    var InventoryPostingSerialNumber = (function () {
        function InventoryPostingSerialNumber() {
        }
        return InventoryPostingSerialNumber;
    }());
    SAPB1.InventoryPostingSerialNumber = InventoryPostingSerialNumber;
    var InventoryPostingBatchNumber = (function () {
        function InventoryPostingBatchNumber() {
        }
        return InventoryPostingBatchNumber;
    }());
    SAPB1.InventoryPostingBatchNumber = InventoryPostingBatchNumber;
    var InventoryPostingParams = (function () {
        function InventoryPostingParams() {
        }
        return InventoryPostingParams;
    }());
    SAPB1.InventoryPostingParams = InventoryPostingParams;
    var FinancialYear = (function () {
        function FinancialYear() {
        }
        return FinancialYear;
    }());
    SAPB1.FinancialYear = FinancialYear;
    var FinancialYearKey = (function () {
        function FinancialYearKey() {
        }
        return FinancialYearKey;
    }());
    SAPB1.FinancialYearKey = FinancialYearKey;
    var FinancialYearParams = (function () {
        function FinancialYearParams() {
        }
        return FinancialYearParams;
    }());
    SAPB1.FinancialYearParams = FinancialYearParams;
    var Section = (function () {
        function Section() {
        }
        return Section;
    }());
    SAPB1.Section = Section;
    var SectionKey = (function () {
        function SectionKey() {
        }
        return SectionKey;
    }());
    SAPB1.SectionKey = SectionKey;
    var SectionParams = (function () {
        function SectionParams() {
        }
        return SectionParams;
    }());
    SAPB1.SectionParams = SectionParams;
    var CertificateSeries = (function () {
        function CertificateSeries() {
        }
        return CertificateSeries;
    }());
    SAPB1.CertificateSeries = CertificateSeries;
    var CertificateSeriesKey = (function () {
        function CertificateSeriesKey() {
        }
        return CertificateSeriesKey;
    }());
    SAPB1.CertificateSeriesKey = CertificateSeriesKey;
    var SeriesLine = (function () {
        function SeriesLine() {
        }
        return SeriesLine;
    }());
    SAPB1.SeriesLine = SeriesLine;
    var CertificateSeriesParams = (function () {
        function CertificateSeriesParams() {
        }
        return CertificateSeriesParams;
    }());
    SAPB1.CertificateSeriesParams = CertificateSeriesParams;
    var NatureOfAssessee = (function () {
        function NatureOfAssessee() {
        }
        return NatureOfAssessee;
    }());
    SAPB1.NatureOfAssessee = NatureOfAssessee;
    var NatureOfAssesseeKey = (function () {
        function NatureOfAssesseeKey() {
        }
        return NatureOfAssesseeKey;
    }());
    SAPB1.NatureOfAssesseeKey = NatureOfAssesseeKey;
    var NatureOfAssesseeParams = (function () {
        function NatureOfAssesseeParams() {
        }
        return NatureOfAssesseeParams;
    }());
    SAPB1.NatureOfAssesseeParams = NatureOfAssesseeParams;
    var ReportType = (function () {
        function ReportType() {
        }
        return ReportType;
    }());
    SAPB1.ReportType = ReportType;
    var ReportTypeKey = (function () {
        function ReportTypeKey() {
        }
        return ReportTypeKey;
    }());
    SAPB1.ReportTypeKey = ReportTypeKey;
    var ReportTypeParams = (function () {
        function ReportTypeParams() {
        }
        return ReportTypeParams;
    }());
    SAPB1.ReportTypeParams = ReportTypeParams;
    var UnitOfMeasurementGroup = (function () {
        function UnitOfMeasurementGroup() {
        }
        return UnitOfMeasurementGroup;
    }());
    SAPB1.UnitOfMeasurementGroup = UnitOfMeasurementGroup;
    var UnitOfMeasurementGroupKey = (function () {
        function UnitOfMeasurementGroupKey() {
        }
        return UnitOfMeasurementGroupKey;
    }());
    SAPB1.UnitOfMeasurementGroupKey = UnitOfMeasurementGroupKey;
    var UoMGroupDefinition = (function () {
        function UoMGroupDefinition() {
        }
        return UoMGroupDefinition;
    }());
    SAPB1.UoMGroupDefinition = UoMGroupDefinition;
    var UnitOfMeasurementGroupParams = (function () {
        function UnitOfMeasurementGroupParams() {
        }
        return UnitOfMeasurementGroupParams;
    }());
    SAPB1.UnitOfMeasurementGroupParams = UnitOfMeasurementGroupParams;
    var UnitOfMeasurement = (function () {
        function UnitOfMeasurement() {
        }
        return UnitOfMeasurement;
    }());
    SAPB1.UnitOfMeasurement = UnitOfMeasurement;
    var UnitOfMeasurementKey = (function () {
        function UnitOfMeasurementKey() {
        }
        return UnitOfMeasurementKey;
    }());
    SAPB1.UnitOfMeasurementKey = UnitOfMeasurementKey;
    var UnitOfMeasurementParams = (function () {
        function UnitOfMeasurementParams() {
        }
        return UnitOfMeasurementParams;
    }());
    SAPB1.UnitOfMeasurementParams = UnitOfMeasurementParams;
    var BinLocationField = (function () {
        function BinLocationField() {
        }
        return BinLocationField;
    }());
    SAPB1.BinLocationField = BinLocationField;
    var BinLocationFieldKey = (function () {
        function BinLocationFieldKey() {
        }
        return BinLocationFieldKey;
    }());
    SAPB1.BinLocationFieldKey = BinLocationFieldKey;
    var BinLocationFieldParams = (function () {
        function BinLocationFieldParams() {
        }
        return BinLocationFieldParams;
    }());
    SAPB1.BinLocationFieldParams = BinLocationFieldParams;
    var BinLocationAttribute = (function () {
        function BinLocationAttribute() {
        }
        return BinLocationAttribute;
    }());
    SAPB1.BinLocationAttribute = BinLocationAttribute;
    var BinLocationAttributeKey = (function () {
        function BinLocationAttributeKey() {
        }
        return BinLocationAttributeKey;
    }());
    SAPB1.BinLocationAttributeKey = BinLocationAttributeKey;
    var BinLocationAttributeParams = (function () {
        function BinLocationAttributeParams() {
        }
        return BinLocationAttributeParams;
    }());
    SAPB1.BinLocationAttributeParams = BinLocationAttributeParams;
    var WarehouseSublevelCode = (function () {
        function WarehouseSublevelCode() {
        }
        return WarehouseSublevelCode;
    }());
    SAPB1.WarehouseSublevelCode = WarehouseSublevelCode;
    var WarehouseSublevelCodeKey = (function () {
        function WarehouseSublevelCodeKey() {
        }
        return WarehouseSublevelCodeKey;
    }());
    SAPB1.WarehouseSublevelCodeKey = WarehouseSublevelCodeKey;
    var WarehouseSublevelCodeParams = (function () {
        function WarehouseSublevelCodeParams() {
        }
        return WarehouseSublevelCodeParams;
    }());
    SAPB1.WarehouseSublevelCodeParams = WarehouseSublevelCodeParams;
    var BinLocation = (function () {
        function BinLocation() {
        }
        return BinLocation;
    }());
    SAPB1.BinLocation = BinLocation;
    var BinLocationKey = (function () {
        function BinLocationKey() {
        }
        return BinLocationKey;
    }());
    SAPB1.BinLocationKey = BinLocationKey;
    var BinLocationParams = (function () {
        function BinLocationParams() {
        }
        return BinLocationParams;
    }());
    SAPB1.BinLocationParams = BinLocationParams;
    var Activity = (function () {
        function Activity() {
        }
        return Activity;
    }());
    SAPB1.Activity = Activity;
    var ActivityKey = (function () {
        function ActivityKey() {
        }
        return ActivityKey;
    }());
    SAPB1.ActivityKey = ActivityKey;
    var CheckInParams = (function () {
        function CheckInParams() {
        }
        return CheckInParams;
    }());
    SAPB1.CheckInParams = CheckInParams;
    var ActivityParams = (function () {
        function ActivityParams() {
        }
        return ActivityParams;
    }());
    SAPB1.ActivityParams = ActivityParams;
    var ActivityInstanceParams = (function () {
        function ActivityInstanceParams() {
        }
        return ActivityInstanceParams;
    }());
    SAPB1.ActivityInstanceParams = ActivityInstanceParams;
    var ActivityInstancesListParams = (function () {
        function ActivityInstancesListParams() {
        }
        return ActivityInstancesListParams;
    }());
    SAPB1.ActivityInstancesListParams = ActivityInstancesListParams;
    var SalesStage = (function () {
        function SalesStage() {
        }
        return SalesStage;
    }());
    SAPB1.SalesStage = SalesStage;
    var SalesStageKey = (function () {
        function SalesStageKey() {
        }
        return SalesStageKey;
    }());
    SAPB1.SalesStageKey = SalesStageKey;
    var SalesOpportunityReasonSetup = (function () {
        function SalesOpportunityReasonSetup() {
        }
        return SalesOpportunityReasonSetup;
    }());
    SAPB1.SalesOpportunityReasonSetup = SalesOpportunityReasonSetup;
    var SalesOpportunityReasonSetupKey = (function () {
        function SalesOpportunityReasonSetupKey() {
        }
        return SalesOpportunityReasonSetupKey;
    }());
    SAPB1.SalesOpportunityReasonSetupKey = SalesOpportunityReasonSetupKey;
    var SalesOpportunityReasonSetupParams = (function () {
        function SalesOpportunityReasonSetupParams() {
        }
        return SalesOpportunityReasonSetupParams;
    }());
    SAPB1.SalesOpportunityReasonSetupParams = SalesOpportunityReasonSetupParams;
    var ActivityType = (function () {
        function ActivityType() {
        }
        return ActivityType;
    }());
    SAPB1.ActivityType = ActivityType;
    var ActivityTypeKey = (function () {
        function ActivityTypeKey() {
        }
        return ActivityTypeKey;
    }());
    SAPB1.ActivityTypeKey = ActivityTypeKey;
    var ActivityLocation = (function () {
        function ActivityLocation() {
        }
        return ActivityLocation;
    }());
    SAPB1.ActivityLocation = ActivityLocation;
    var ActivityLocationKey = (function () {
        function ActivityLocationKey() {
        }
        return ActivityLocationKey;
    }());
    SAPB1.ActivityLocationKey = ActivityLocationKey;
    var PartnersSetup = (function () {
        function PartnersSetup() {
        }
        return PartnersSetup;
    }());
    SAPB1.PartnersSetup = PartnersSetup;
    var PartnersSetupParams = (function () {
        function PartnersSetupParams() {
        }
        return PartnersSetupParams;
    }());
    SAPB1.PartnersSetupParams = PartnersSetupParams;
    var PartnersSetupParamsKey = (function () {
        function PartnersSetupParamsKey() {
        }
        return PartnersSetupParamsKey;
    }());
    SAPB1.PartnersSetupParamsKey = PartnersSetupParamsKey;
    var SalesOpportunityCompetitorSetup = (function () {
        function SalesOpportunityCompetitorSetup() {
        }
        return SalesOpportunityCompetitorSetup;
    }());
    SAPB1.SalesOpportunityCompetitorSetup = SalesOpportunityCompetitorSetup;
    var SalesOpportunityCompetitorSetupKey = (function () {
        function SalesOpportunityCompetitorSetupKey() {
        }
        return SalesOpportunityCompetitorSetupKey;
    }());
    SAPB1.SalesOpportunityCompetitorSetupKey = SalesOpportunityCompetitorSetupKey;
    var SalesOpportunityCompetitorSetupParams = (function () {
        function SalesOpportunityCompetitorSetupParams() {
        }
        return SalesOpportunityCompetitorSetupParams;
    }());
    SAPB1.SalesOpportunityCompetitorSetupParams = SalesOpportunityCompetitorSetupParams;
    var DocumentParams = (function () {
        function DocumentParams() {
        }
        return DocumentParams;
    }());
    SAPB1.DocumentParams = DocumentParams;
    var Document = (function () {
        function Document() {
        }
        return Document;
    }());
    SAPB1.Document = Document;
    var DocumentKey = (function () {
        function DocumentKey() {
        }
        return DocumentKey;
    }());
    SAPB1.DocumentKey = DocumentKey;
    var Document_ApprovalRequest = (function () {
        function Document_ApprovalRequest() {
        }
        return Document_ApprovalRequest;
    }());
    SAPB1.Document_ApprovalRequest = Document_ApprovalRequest;
    var DocumentLine = (function () {
        function DocumentLine() {
        }
        return DocumentLine;
    }());
    SAPB1.DocumentLine = DocumentLine;
    var LineTaxJurisdiction = (function () {
        function LineTaxJurisdiction() {
        }
        return LineTaxJurisdiction;
    }());
    SAPB1.LineTaxJurisdiction = LineTaxJurisdiction;
    var GeneratedAsset = (function () {
        function GeneratedAsset() {
        }
        return GeneratedAsset;
    }());
    SAPB1.GeneratedAsset = GeneratedAsset;
    var DocumentLineAdditionalExpense = (function () {
        function DocumentLineAdditionalExpense() {
        }
        return DocumentLineAdditionalExpense;
    }());
    SAPB1.DocumentLineAdditionalExpense = DocumentLineAdditionalExpense;
    var LineExpenseTaxJurisdiction = (function () {
        function LineExpenseTaxJurisdiction() {
        }
        return LineExpenseTaxJurisdiction;
    }());
    SAPB1.LineExpenseTaxJurisdiction = LineExpenseTaxJurisdiction;
    var WithholdingTaxLine = (function () {
        function WithholdingTaxLine() {
        }
        return WithholdingTaxLine;
    }());
    SAPB1.WithholdingTaxLine = WithholdingTaxLine;
    var SerialNumber = (function () {
        function SerialNumber() {
        }
        return SerialNumber;
    }());
    SAPB1.SerialNumber = SerialNumber;
    var BatchNumber = (function () {
        function BatchNumber() {
        }
        return BatchNumber;
    }());
    SAPB1.BatchNumber = BatchNumber;
    var DocumentLinesBinAllocation = (function () {
        function DocumentLinesBinAllocation() {
        }
        return DocumentLinesBinAllocation;
    }());
    SAPB1.DocumentLinesBinAllocation = DocumentLinesBinAllocation;
    var DocumentAdditionalExpense = (function () {
        function DocumentAdditionalExpense() {
        }
        return DocumentAdditionalExpense;
    }());
    SAPB1.DocumentAdditionalExpense = DocumentAdditionalExpense;
    var DocExpenseTaxJurisdiction = (function () {
        function DocExpenseTaxJurisdiction() {
        }
        return DocExpenseTaxJurisdiction;
    }());
    SAPB1.DocExpenseTaxJurisdiction = DocExpenseTaxJurisdiction;
    var WithholdingTaxDataWTX = (function () {
        function WithholdingTaxDataWTX() {
        }
        return WithholdingTaxDataWTX;
    }());
    SAPB1.WithholdingTaxDataWTX = WithholdingTaxDataWTX;
    var WithholdingTaxData = (function () {
        function WithholdingTaxData() {
        }
        return WithholdingTaxData;
    }());
    SAPB1.WithholdingTaxData = WithholdingTaxData;
    var DocumentPackage = (function () {
        function DocumentPackage() {
        }
        return DocumentPackage;
    }());
    SAPB1.DocumentPackage = DocumentPackage;
    var DocumentPackageItem = (function () {
        function DocumentPackageItem() {
        }
        return DocumentPackageItem;
    }());
    SAPB1.DocumentPackageItem = DocumentPackageItem;
    var DocumentSpecialLine = (function () {
        function DocumentSpecialLine() {
        }
        return DocumentSpecialLine;
    }());
    SAPB1.DocumentSpecialLine = DocumentSpecialLine;
    var DocumentInstallment = (function () {
        function DocumentInstallment() {
        }
        return DocumentInstallment;
    }());
    SAPB1.DocumentInstallment = DocumentInstallment;
    var DownPaymentToDraw = (function () {
        function DownPaymentToDraw() {
        }
        return DownPaymentToDraw;
    }());
    SAPB1.DownPaymentToDraw = DownPaymentToDraw;
    var DownPaymentToDrawDetails = (function () {
        function DownPaymentToDrawDetails() {
        }
        return DownPaymentToDrawDetails;
    }());
    SAPB1.DownPaymentToDrawDetails = DownPaymentToDrawDetails;
    var TaxExtension = (function () {
        function TaxExtension() {
        }
        return TaxExtension;
    }());
    SAPB1.TaxExtension = TaxExtension;
    var AddressExtension = (function () {
        function AddressExtension() {
        }
        return AddressExtension;
    }());
    SAPB1.AddressExtension = AddressExtension;
    var DeductionTaxHierarchy = (function () {
        function DeductionTaxHierarchy() {
        }
        return DeductionTaxHierarchy;
    }());
    SAPB1.DeductionTaxHierarchy = DeductionTaxHierarchy;
    var DeductionTaxHierarchyKey = (function () {
        function DeductionTaxHierarchyKey() {
        }
        return DeductionTaxHierarchyKey;
    }());
    SAPB1.DeductionTaxHierarchyKey = DeductionTaxHierarchyKey;
    var DeductionTaxHierarchies_Line = (function () {
        function DeductionTaxHierarchies_Line() {
        }
        return DeductionTaxHierarchies_Line;
    }());
    SAPB1.DeductionTaxHierarchies_Line = DeductionTaxHierarchies_Line;
    var TaxWebSite = (function () {
        function TaxWebSite() {
        }
        return TaxWebSite;
    }());
    SAPB1.TaxWebSite = TaxWebSite;
    var TaxWebSiteKey = (function () {
        function TaxWebSiteKey() {
        }
        return TaxWebSiteKey;
    }());
    SAPB1.TaxWebSiteKey = TaxWebSiteKey;
    var TaxWebSiteParams = (function () {
        function TaxWebSiteParams() {
        }
        return TaxWebSiteParams;
    }());
    SAPB1.TaxWebSiteParams = TaxWebSiteParams;
    var DeductionTaxGroupParams = (function () {
        function DeductionTaxGroupParams() {
        }
        return DeductionTaxGroupParams;
    }());
    SAPB1.DeductionTaxGroupParams = DeductionTaxGroupParams;
    var DeductionTaxGroup = (function () {
        function DeductionTaxGroup() {
        }
        return DeductionTaxGroup;
    }());
    SAPB1.DeductionTaxGroup = DeductionTaxGroup;
    var DeductionTaxGroupKey = (function () {
        function DeductionTaxGroupKey() {
        }
        return DeductionTaxGroupKey;
    }());
    SAPB1.DeductionTaxGroupKey = DeductionTaxGroupKey;
    var StockTransferParams = (function () {
        function StockTransferParams() {
        }
        return StockTransferParams;
    }());
    SAPB1.StockTransferParams = StockTransferParams;
    var StockTransfer = (function () {
        function StockTransfer() {
        }
        return StockTransfer;
    }());
    SAPB1.StockTransfer = StockTransfer;
    var StockTransferKey = (function () {
        function StockTransferKey() {
        }
        return StockTransferKey;
    }());
    SAPB1.StockTransferKey = StockTransferKey;
    var StockTransfer_ApprovalRequest = (function () {
        function StockTransfer_ApprovalRequest() {
        }
        return StockTransfer_ApprovalRequest;
    }());
    SAPB1.StockTransfer_ApprovalRequest = StockTransfer_ApprovalRequest;
    var StockTransferLine = (function () {
        function StockTransferLine() {
        }
        return StockTransferLine;
    }());
    SAPB1.StockTransferLine = StockTransferLine;
    var StockTransferLinesBinAllocation = (function () {
        function StockTransferLinesBinAllocation() {
        }
        return StockTransferLinesBinAllocation;
    }());
    SAPB1.StockTransferLinesBinAllocation = StockTransferLinesBinAllocation;
    var StockTransferTaxExtension = (function () {
        function StockTransferTaxExtension() {
        }
        return StockTransferTaxExtension;
    }());
    SAPB1.StockTransferTaxExtension = StockTransferTaxExtension;
    var Branch = (function () {
        function Branch() {
        }
        return Branch;
    }());
    SAPB1.Branch = Branch;
    var BranchKey = (function () {
        function BranchKey() {
        }
        return BranchKey;
    }());
    SAPB1.BranchKey = BranchKey;
    var BranchParams = (function () {
        function BranchParams() {
        }
        return BranchParams;
    }());
    SAPB1.BranchParams = BranchParams;
    var Department = (function () {
        function Department() {
        }
        return Department;
    }());
    SAPB1.Department = Department;
    var DepartmentKey = (function () {
        function DepartmentKey() {
        }
        return DepartmentKey;
    }());
    SAPB1.DepartmentKey = DepartmentKey;
    var DepartmentParams = (function () {
        function DepartmentParams() {
        }
        return DepartmentParams;
    }());
    SAPB1.DepartmentParams = DepartmentParams;
    var UserParams = (function () {
        function UserParams() {
        }
        return UserParams;
    }());
    SAPB1.UserParams = UserParams;
    var User = (function () {
        function User() {
        }
        return User;
    }());
    SAPB1.User = User;
    var UserKey = (function () {
        function UserKey() {
        }
        return UserKey;
    }());
    SAPB1.UserKey = UserKey;
    var UserPermissionItem = (function () {
        function UserPermissionItem() {
        }
        return UserPermissionItem;
    }());
    SAPB1.UserPermissionItem = UserPermissionItem;
    var UserActionRecordItem = (function () {
        function UserActionRecordItem() {
        }
        return UserActionRecordItem;
    }());
    SAPB1.UserActionRecordItem = UserActionRecordItem;
    var UserBranchAssignmentItem = (function () {
        function UserBranchAssignmentItem() {
        }
        return UserBranchAssignmentItem;
    }());
    SAPB1.UserBranchAssignmentItem = UserBranchAssignmentItem;
    var ApprovalStage = (function () {
        function ApprovalStage() {
        }
        return ApprovalStage;
    }());
    SAPB1.ApprovalStage = ApprovalStage;
    var ApprovalStageKey = (function () {
        function ApprovalStageKey() {
        }
        return ApprovalStageKey;
    }());
    SAPB1.ApprovalStageKey = ApprovalStageKey;
    var ApprovalStageApprover = (function () {
        function ApprovalStageApprover() {
        }
        return ApprovalStageApprover;
    }());
    SAPB1.ApprovalStageApprover = ApprovalStageApprover;
    var ApprovalStageParams = (function () {
        function ApprovalStageParams() {
        }
        return ApprovalStageParams;
    }());
    SAPB1.ApprovalStageParams = ApprovalStageParams;
    var ApprovalTemplate = (function () {
        function ApprovalTemplate() {
        }
        return ApprovalTemplate;
    }());
    SAPB1.ApprovalTemplate = ApprovalTemplate;
    var ApprovalTemplateKey = (function () {
        function ApprovalTemplateKey() {
        }
        return ApprovalTemplateKey;
    }());
    SAPB1.ApprovalTemplateKey = ApprovalTemplateKey;
    var ApprovalTemplateUser = (function () {
        function ApprovalTemplateUser() {
        }
        return ApprovalTemplateUser;
    }());
    SAPB1.ApprovalTemplateUser = ApprovalTemplateUser;
    var ApprovalTemplateStage = (function () {
        function ApprovalTemplateStage() {
        }
        return ApprovalTemplateStage;
    }());
    SAPB1.ApprovalTemplateStage = ApprovalTemplateStage;
    var ApprovalTemplateDocument = (function () {
        function ApprovalTemplateDocument() {
        }
        return ApprovalTemplateDocument;
    }());
    SAPB1.ApprovalTemplateDocument = ApprovalTemplateDocument;
    var ApprovalTemplateTerm = (function () {
        function ApprovalTemplateTerm() {
        }
        return ApprovalTemplateTerm;
    }());
    SAPB1.ApprovalTemplateTerm = ApprovalTemplateTerm;
    var ApprovalTemplateQuery = (function () {
        function ApprovalTemplateQuery() {
        }
        return ApprovalTemplateQuery;
    }());
    SAPB1.ApprovalTemplateQuery = ApprovalTemplateQuery;
    var ApprovalTemplateParams = (function () {
        function ApprovalTemplateParams() {
        }
        return ApprovalTemplateParams;
    }());
    SAPB1.ApprovalTemplateParams = ApprovalTemplateParams;
    var Cockpit = (function () {
        function Cockpit() {
        }
        return Cockpit;
    }());
    SAPB1.Cockpit = Cockpit;
    var CockpitKey = (function () {
        function CockpitKey() {
        }
        return CockpitKey;
    }());
    SAPB1.CockpitKey = CockpitKey;
    var CockpitParams = (function () {
        function CockpitParams() {
        }
        return CockpitParams;
    }());
    SAPB1.CockpitParams = CockpitParams;
    var ApprovalRequest = (function () {
        function ApprovalRequest() {
        }
        return ApprovalRequest;
    }());
    SAPB1.ApprovalRequest = ApprovalRequest;
    var ApprovalRequestKey = (function () {
        function ApprovalRequestKey() {
        }
        return ApprovalRequestKey;
    }());
    SAPB1.ApprovalRequestKey = ApprovalRequestKey;
    var ApprovalRequestLine = (function () {
        function ApprovalRequestLine() {
        }
        return ApprovalRequestLine;
    }());
    SAPB1.ApprovalRequestLine = ApprovalRequestLine;
    var ApprovalRequestDecision = (function () {
        function ApprovalRequestDecision() {
        }
        return ApprovalRequestDecision;
    }());
    SAPB1.ApprovalRequestDecision = ApprovalRequestDecision;
    var ApprovalRequestParams = (function () {
        function ApprovalRequestParams() {
        }
        return ApprovalRequestParams;
    }());
    SAPB1.ApprovalRequestParams = ApprovalRequestParams;
    var AdditionalExpense = (function () {
        function AdditionalExpense() {
        }
        return AdditionalExpense;
    }());
    SAPB1.AdditionalExpense = AdditionalExpense;
    var AdditionalExpenseKey = (function () {
        function AdditionalExpenseKey() {
        }
        return AdditionalExpenseKey;
    }());
    SAPB1.AdditionalExpenseKey = AdditionalExpenseKey;
    var BlanketAgreement = (function () {
        function BlanketAgreement() {
        }
        return BlanketAgreement;
    }());
    SAPB1.BlanketAgreement = BlanketAgreement;
    var BlanketAgreementKey = (function () {
        function BlanketAgreementKey() {
        }
        return BlanketAgreementKey;
    }());
    SAPB1.BlanketAgreementKey = BlanketAgreementKey;
    var BlanketAgreements_ItemsLine = (function () {
        function BlanketAgreements_ItemsLine() {
        }
        return BlanketAgreements_ItemsLine;
    }());
    SAPB1.BlanketAgreements_ItemsLine = BlanketAgreements_ItemsLine;
    var BlanketAgreements_DetailsLine = (function () {
        function BlanketAgreements_DetailsLine() {
        }
        return BlanketAgreements_DetailsLine;
    }());
    SAPB1.BlanketAgreements_DetailsLine = BlanketAgreements_DetailsLine;
    var BlanketAgreementsDocument = (function () {
        function BlanketAgreementsDocument() {
        }
        return BlanketAgreementsDocument;
    }());
    SAPB1.BlanketAgreementsDocument = BlanketAgreementsDocument;
    var BlanketAgreementParams = (function () {
        function BlanketAgreementParams() {
        }
        return BlanketAgreementParams;
    }());
    SAPB1.BlanketAgreementParams = BlanketAgreementParams;
    var SalesTaxAuthorityParams = (function () {
        function SalesTaxAuthorityParams() {
        }
        return SalesTaxAuthorityParams;
    }());
    SAPB1.SalesTaxAuthorityParams = SalesTaxAuthorityParams;
    var SalesTaxAuthority = (function () {
        function SalesTaxAuthority() {
        }
        return SalesTaxAuthority;
    }());
    SAPB1.SalesTaxAuthority = SalesTaxAuthority;
    var SalesTaxAuthorityKey = (function () {
        function SalesTaxAuthorityKey() {
        }
        return SalesTaxAuthorityKey;
    }());
    SAPB1.SalesTaxAuthorityKey = SalesTaxAuthorityKey;
    var TaxDefinition = (function () {
        function TaxDefinition() {
        }
        return TaxDefinition;
    }());
    SAPB1.TaxDefinition = TaxDefinition;
    var SalesTaxAuthoritiesType = (function () {
        function SalesTaxAuthoritiesType() {
        }
        return SalesTaxAuthoritiesType;
    }());
    SAPB1.SalesTaxAuthoritiesType = SalesTaxAuthoritiesType;
    var SalesTaxAuthoritiesTypeKey = (function () {
        function SalesTaxAuthoritiesTypeKey() {
        }
        return SalesTaxAuthoritiesTypeKey;
    }());
    SAPB1.SalesTaxAuthoritiesTypeKey = SalesTaxAuthoritiesTypeKey;
    var SalesTaxCode = (function () {
        function SalesTaxCode() {
        }
        return SalesTaxCode;
    }());
    SAPB1.SalesTaxCode = SalesTaxCode;
    var SalesTaxCodeKey = (function () {
        function SalesTaxCodeKey() {
        }
        return SalesTaxCodeKey;
    }());
    SAPB1.SalesTaxCodeKey = SalesTaxCodeKey;
    var SalesTaxCodes_Line = (function () {
        function SalesTaxCodes_Line() {
        }
        return SalesTaxCodes_Line;
    }());
    SAPB1.SalesTaxCodes_Line = SalesTaxCodes_Line;
    var Country = (function () {
        function Country() {
        }
        return Country;
    }());
    SAPB1.Country = Country;
    var CountryKey = (function () {
        function CountryKey() {
        }
        return CountryKey;
    }());
    SAPB1.CountryKey = CountryKey;
    var CountryParams = (function () {
        function CountryParams() {
        }
        return CountryParams;
    }());
    SAPB1.CountryParams = CountryParams;
    var State = (function () {
        function State() {
        }
        return State;
    }());
    SAPB1.State = State;
    var StateKey = (function () {
        function StateKey() {
        }
        return StateKey;
    }());
    SAPB1.StateKey = StateKey;
    var StateParams = (function () {
        function StateParams() {
        }
        return StateParams;
    }());
    SAPB1.StateParams = StateParams;
    var GetChangeLogParams = (function () {
        function GetChangeLogParams() {
        }
        return GetChangeLogParams;
    }());
    SAPB1.GetChangeLogParams = GetChangeLogParams;
    var ShowDifferenceParams = (function () {
        function ShowDifferenceParams() {
        }
        return ShowDifferenceParams;
    }());
    SAPB1.ShowDifferenceParams = ShowDifferenceParams;
    var ChangeLogParams = (function () {
        function ChangeLogParams() {
        }
        return ChangeLogParams;
    }());
    SAPB1.ChangeLogParams = ChangeLogParams;
    var ChangeLogDifferenceParams = (function () {
        function ChangeLogDifferenceParams() {
        }
        return ChangeLogDifferenceParams;
    }());
    SAPB1.ChangeLogDifferenceParams = ChangeLogDifferenceParams;
    var KPI = (function () {
        function KPI() {
        }
        return KPI;
    }());
    SAPB1.KPI = KPI;
    var KPIKey = (function () {
        function KPIKey() {
        }
        return KPIKey;
    }());
    SAPB1.KPIKey = KPIKey;
    var KPI_ItemLine = (function () {
        function KPI_ItemLine() {
        }
        return KPI_ItemLine;
    }());
    SAPB1.KPI_ItemLine = KPI_ItemLine;
    var KPIParams = (function () {
        function KPIParams() {
        }
        return KPIParams;
    }());
    SAPB1.KPIParams = KPIParams;
    var TargetGroup = (function () {
        function TargetGroup() {
        }
        return TargetGroup;
    }());
    SAPB1.TargetGroup = TargetGroup;
    var TargetGroupKey = (function () {
        function TargetGroupKey() {
        }
        return TargetGroupKey;
    }());
    SAPB1.TargetGroupKey = TargetGroupKey;
    var TargetGroupsDetail = (function () {
        function TargetGroupsDetail() {
        }
        return TargetGroupsDetail;
    }());
    SAPB1.TargetGroupsDetail = TargetGroupsDetail;
    var TargetGroupParams = (function () {
        function TargetGroupParams() {
        }
        return TargetGroupParams;
    }());
    SAPB1.TargetGroupParams = TargetGroupParams;
    var ExtendedTranslation = (function () {
        function ExtendedTranslation() {
        }
        return ExtendedTranslation;
    }());
    SAPB1.ExtendedTranslation = ExtendedTranslation;
    var ExtendedTranslationKey = (function () {
        function ExtendedTranslationKey() {
        }
        return ExtendedTranslationKey;
    }());
    SAPB1.ExtendedTranslationKey = ExtendedTranslationKey;
    var ExtendedTranslation_ItemLine = (function () {
        function ExtendedTranslation_ItemLine() {
        }
        return ExtendedTranslation_ItemLine;
    }());
    SAPB1.ExtendedTranslation_ItemLine = ExtendedTranslation_ItemLine;
    var ExtendedTranslation_ResultLine = (function () {
        function ExtendedTranslation_ResultLine() {
        }
        return ExtendedTranslation_ResultLine;
    }());
    SAPB1.ExtendedTranslation_ResultLine = ExtendedTranslation_ResultLine;
    var ExtendedTranslationParams = (function () {
        function ExtendedTranslationParams() {
        }
        return ExtendedTranslationParams;
    }());
    SAPB1.ExtendedTranslationParams = ExtendedTranslationParams;
    var Campaign = (function () {
        function Campaign() {
        }
        return Campaign;
    }());
    SAPB1.Campaign = Campaign;
    var CampaignKey = (function () {
        function CampaignKey() {
        }
        return CampaignKey;
    }());
    SAPB1.CampaignKey = CampaignKey;
    var CampaignBusinessPartner = (function () {
        function CampaignBusinessPartner() {
        }
        return CampaignBusinessPartner;
    }());
    SAPB1.CampaignBusinessPartner = CampaignBusinessPartner;
    var CampaignItem = (function () {
        function CampaignItem() {
        }
        return CampaignItem;
    }());
    SAPB1.CampaignItem = CampaignItem;
    var CampaignPartner = (function () {
        function CampaignPartner() {
        }
        return CampaignPartner;
    }());
    SAPB1.CampaignPartner = CampaignPartner;
    var CampaignParams = (function () {
        function CampaignParams() {
        }
        return CampaignParams;
    }());
    SAPB1.CampaignParams = CampaignParams;
    var RetornoCode = (function () {
        function RetornoCode() {
        }
        return RetornoCode;
    }());
    SAPB1.RetornoCode = RetornoCode;
    var RetornoCodeKey = (function () {
        function RetornoCodeKey() {
        }
        return RetornoCodeKey;
    }());
    SAPB1.RetornoCodeKey = RetornoCodeKey;
    var RetornoCodeParams = (function () {
        function RetornoCodeParams() {
        }
        return RetornoCodeParams;
    }());
    SAPB1.RetornoCodeParams = RetornoCodeParams;
    var OccurenceCode = (function () {
        function OccurenceCode() {
        }
        return OccurenceCode;
    }());
    SAPB1.OccurenceCode = OccurenceCode;
    var OccurenceCodeKey = (function () {
        function OccurenceCodeKey() {
        }
        return OccurenceCodeKey;
    }());
    SAPB1.OccurenceCodeKey = OccurenceCodeKey;
    var OccurenceCodeParams = (function () {
        function OccurenceCodeParams() {
        }
        return OccurenceCodeParams;
    }());
    SAPB1.OccurenceCodeParams = OccurenceCodeParams;
    var CashDiscount = (function () {
        function CashDiscount() {
        }
        return CashDiscount;
    }());
    SAPB1.CashDiscount = CashDiscount;
    var CashDiscountKey = (function () {
        function CashDiscountKey() {
        }
        return CashDiscountKey;
    }());
    SAPB1.CashDiscountKey = CashDiscountKey;
    var DiscountLine = (function () {
        function DiscountLine() {
        }
        return DiscountLine;
    }());
    SAPB1.DiscountLine = DiscountLine;
    var CashDiscountParams = (function () {
        function CashDiscountParams() {
        }
        return CashDiscountParams;
    }());
    SAPB1.CashDiscountParams = CashDiscountParams;
    var QueryCategory = (function () {
        function QueryCategory() {
        }
        return QueryCategory;
    }());
    SAPB1.QueryCategory = QueryCategory;
    var QueryCategoryKey = (function () {
        function QueryCategoryKey() {
        }
        return QueryCategoryKey;
    }());
    SAPB1.QueryCategoryKey = QueryCategoryKey;
    var ResourceCapacity = (function () {
        function ResourceCapacity() {
        }
        return ResourceCapacity;
    }());
    SAPB1.ResourceCapacity = ResourceCapacity;
    var ResourceCapacityKey = (function () {
        function ResourceCapacityKey() {
        }
        return ResourceCapacityKey;
    }());
    SAPB1.ResourceCapacityKey = ResourceCapacityKey;
    var ResourceCapacityParams = (function () {
        function ResourceCapacityParams() {
        }
        return ResourceCapacityParams;
    }());
    SAPB1.ResourceCapacityParams = ResourceCapacityParams;
    var ResourceCapacityWithFilterParams = (function () {
        function ResourceCapacityWithFilterParams() {
        }
        return ResourceCapacityWithFilterParams;
    }());
    SAPB1.ResourceCapacityWithFilterParams = ResourceCapacityWithFilterParams;
    var FactoringIndicator = (function () {
        function FactoringIndicator() {
        }
        return FactoringIndicator;
    }());
    SAPB1.FactoringIndicator = FactoringIndicator;
    var FactoringIndicatorKey = (function () {
        function FactoringIndicatorKey() {
        }
        return FactoringIndicatorKey;
    }());
    SAPB1.FactoringIndicatorKey = FactoringIndicatorKey;
    var PaymentParams = (function () {
        function PaymentParams() {
        }
        return PaymentParams;
    }());
    SAPB1.PaymentParams = PaymentParams;
    var Payment = (function () {
        function Payment() {
        }
        return Payment;
    }());
    SAPB1.Payment = Payment;
    var PaymentKey = (function () {
        function PaymentKey() {
        }
        return PaymentKey;
    }());
    SAPB1.PaymentKey = PaymentKey;
    var PaymentCheck = (function () {
        function PaymentCheck() {
        }
        return PaymentCheck;
    }());
    SAPB1.PaymentCheck = PaymentCheck;
    var PaymentInvoice = (function () {
        function PaymentInvoice() {
        }
        return PaymentInvoice;
    }());
    SAPB1.PaymentInvoice = PaymentInvoice;
    var PaymentCreditCard = (function () {
        function PaymentCreditCard() {
        }
        return PaymentCreditCard;
    }());
    SAPB1.PaymentCreditCard = PaymentCreditCard;
    var PaymentAccount = (function () {
        function PaymentAccount() {
        }
        return PaymentAccount;
    }());
    SAPB1.PaymentAccount = PaymentAccount;
    var BillOfExchange = (function () {
        function BillOfExchange() {
        }
        return BillOfExchange;
    }());
    SAPB1.BillOfExchange = BillOfExchange;
    var WithholdingTaxCertificatesData = (function () {
        function WithholdingTaxCertificatesData() {
        }
        return WithholdingTaxCertificatesData;
    }());
    SAPB1.WithholdingTaxCertificatesData = WithholdingTaxCertificatesData;
    var WTGroups = (function () {
        function WTGroups() {
        }
        return WTGroups;
    }());
    SAPB1.WTGroups = WTGroups;
    var DocsInWTGroups = (function () {
        function DocsInWTGroups() {
        }
        return DocsInWTGroups;
    }());
    SAPB1.DocsInWTGroups = DocsInWTGroups;
    var CashFlowAssignment = (function () {
        function CashFlowAssignment() {
        }
        return CashFlowAssignment;
    }());
    SAPB1.CashFlowAssignment = CashFlowAssignment;
    var Payments_ApprovalRequest = (function () {
        function Payments_ApprovalRequest() {
        }
        return Payments_ApprovalRequest;
    }());
    SAPB1.Payments_ApprovalRequest = Payments_ApprovalRequest;
    var DNFCodeSetup = (function () {
        function DNFCodeSetup() {
        }
        return DNFCodeSetup;
    }());
    SAPB1.DNFCodeSetup = DNFCodeSetup;
    var DNFCodeSetupKey = (function () {
        function DNFCodeSetupKey() {
        }
        return DNFCodeSetupKey;
    }());
    SAPB1.DNFCodeSetupKey = DNFCodeSetupKey;
    var DNFCodeSetupParams = (function () {
        function DNFCodeSetupParams() {
        }
        return DNFCodeSetupParams;
    }());
    SAPB1.DNFCodeSetupParams = DNFCodeSetupParams;
    var AccountSegmentationParams = (function () {
        function AccountSegmentationParams() {
        }
        return AccountSegmentationParams;
    }());
    SAPB1.AccountSegmentationParams = AccountSegmentationParams;
    var AccountSegmentation = (function () {
        function AccountSegmentation() {
        }
        return AccountSegmentation;
    }());
    SAPB1.AccountSegmentation = AccountSegmentation;
    var AccountSegmentationKey = (function () {
        function AccountSegmentationKey() {
        }
        return AccountSegmentationKey;
    }());
    SAPB1.AccountSegmentationKey = AccountSegmentationKey;
    var AccountSegmentationsCategory = (function () {
        function AccountSegmentationsCategory() {
        }
        return AccountSegmentationsCategory;
    }());
    SAPB1.AccountSegmentationsCategory = AccountSegmentationsCategory;
    var AccountSegmentationCategory = (function () {
        function AccountSegmentationCategory() {
        }
        return AccountSegmentationCategory;
    }());
    SAPB1.AccountSegmentationCategory = AccountSegmentationCategory;
    var AccountSegmentationCategoryKey = (function () {
        function AccountSegmentationCategoryKey() {
        }
        return AccountSegmentationCategoryKey;
    }());
    SAPB1.AccountSegmentationCategoryKey = AccountSegmentationCategoryKey;
    var WarehouseLocation = (function () {
        function WarehouseLocation() {
        }
        return WarehouseLocation;
    }());
    SAPB1.WarehouseLocation = WarehouseLocation;
    var WarehouseLocationKey = (function () {
        function WarehouseLocationKey() {
        }
        return WarehouseLocationKey;
    }());
    SAPB1.WarehouseLocationKey = WarehouseLocationKey;
    var Forms1099 = (function () {
        function Forms1099() {
        }
        return Forms1099;
    }());
    SAPB1.Forms1099 = Forms1099;
    var Forms1099Key = (function () {
        function Forms1099Key() {
        }
        return Forms1099Key;
    }());
    SAPB1.Forms1099Key = Forms1099Key;
    var Boxes1099 = (function () {
        function Boxes1099() {
        }
        return Boxes1099;
    }());
    SAPB1.Boxes1099 = Boxes1099;
    var InventoryCycles = (function () {
        function InventoryCycles() {
        }
        return InventoryCycles;
    }());
    SAPB1.InventoryCycles = InventoryCycles;
    var InventoryCyclesKey = (function () {
        function InventoryCyclesKey() {
        }
        return InventoryCyclesKey;
    }());
    SAPB1.InventoryCyclesKey = InventoryCyclesKey;
    var InventoryCyclesParams = (function () {
        function InventoryCyclesParams() {
        }
        return InventoryCyclesParams;
    }());
    SAPB1.InventoryCyclesParams = InventoryCyclesParams;
    var WizardPaymentMethodParams = (function () {
        function WizardPaymentMethodParams() {
        }
        return WizardPaymentMethodParams;
    }());
    SAPB1.WizardPaymentMethodParams = WizardPaymentMethodParams;
    var WizardPaymentMethod = (function () {
        function WizardPaymentMethod() {
        }
        return WizardPaymentMethod;
    }());
    SAPB1.WizardPaymentMethod = WizardPaymentMethod;
    var WizardPaymentMethodKey = (function () {
        function WizardPaymentMethodKey() {
        }
        return WizardPaymentMethodKey;
    }());
    SAPB1.WizardPaymentMethodKey = WizardPaymentMethodKey;
    var CurrencyRestriction = (function () {
        function CurrencyRestriction() {
        }
        return CurrencyRestriction;
    }());
    SAPB1.CurrencyRestriction = CurrencyRestriction;
    var DepreciationType = (function () {
        function DepreciationType() {
        }
        return DepreciationType;
    }());
    SAPB1.DepreciationType = DepreciationType;
    var DepreciationTypeKey = (function () {
        function DepreciationTypeKey() {
        }
        return DepreciationTypeKey;
    }());
    SAPB1.DepreciationTypeKey = DepreciationTypeKey;
    var DepreciationLevel = (function () {
        function DepreciationLevel() {
        }
        return DepreciationLevel;
    }());
    SAPB1.DepreciationLevel = DepreciationLevel;
    var DepreciationTypeParams = (function () {
        function DepreciationTypeParams() {
        }
        return DepreciationTypeParams;
    }());
    SAPB1.DepreciationTypeParams = DepreciationTypeParams;
    var FAAccountDetermination = (function () {
        function FAAccountDetermination() {
        }
        return FAAccountDetermination;
    }());
    SAPB1.FAAccountDetermination = FAAccountDetermination;
    var FAAccountDeterminationKey = (function () {
        function FAAccountDeterminationKey() {
        }
        return FAAccountDeterminationKey;
    }());
    SAPB1.FAAccountDeterminationKey = FAAccountDeterminationKey;
    var FAAccountDeterminationParams = (function () {
        function FAAccountDeterminationParams() {
        }
        return FAAccountDeterminationParams;
    }());
    SAPB1.FAAccountDeterminationParams = FAAccountDeterminationParams;
    var DepreciationArea = (function () {
        function DepreciationArea() {
        }
        return DepreciationArea;
    }());
    SAPB1.DepreciationArea = DepreciationArea;
    var DepreciationAreaKey = (function () {
        function DepreciationAreaKey() {
        }
        return DepreciationAreaKey;
    }());
    SAPB1.DepreciationAreaKey = DepreciationAreaKey;
    var DepreciationAreaParams = (function () {
        function DepreciationAreaParams() {
        }
        return DepreciationAreaParams;
    }());
    SAPB1.DepreciationAreaParams = DepreciationAreaParams;
    var DepreciationTypePool = (function () {
        function DepreciationTypePool() {
        }
        return DepreciationTypePool;
    }());
    SAPB1.DepreciationTypePool = DepreciationTypePool;
    var DepreciationTypePoolKey = (function () {
        function DepreciationTypePoolKey() {
        }
        return DepreciationTypePoolKey;
    }());
    SAPB1.DepreciationTypePoolKey = DepreciationTypePoolKey;
    var DepreciationTypePoolParams = (function () {
        function DepreciationTypePoolParams() {
        }
        return DepreciationTypePoolParams;
    }());
    SAPB1.DepreciationTypePoolParams = DepreciationTypePoolParams;
    var AssetClass = (function () {
        function AssetClass() {
        }
        return AssetClass;
    }());
    SAPB1.AssetClass = AssetClass;
    var AssetClassKey = (function () {
        function AssetClassKey() {
        }
        return AssetClassKey;
    }());
    SAPB1.AssetClassKey = AssetClassKey;
    var AssetClassLine = (function () {
        function AssetClassLine() {
        }
        return AssetClassLine;
    }());
    SAPB1.AssetClassLine = AssetClassLine;
    var AssetClassParams = (function () {
        function AssetClassParams() {
        }
        return AssetClassParams;
    }());
    SAPB1.AssetClassParams = AssetClassParams;
    var IntrastatConfiguration = (function () {
        function IntrastatConfiguration() {
        }
        return IntrastatConfiguration;
    }());
    SAPB1.IntrastatConfiguration = IntrastatConfiguration;
    var IntrastatConfigurationKey = (function () {
        function IntrastatConfigurationKey() {
        }
        return IntrastatConfigurationKey;
    }());
    SAPB1.IntrastatConfigurationKey = IntrastatConfigurationKey;
    var IntrastatConfigurationParams = (function () {
        function IntrastatConfigurationParams() {
        }
        return IntrastatConfigurationParams;
    }());
    SAPB1.IntrastatConfigurationParams = IntrastatConfigurationParams;
    var AssetGroup = (function () {
        function AssetGroup() {
        }
        return AssetGroup;
    }());
    SAPB1.AssetGroup = AssetGroup;
    var AssetGroupKey = (function () {
        function AssetGroupKey() {
        }
        return AssetGroupKey;
    }());
    SAPB1.AssetGroupKey = AssetGroupKey;
    var AssetGroupParams = (function () {
        function AssetGroupParams() {
        }
        return AssetGroupParams;
    }());
    SAPB1.AssetGroupParams = AssetGroupParams;
    var DeterminationCriteria = (function () {
        function DeterminationCriteria() {
        }
        return DeterminationCriteria;
    }());
    SAPB1.DeterminationCriteria = DeterminationCriteria;
    var DeterminationCriteriaKey = (function () {
        function DeterminationCriteriaKey() {
        }
        return DeterminationCriteriaKey;
    }());
    SAPB1.DeterminationCriteriaKey = DeterminationCriteriaKey;
    var DeterminationCriteriaParams = (function () {
        function DeterminationCriteriaParams() {
        }
        return DeterminationCriteriaParams;
    }());
    SAPB1.DeterminationCriteriaParams = DeterminationCriteriaParams;
    var AssetDocument = (function () {
        function AssetDocument() {
        }
        return AssetDocument;
    }());
    SAPB1.AssetDocument = AssetDocument;
    var AssetDocumentKey = (function () {
        function AssetDocumentKey() {
        }
        return AssetDocumentKey;
    }());
    SAPB1.AssetDocumentKey = AssetDocumentKey;
    var AssetDocumentLine = (function () {
        function AssetDocumentLine() {
        }
        return AssetDocumentLine;
    }());
    SAPB1.AssetDocumentLine = AssetDocumentLine;
    var AssetDocumentAreaJournal = (function () {
        function AssetDocumentAreaJournal() {
        }
        return AssetDocumentAreaJournal;
    }());
    SAPB1.AssetDocumentAreaJournal = AssetDocumentAreaJournal;
    var AssetDocumentParams = (function () {
        function AssetDocumentParams() {
        }
        return AssetDocumentParams;
    }());
    SAPB1.AssetDocumentParams = AssetDocumentParams;
    var GLAccountAdvancedRule = (function () {
        function GLAccountAdvancedRule() {
        }
        return GLAccountAdvancedRule;
    }());
    SAPB1.GLAccountAdvancedRule = GLAccountAdvancedRule;
    var GLAccountAdvancedRuleKey = (function () {
        function GLAccountAdvancedRuleKey() {
        }
        return GLAccountAdvancedRuleKey;
    }());
    SAPB1.GLAccountAdvancedRuleKey = GLAccountAdvancedRuleKey;
    var GLAccountAdvancedRuleParams = (function () {
        function GLAccountAdvancedRuleParams() {
        }
        return GLAccountAdvancedRuleParams;
    }());
    SAPB1.GLAccountAdvancedRuleParams = GLAccountAdvancedRuleParams;
    var BarCode = (function () {
        function BarCode() {
        }
        return BarCode;
    }());
    SAPB1.BarCode = BarCode;
    var BarCodeKey = (function () {
        function BarCodeKey() {
        }
        return BarCodeKey;
    }());
    SAPB1.BarCodeKey = BarCodeKey;
    var BarCodeParams = (function () {
        function BarCodeParams() {
        }
        return BarCodeParams;
    }());
    SAPB1.BarCodeParams = BarCodeParams;
    var InventoryCounting = (function () {
        function InventoryCounting() {
        }
        return InventoryCounting;
    }());
    SAPB1.InventoryCounting = InventoryCounting;
    var InventoryCountingKey = (function () {
        function InventoryCountingKey() {
        }
        return InventoryCountingKey;
    }());
    SAPB1.InventoryCountingKey = InventoryCountingKey;
    var TeamCounter = (function () {
        function TeamCounter() {
        }
        return TeamCounter;
    }());
    SAPB1.TeamCounter = TeamCounter;
    var IndividualCounter = (function () {
        function IndividualCounter() {
        }
        return IndividualCounter;
    }());
    SAPB1.IndividualCounter = IndividualCounter;
    var InventoryCountingLine = (function () {
        function InventoryCountingLine() {
        }
        return InventoryCountingLine;
    }());
    SAPB1.InventoryCountingLine = InventoryCountingLine;
    var InventoryCountingLineUoM = (function () {
        function InventoryCountingLineUoM() {
        }
        return InventoryCountingLineUoM;
    }());
    SAPB1.InventoryCountingLineUoM = InventoryCountingLineUoM;
    var InventoryCountingSerialNumber = (function () {
        function InventoryCountingSerialNumber() {
        }
        return InventoryCountingSerialNumber;
    }());
    SAPB1.InventoryCountingSerialNumber = InventoryCountingSerialNumber;
    var InventoryCountingBatchNumber = (function () {
        function InventoryCountingBatchNumber() {
        }
        return InventoryCountingBatchNumber;
    }());
    SAPB1.InventoryCountingBatchNumber = InventoryCountingBatchNumber;
    var InventoryCountingParams = (function () {
        function InventoryCountingParams() {
        }
        return InventoryCountingParams;
    }());
    SAPB1.InventoryCountingParams = InventoryCountingParams;
    var EnhancedDiscountGroup = (function () {
        function EnhancedDiscountGroup() {
        }
        return EnhancedDiscountGroup;
    }());
    SAPB1.EnhancedDiscountGroup = EnhancedDiscountGroup;
    var EnhancedDiscountGroupKey = (function () {
        function EnhancedDiscountGroupKey() {
        }
        return EnhancedDiscountGroupKey;
    }());
    SAPB1.EnhancedDiscountGroupKey = EnhancedDiscountGroupKey;
    var DiscountGroupLine = (function () {
        function DiscountGroupLine() {
        }
        return DiscountGroupLine;
    }());
    SAPB1.DiscountGroupLine = DiscountGroupLine;
    var EnhancedDiscountGroupParams = (function () {
        function EnhancedDiscountGroupParams() {
        }
        return EnhancedDiscountGroupParams;
    }());
    SAPB1.EnhancedDiscountGroupParams = EnhancedDiscountGroupParams;
    var CycleCountDetermination = (function () {
        function CycleCountDetermination() {
        }
        return CycleCountDetermination;
    }());
    SAPB1.CycleCountDetermination = CycleCountDetermination;
    var CycleCountDeterminationKey = (function () {
        function CycleCountDeterminationKey() {
        }
        return CycleCountDeterminationKey;
    }());
    SAPB1.CycleCountDeterminationKey = CycleCountDeterminationKey;
    var CycleCountDeterminationSetup = (function () {
        function CycleCountDeterminationSetup() {
        }
        return CycleCountDeterminationSetup;
    }());
    SAPB1.CycleCountDeterminationSetup = CycleCountDeterminationSetup;
    var CycleCountDeterminationParams = (function () {
        function CycleCountDeterminationParams() {
        }
        return CycleCountDeterminationParams;
    }());
    SAPB1.CycleCountDeterminationParams = CycleCountDeterminationParams;
    var AssetDepreciationGroup = (function () {
        function AssetDepreciationGroup() {
        }
        return AssetDepreciationGroup;
    }());
    SAPB1.AssetDepreciationGroup = AssetDepreciationGroup;
    var AssetDepreciationGroupKey = (function () {
        function AssetDepreciationGroupKey() {
        }
        return AssetDepreciationGroupKey;
    }());
    SAPB1.AssetDepreciationGroupKey = AssetDepreciationGroupKey;
    var AssetDepreciationGroupParams = (function () {
        function AssetDepreciationGroupParams() {
        }
        return AssetDepreciationGroupParams;
    }());
    SAPB1.AssetDepreciationGroupParams = AssetDepreciationGroupParams;
    var AttributeGroup = (function () {
        function AttributeGroup() {
        }
        return AttributeGroup;
    }());
    SAPB1.AttributeGroup = AttributeGroup;
    var AttributeGroupKey = (function () {
        function AttributeGroupKey() {
        }
        return AttributeGroupKey;
    }());
    SAPB1.AttributeGroupKey = AttributeGroupKey;
    var AttributeGroupLine = (function () {
        function AttributeGroupLine() {
        }
        return AttributeGroupLine;
    }());
    SAPB1.AttributeGroupLine = AttributeGroupLine;
    var AttributeGroupParams = (function () {
        function AttributeGroupParams() {
        }
        return AttributeGroupParams;
    }());
    SAPB1.AttributeGroupParams = AttributeGroupParams;
    var IntegrationPackageConfigure = (function () {
        function IntegrationPackageConfigure() {
        }
        return IntegrationPackageConfigure;
    }());
    SAPB1.IntegrationPackageConfigure = IntegrationPackageConfigure;
    var IntegrationPackageConfigureKey = (function () {
        function IntegrationPackageConfigureKey() {
        }
        return IntegrationPackageConfigureKey;
    }());
    SAPB1.IntegrationPackageConfigureKey = IntegrationPackageConfigureKey;
    var IntegrationPackageParams = (function () {
        function IntegrationPackageParams() {
        }
        return IntegrationPackageParams;
    }());
    SAPB1.IntegrationPackageParams = IntegrationPackageParams;
    var BPPriority = (function () {
        function BPPriority() {
        }
        return BPPriority;
    }());
    SAPB1.BPPriority = BPPriority;
    var BPPriorityKey = (function () {
        function BPPriorityKey() {
        }
        return BPPriorityKey;
    }());
    SAPB1.BPPriorityKey = BPPriorityKey;
    var DunningLetter = (function () {
        function DunningLetter() {
        }
        return DunningLetter;
    }());
    SAPB1.DunningLetter = DunningLetter;
    var DunningLetterKey = (function () {
        function DunningLetterKey() {
        }
        return DunningLetterKey;
    }());
    SAPB1.DunningLetterKey = DunningLetterKey;
    var UserFieldMD = (function () {
        function UserFieldMD() {
        }
        return UserFieldMD;
    }());
    SAPB1.UserFieldMD = UserFieldMD;
    var UserFieldMDKey = (function () {
        function UserFieldMDKey() {
        }
        return UserFieldMDKey;
    }());
    SAPB1.UserFieldMDKey = UserFieldMDKey;
    var ValidValueMD = (function () {
        function ValidValueMD() {
        }
        return ValidValueMD;
    }());
    SAPB1.ValidValueMD = ValidValueMD;
    var UserFieldMDParams = (function () {
        function UserFieldMDParams() {
        }
        return UserFieldMDParams;
    }());
    SAPB1.UserFieldMDParams = UserFieldMDParams;
    var UserTablesMD = (function () {
        function UserTablesMD() {
        }
        return UserTablesMD;
    }());
    SAPB1.UserTablesMD = UserTablesMD;
    var UserTablesMDKey = (function () {
        function UserTablesMDKey() {
        }
        return UserTablesMDKey;
    }());
    SAPB1.UserTablesMDKey = UserTablesMDKey;
    var PickListParams = (function () {
        function PickListParams() {
        }
        return PickListParams;
    }());
    SAPB1.PickListParams = PickListParams;
    var PickList = (function () {
        function PickList() {
        }
        return PickList;
    }());
    SAPB1.PickList = PickList;
    var PickListKey = (function () {
        function PickListKey() {
        }
        return PickListKey;
    }());
    SAPB1.PickListKey = PickListKey;
    var PickListsLine = (function () {
        function PickListsLine() {
        }
        return PickListsLine;
    }());
    SAPB1.PickListsLine = PickListsLine;
    var EmployeeIDType = (function () {
        function EmployeeIDType() {
        }
        return EmployeeIDType;
    }());
    SAPB1.EmployeeIDType = EmployeeIDType;
    var EmployeeIDTypeKey = (function () {
        function EmployeeIDTypeKey() {
        }
        return EmployeeIDTypeKey;
    }());
    SAPB1.EmployeeIDTypeKey = EmployeeIDTypeKey;
    var EmployeeIDTypeParams = (function () {
        function EmployeeIDTypeParams() {
        }
        return EmployeeIDTypeParams;
    }());
    SAPB1.EmployeeIDTypeParams = EmployeeIDTypeParams;
    var JournalEntryDocumentType = (function () {
        function JournalEntryDocumentType() {
        }
        return JournalEntryDocumentType;
    }());
    SAPB1.JournalEntryDocumentType = JournalEntryDocumentType;
    var JournalEntryDocumentTypeKey = (function () {
        function JournalEntryDocumentTypeKey() {
        }
        return JournalEntryDocumentTypeKey;
    }());
    SAPB1.JournalEntryDocumentTypeKey = JournalEntryDocumentTypeKey;
    var JournalEntryDocumentTypeParams = (function () {
        function JournalEntryDocumentTypeParams() {
        }
        return JournalEntryDocumentTypeParams;
    }());
    SAPB1.JournalEntryDocumentTypeParams = JournalEntryDocumentTypeParams;
    var PaymentRunExport = (function () {
        function PaymentRunExport() {
        }
        return PaymentRunExport;
    }());
    SAPB1.PaymentRunExport = PaymentRunExport;
    var PaymentRunExportKey = (function () {
        function PaymentRunExportKey() {
        }
        return PaymentRunExportKey;
    }());
    SAPB1.PaymentRunExportKey = PaymentRunExportKey;
    var PaymentRunExport_Line = (function () {
        function PaymentRunExport_Line() {
        }
        return PaymentRunExport_Line;
    }());
    SAPB1.PaymentRunExport_Line = PaymentRunExport_Line;
    var PaymentBlock = (function () {
        function PaymentBlock() {
        }
        return PaymentBlock;
    }());
    SAPB1.PaymentBlock = PaymentBlock;
    var PaymentBlockKey = (function () {
        function PaymentBlockKey() {
        }
        return PaymentBlockKey;
    }());
    SAPB1.PaymentBlockKey = PaymentBlockKey;
    var PaymentBlockParams = (function () {
        function PaymentBlockParams() {
        }
        return PaymentBlockParams;
    }());
    SAPB1.PaymentBlockParams = PaymentBlockParams;
    var UserQuery = (function () {
        function UserQuery() {
        }
        return UserQuery;
    }());
    SAPB1.UserQuery = UserQuery;
    var UserQueryKey = (function () {
        function UserQueryKey() {
        }
        return UserQueryKey;
    }());
    SAPB1.UserQueryKey = UserQueryKey;
    var MaterialRevaluationParams = (function () {
        function MaterialRevaluationParams() {
        }
        return MaterialRevaluationParams;
    }());
    SAPB1.MaterialRevaluationParams = MaterialRevaluationParams;
    var MaterialRevaluation = (function () {
        function MaterialRevaluation() {
        }
        return MaterialRevaluation;
    }());
    SAPB1.MaterialRevaluation = MaterialRevaluation;
    var MaterialRevaluationKey = (function () {
        function MaterialRevaluationKey() {
        }
        return MaterialRevaluationKey;
    }());
    SAPB1.MaterialRevaluationKey = MaterialRevaluationKey;
    var MaterialRevaluationLine = (function () {
        function MaterialRevaluationLine() {
        }
        return MaterialRevaluationLine;
    }());
    SAPB1.MaterialRevaluationLine = MaterialRevaluationLine;
    var FIFOLayer = (function () {
        function FIFOLayer() {
        }
        return FIFOLayer;
    }());
    SAPB1.FIFOLayer = FIFOLayer;
    var SNBLines = (function () {
        function SNBLines() {
        }
        return SNBLines;
    }());
    SAPB1.SNBLines = SNBLines;
    var ServiceCallStatus = (function () {
        function ServiceCallStatus() {
        }
        return ServiceCallStatus;
    }());
    SAPB1.ServiceCallStatus = ServiceCallStatus;
    var ServiceCallStatusKey = (function () {
        function ServiceCallStatusKey() {
        }
        return ServiceCallStatusKey;
    }());
    SAPB1.ServiceCallStatusKey = ServiceCallStatusKey;
    var ServiceCallStatusParams = (function () {
        function ServiceCallStatusParams() {
        }
        return ServiceCallStatusParams;
    }());
    SAPB1.ServiceCallStatusParams = ServiceCallStatusParams;
    var ServiceCallType = (function () {
        function ServiceCallType() {
        }
        return ServiceCallType;
    }());
    SAPB1.ServiceCallType = ServiceCallType;
    var ServiceCallTypeKey = (function () {
        function ServiceCallTypeKey() {
        }
        return ServiceCallTypeKey;
    }());
    SAPB1.ServiceCallTypeKey = ServiceCallTypeKey;
    var ServiceCallTypeParams = (function () {
        function ServiceCallTypeParams() {
        }
        return ServiceCallTypeParams;
    }());
    SAPB1.ServiceCallTypeParams = ServiceCallTypeParams;
    var ServiceCallProblemType = (function () {
        function ServiceCallProblemType() {
        }
        return ServiceCallProblemType;
    }());
    SAPB1.ServiceCallProblemType = ServiceCallProblemType;
    var ServiceCallProblemTypeKey = (function () {
        function ServiceCallProblemTypeKey() {
        }
        return ServiceCallProblemTypeKey;
    }());
    SAPB1.ServiceCallProblemTypeKey = ServiceCallProblemTypeKey;
    var ServiceCallProblemTypeParams = (function () {
        function ServiceCallProblemTypeParams() {
        }
        return ServiceCallProblemTypeParams;
    }());
    SAPB1.ServiceCallProblemTypeParams = ServiceCallProblemTypeParams;
    var ContractTemplate = (function () {
        function ContractTemplate() {
        }
        return ContractTemplate;
    }());
    SAPB1.ContractTemplate = ContractTemplate;
    var ContractTemplateKey = (function () {
        function ContractTemplateKey() {
        }
        return ContractTemplateKey;
    }());
    SAPB1.ContractTemplateKey = ContractTemplateKey;
    var EmployeeInfoParams = (function () {
        function EmployeeInfoParams() {
        }
        return EmployeeInfoParams;
    }());
    SAPB1.EmployeeInfoParams = EmployeeInfoParams;
    var EmployeeInfo = (function () {
        function EmployeeInfo() {
        }
        return EmployeeInfo;
    }());
    SAPB1.EmployeeInfo = EmployeeInfo;
    var EmployeeInfoKey = (function () {
        function EmployeeInfoKey() {
        }
        return EmployeeInfoKey;
    }());
    SAPB1.EmployeeInfoKey = EmployeeInfoKey;
    var EmployeeAbsenceInfo = (function () {
        function EmployeeAbsenceInfo() {
        }
        return EmployeeAbsenceInfo;
    }());
    SAPB1.EmployeeAbsenceInfo = EmployeeAbsenceInfo;
    var EmployeeEducationInfo = (function () {
        function EmployeeEducationInfo() {
        }
        return EmployeeEducationInfo;
    }());
    SAPB1.EmployeeEducationInfo = EmployeeEducationInfo;
    var EmployeeReviewsInfo = (function () {
        function EmployeeReviewsInfo() {
        }
        return EmployeeReviewsInfo;
    }());
    SAPB1.EmployeeReviewsInfo = EmployeeReviewsInfo;
    var EmployeePreviousEmpoymentInfo = (function () {
        function EmployeePreviousEmpoymentInfo() {
        }
        return EmployeePreviousEmpoymentInfo;
    }());
    SAPB1.EmployeePreviousEmpoymentInfo = EmployeePreviousEmpoymentInfo;
    var EmployeeRolesInfo = (function () {
        function EmployeeRolesInfo() {
        }
        return EmployeeRolesInfo;
    }());
    SAPB1.EmployeeRolesInfo = EmployeeRolesInfo;
    var EmployeeSavingsPaymentInfo = (function () {
        function EmployeeSavingsPaymentInfo() {
        }
        return EmployeeSavingsPaymentInfo;
    }());
    SAPB1.EmployeeSavingsPaymentInfo = EmployeeSavingsPaymentInfo;
    var EmployeeBranchAssignmentItem = (function () {
        function EmployeeBranchAssignmentItem() {
        }
        return EmployeeBranchAssignmentItem;
    }());
    SAPB1.EmployeeBranchAssignmentItem = EmployeeBranchAssignmentItem;
    var EmployeeRoleSetup = (function () {
        function EmployeeRoleSetup() {
        }
        return EmployeeRoleSetup;
    }());
    SAPB1.EmployeeRoleSetup = EmployeeRoleSetup;
    var EmployeeRoleSetupKey = (function () {
        function EmployeeRoleSetupKey() {
        }
        return EmployeeRoleSetupKey;
    }());
    SAPB1.EmployeeRoleSetupKey = EmployeeRoleSetupKey;
    var EmployeeRoleSetupParams = (function () {
        function EmployeeRoleSetupParams() {
        }
        return EmployeeRoleSetupParams;
    }());
    SAPB1.EmployeeRoleSetupParams = EmployeeRoleSetupParams;
    var BrazilMultiIndexer = (function () {
        function BrazilMultiIndexer() {
        }
        return BrazilMultiIndexer;
    }());
    SAPB1.BrazilMultiIndexer = BrazilMultiIndexer;
    var BrazilMultiIndexerKey = (function () {
        function BrazilMultiIndexerKey() {
        }
        return BrazilMultiIndexerKey;
    }());
    SAPB1.BrazilMultiIndexerKey = BrazilMultiIndexerKey;
    var BrazilMultiIndexerParams = (function () {
        function BrazilMultiIndexerParams() {
        }
        return BrazilMultiIndexerParams;
    }());
    SAPB1.BrazilMultiIndexerParams = BrazilMultiIndexerParams;
    var EmployeeStatus = (function () {
        function EmployeeStatus() {
        }
        return EmployeeStatus;
    }());
    SAPB1.EmployeeStatus = EmployeeStatus;
    var EmployeeStatusKey = (function () {
        function EmployeeStatusKey() {
        }
        return EmployeeStatusKey;
    }());
    SAPB1.EmployeeStatusKey = EmployeeStatusKey;
    var EmployeeStatusParams = (function () {
        function EmployeeStatusParams() {
        }
        return EmployeeStatusParams;
    }());
    SAPB1.EmployeeStatusParams = EmployeeStatusParams;
    var TerminationReason = (function () {
        function TerminationReason() {
        }
        return TerminationReason;
    }());
    SAPB1.TerminationReason = TerminationReason;
    var TerminationReasonKey = (function () {
        function TerminationReasonKey() {
        }
        return TerminationReasonKey;
    }());
    SAPB1.TerminationReasonKey = TerminationReasonKey;
    var TerminationReasonParams = (function () {
        function TerminationReasonParams() {
        }
        return TerminationReasonParams;
    }());
    SAPB1.TerminationReasonParams = TerminationReasonParams;
    var CustomerEquipmentCard = (function () {
        function CustomerEquipmentCard() {
        }
        return CustomerEquipmentCard;
    }());
    SAPB1.CustomerEquipmentCard = CustomerEquipmentCard;
    var CustomerEquipmentCardKey = (function () {
        function CustomerEquipmentCardKey() {
        }
        return CustomerEquipmentCardKey;
    }());
    SAPB1.CustomerEquipmentCardKey = CustomerEquipmentCardKey;
    var WithholdingTaxCodeParams = (function () {
        function WithholdingTaxCodeParams() {
        }
        return WithholdingTaxCodeParams;
    }());
    SAPB1.WithholdingTaxCodeParams = WithholdingTaxCodeParams;
    var WithholdingTaxCode = (function () {
        function WithholdingTaxCode() {
        }
        return WithholdingTaxCode;
    }());
    SAPB1.WithholdingTaxCode = WithholdingTaxCode;
    var WithholdingTaxCodeKey = (function () {
        function WithholdingTaxCodeKey() {
        }
        return WithholdingTaxCodeKey;
    }());
    SAPB1.WithholdingTaxCodeKey = WithholdingTaxCodeKey;
    var WithholdingTaxCodes_Line = (function () {
        function WithholdingTaxCodes_Line() {
        }
        return WithholdingTaxCodes_Line;
    }());
    SAPB1.WithholdingTaxCodes_Line = WithholdingTaxCodes_Line;
    var ProgressiveTax_Line = (function () {
        function ProgressiveTax_Line() {
        }
        return ProgressiveTax_Line;
    }());
    SAPB1.ProgressiveTax_Line = ProgressiveTax_Line;
    var WithholdingTaxCodes_ValueRange_Line = (function () {
        function WithholdingTaxCodes_ValueRange_Line() {
        }
        return WithholdingTaxCodes_ValueRange_Line;
    }());
    SAPB1.WithholdingTaxCodes_ValueRange_Line = WithholdingTaxCodes_ValueRange_Line;
    var TaxReportFilter = (function () {
        function TaxReportFilter() {
        }
        return TaxReportFilter;
    }());
    SAPB1.TaxReportFilter = TaxReportFilter;
    var TaxReportFilterKey = (function () {
        function TaxReportFilterKey() {
        }
        return TaxReportFilterKey;
    }());
    SAPB1.TaxReportFilterKey = TaxReportFilterKey;
    var TaxReportGroup = (function () {
        function TaxReportGroup() {
        }
        return TaxReportGroup;
    }());
    SAPB1.TaxReportGroup = TaxReportGroup;
    var TaxReportBusinessPartner = (function () {
        function TaxReportBusinessPartner() {
        }
        return TaxReportBusinessPartner;
    }());
    SAPB1.TaxReportBusinessPartner = TaxReportBusinessPartner;
    var TaxReportDocument = (function () {
        function TaxReportDocument() {
        }
        return TaxReportDocument;
    }());
    SAPB1.TaxReportDocument = TaxReportDocument;
    var TaxReportSeries = (function () {
        function TaxReportSeries() {
        }
        return TaxReportSeries;
    }());
    SAPB1.TaxReportSeries = TaxReportSeries;
    var TaxReportAccount = (function () {
        function TaxReportAccount() {
        }
        return TaxReportAccount;
    }());
    SAPB1.TaxReportAccount = TaxReportAccount;
    var TaxReportFilterParams = (function () {
        function TaxReportFilterParams() {
        }
        return TaxReportFilterParams;
    }());
    SAPB1.TaxReportFilterParams = TaxReportFilterParams;
    var BillOfExchangeTransactionParams = (function () {
        function BillOfExchangeTransactionParams() {
        }
        return BillOfExchangeTransactionParams;
    }());
    SAPB1.BillOfExchangeTransactionParams = BillOfExchangeTransactionParams;
    var BillOfExchangeTransaction = (function () {
        function BillOfExchangeTransaction() {
        }
        return BillOfExchangeTransaction;
    }());
    SAPB1.BillOfExchangeTransaction = BillOfExchangeTransaction;
    var BillOfExchangeTransactionKey = (function () {
        function BillOfExchangeTransactionKey() {
        }
        return BillOfExchangeTransactionKey;
    }());
    SAPB1.BillOfExchangeTransactionKey = BillOfExchangeTransactionKey;
    var BillOfExchangeTransactionLine = (function () {
        function BillOfExchangeTransactionLine() {
        }
        return BillOfExchangeTransactionLine;
    }());
    SAPB1.BillOfExchangeTransactionLine = BillOfExchangeTransactionLine;
    var BillOfExchangeTransDeposit = (function () {
        function BillOfExchangeTransDeposit() {
        }
        return BillOfExchangeTransDeposit;
    }());
    SAPB1.BillOfExchangeTransDeposit = BillOfExchangeTransDeposit;
    var BillOfExchangeTransBankPage = (function () {
        function BillOfExchangeTransBankPage() {
        }
        return BillOfExchangeTransBankPage;
    }());
    SAPB1.BillOfExchangeTransBankPage = BillOfExchangeTransBankPage;
    var ServiceCallSolutionStatus = (function () {
        function ServiceCallSolutionStatus() {
        }
        return ServiceCallSolutionStatus;
    }());
    SAPB1.ServiceCallSolutionStatus = ServiceCallSolutionStatus;
    var ServiceCallSolutionStatusKey = (function () {
        function ServiceCallSolutionStatusKey() {
        }
        return ServiceCallSolutionStatusKey;
    }());
    SAPB1.ServiceCallSolutionStatusKey = ServiceCallSolutionStatusKey;
    var ServiceCallSolutionStatusParams = (function () {
        function ServiceCallSolutionStatusParams() {
        }
        return ServiceCallSolutionStatusParams;
    }());
    SAPB1.ServiceCallSolutionStatusParams = ServiceCallSolutionStatusParams;
    var KnowledgeBaseSolution = (function () {
        function KnowledgeBaseSolution() {
        }
        return KnowledgeBaseSolution;
    }());
    SAPB1.KnowledgeBaseSolution = KnowledgeBaseSolution;
    var KnowledgeBaseSolutionKey = (function () {
        function KnowledgeBaseSolutionKey() {
        }
        return KnowledgeBaseSolutionKey;
    }());
    SAPB1.KnowledgeBaseSolutionKey = KnowledgeBaseSolutionKey;
    var ServiceContractParams = (function () {
        function ServiceContractParams() {
        }
        return ServiceContractParams;
    }());
    SAPB1.ServiceContractParams = ServiceContractParams;
    var ServiceContract = (function () {
        function ServiceContract() {
        }
        return ServiceContract;
    }());
    SAPB1.ServiceContract = ServiceContract;
    var ServiceContractKey = (function () {
        function ServiceContractKey() {
        }
        return ServiceContractKey;
    }());
    SAPB1.ServiceContractKey = ServiceContractKey;
    var ServiceContract_Line = (function () {
        function ServiceContract_Line() {
        }
        return ServiceContract_Line;
    }());
    SAPB1.ServiceContract_Line = ServiceContract_Line;
    var ServiceCallParams = (function () {
        function ServiceCallParams() {
        }
        return ServiceCallParams;
    }());
    SAPB1.ServiceCallParams = ServiceCallParams;
    var ServiceCall = (function () {
        function ServiceCall() {
        }
        return ServiceCall;
    }());
    SAPB1.ServiceCall = ServiceCall;
    var ServiceCallKey = (function () {
        function ServiceCallKey() {
        }
        return ServiceCallKey;
    }());
    SAPB1.ServiceCallKey = ServiceCallKey;
    var ServiceCallActivity = (function () {
        function ServiceCallActivity() {
        }
        return ServiceCallActivity;
    }());
    SAPB1.ServiceCallActivity = ServiceCallActivity;
    var ServiceCallInventoryExpense = (function () {
        function ServiceCallInventoryExpense() {
        }
        return ServiceCallInventoryExpense;
    }());
    SAPB1.ServiceCallInventoryExpense = ServiceCallInventoryExpense;
    var ServiceCallSolution = (function () {
        function ServiceCallSolution() {
        }
        return ServiceCallSolution;
    }());
    SAPB1.ServiceCallSolution = ServiceCallSolution;
    var ServiceCallScheduling = (function () {
        function ServiceCallScheduling() {
        }
        return ServiceCallScheduling;
    }());
    SAPB1.ServiceCallScheduling = ServiceCallScheduling;
    var ServiceCallBPAddressComponent = (function () {
        function ServiceCallBPAddressComponent() {
        }
        return ServiceCallBPAddressComponent;
    }());
    SAPB1.ServiceCallBPAddressComponent = ServiceCallBPAddressComponent;
    var ServiceCallOrigin = (function () {
        function ServiceCallOrigin() {
        }
        return ServiceCallOrigin;
    }());
    SAPB1.ServiceCallOrigin = ServiceCallOrigin;
    var ServiceCallOriginKey = (function () {
        function ServiceCallOriginKey() {
        }
        return ServiceCallOriginKey;
    }());
    SAPB1.ServiceCallOriginKey = ServiceCallOriginKey;
    var ServiceCallOriginParams = (function () {
        function ServiceCallOriginParams() {
        }
        return ServiceCallOriginParams;
    }());
    SAPB1.ServiceCallOriginParams = ServiceCallOriginParams;
    var UserKeysMD = (function () {
        function UserKeysMD() {
        }
        return UserKeysMD;
    }());
    SAPB1.UserKeysMD = UserKeysMD;
    var UserKeysMDKey = (function () {
        function UserKeysMDKey() {
        }
        return UserKeysMDKey;
    }());
    SAPB1.UserKeysMDKey = UserKeysMDKey;
    var UserKeysMD_Element = (function () {
        function UserKeysMD_Element() {
        }
        return UserKeysMD_Element;
    }());
    SAPB1.UserKeysMD_Element = UserKeysMD_Element;
    var Queue = (function () {
        function Queue() {
        }
        return Queue;
    }());
    SAPB1.Queue = Queue;
    var QueueKey = (function () {
        function QueueKey() {
        }
        return QueueKey;
    }());
    SAPB1.QueueKey = QueueKey;
    var QueueMember = (function () {
        function QueueMember() {
        }
        return QueueMember;
    }());
    SAPB1.QueueMember = QueueMember;
    var DunningTerm = (function () {
        function DunningTerm() {
        }
        return DunningTerm;
    }());
    SAPB1.DunningTerm = DunningTerm;
    var DunningTermKey = (function () {
        function DunningTermKey() {
        }
        return DunningTermKey;
    }());
    SAPB1.DunningTermKey = DunningTermKey;
    var DunningTermLine = (function () {
        function DunningTermLine() {
        }
        return DunningTermLine;
    }());
    SAPB1.DunningTermLine = DunningTermLine;
    var DunningTermParams = (function () {
        function DunningTermParams() {
        }
        return DunningTermParams;
    }());
    SAPB1.DunningTermParams = DunningTermParams;
    var SalesForecastParams = (function () {
        function SalesForecastParams() {
        }
        return SalesForecastParams;
    }());
    SAPB1.SalesForecastParams = SalesForecastParams;
    var SalesForecast = (function () {
        function SalesForecast() {
        }
        return SalesForecast;
    }());
    SAPB1.SalesForecast = SalesForecast;
    var SalesForecastKey = (function () {
        function SalesForecastKey() {
        }
        return SalesForecastKey;
    }());
    SAPB1.SalesForecastKey = SalesForecastKey;
    var SalesForecastLine = (function () {
        function SalesForecastLine() {
        }
        return SalesForecastLine;
    }());
    SAPB1.SalesForecastLine = SalesForecastLine;
    var MaterialRevaluationSNBParam = (function () {
        function MaterialRevaluationSNBParam() {
        }
        return MaterialRevaluationSNBParam;
    }());
    SAPB1.MaterialRevaluationSNBParam = MaterialRevaluationSNBParam;
    var MaterialRevaluationSNBParams = (function () {
        function MaterialRevaluationSNBParams() {
        }
        return MaterialRevaluationSNBParams;
    }());
    SAPB1.MaterialRevaluationSNBParams = MaterialRevaluationSNBParams;
    var TrackingNote = (function () {
        function TrackingNote() {
        }
        return TrackingNote;
    }());
    SAPB1.TrackingNote = TrackingNote;
    var TrackingNoteKey = (function () {
        function TrackingNoteKey() {
        }
        return TrackingNoteKey;
    }());
    SAPB1.TrackingNoteKey = TrackingNoteKey;
    var TrackingNoteItem = (function () {
        function TrackingNoteItem() {
        }
        return TrackingNoteItem;
    }());
    SAPB1.TrackingNoteItem = TrackingNoteItem;
    var TrackingNoteBroker = (function () {
        function TrackingNoteBroker() {
        }
        return TrackingNoteBroker;
    }());
    SAPB1.TrackingNoteBroker = TrackingNoteBroker;
    var TrackingNoteParams = (function () {
        function TrackingNoteParams() {
        }
        return TrackingNoteParams;
    }());
    SAPB1.TrackingNoteParams = TrackingNoteParams;
    var BusinessPartnerParams = (function () {
        function BusinessPartnerParams() {
        }
        return BusinessPartnerParams;
    }());
    SAPB1.BusinessPartnerParams = BusinessPartnerParams;
    var BusinessPartner = (function () {
        function BusinessPartner() {
        }
        return BusinessPartner;
    }());
    SAPB1.BusinessPartner = BusinessPartner;
    var BusinessPartnerKey = (function () {
        function BusinessPartnerKey() {
        }
        return BusinessPartnerKey;
    }());
    SAPB1.BusinessPartnerKey = BusinessPartnerKey;
    var BPAddress = (function () {
        function BPAddress() {
        }
        return BPAddress;
    }());
    SAPB1.BPAddress = BPAddress;
    var ContactEmployee = (function () {
        function ContactEmployee() {
        }
        return ContactEmployee;
    }());
    SAPB1.ContactEmployee = ContactEmployee;
    var ContactEmployeeBlockSendingMarketingContent = (function () {
        function ContactEmployeeBlockSendingMarketingContent() {
        }
        return ContactEmployeeBlockSendingMarketingContent;
    }());
    SAPB1.ContactEmployeeBlockSendingMarketingContent = ContactEmployeeBlockSendingMarketingContent;
    var BPAccountReceivablePayble = (function () {
        function BPAccountReceivablePayble() {
        }
        return BPAccountReceivablePayble;
    }());
    SAPB1.BPAccountReceivablePayble = BPAccountReceivablePayble;
    var BPPaymentMethod = (function () {
        function BPPaymentMethod() {
        }
        return BPPaymentMethod;
    }());
    SAPB1.BPPaymentMethod = BPPaymentMethod;
    var BPWithholdingTax = (function () {
        function BPWithholdingTax() {
        }
        return BPWithholdingTax;
    }());
    SAPB1.BPWithholdingTax = BPWithholdingTax;
    var BPPaymentDate = (function () {
        function BPPaymentDate() {
        }
        return BPPaymentDate;
    }());
    SAPB1.BPPaymentDate = BPPaymentDate;
    var BPBranchAssignmentItem = (function () {
        function BPBranchAssignmentItem() {
        }
        return BPBranchAssignmentItem;
    }());
    SAPB1.BPBranchAssignmentItem = BPBranchAssignmentItem;
    var BPBankAccount = (function () {
        function BPBankAccount() {
        }
        return BPBankAccount;
    }());
    SAPB1.BPBankAccount = BPBankAccount;
    var BPFiscalTaxID = (function () {
        function BPFiscalTaxID() {
        }
        return BPFiscalTaxID;
    }());
    SAPB1.BPFiscalTaxID = BPFiscalTaxID;
    var DiscountGroup = (function () {
        function DiscountGroup() {
        }
        return DiscountGroup;
    }());
    SAPB1.DiscountGroup = DiscountGroup;
    var BPIntrastatExtension = (function () {
        function BPIntrastatExtension() {
        }
        return BPIntrastatExtension;
    }());
    SAPB1.BPIntrastatExtension = BPIntrastatExtension;
    var BPBlockSendingMarketingContent = (function () {
        function BPBlockSendingMarketingContent() {
        }
        return BPBlockSendingMarketingContent;
    }());
    SAPB1.BPBlockSendingMarketingContent = BPBlockSendingMarketingContent;
    var OpenningBalanceAccount = (function () {
        function OpenningBalanceAccount() {
        }
        return OpenningBalanceAccount;
    }());
    SAPB1.OpenningBalanceAccount = OpenningBalanceAccount;
    var BPCode = (function () {
        function BPCode() {
        }
        return BPCode;
    }());
    SAPB1.BPCode = BPCode;
    var Territory = (function () {
        function Territory() {
        }
        return Territory;
    }());
    SAPB1.Territory = Territory;
    var TerritoryKey = (function () {
        function TerritoryKey() {
        }
        return TerritoryKey;
    }());
    SAPB1.TerritoryKey = TerritoryKey;
    var UserMenuItem = (function () {
        function UserMenuItem() {
        }
        return UserMenuItem;
    }());
    SAPB1.UserMenuItem = UserMenuItem;
    var UserMenuParams = (function () {
        function UserMenuParams() {
        }
        return UserMenuParams;
    }());
    SAPB1.UserMenuParams = UserMenuParams;
    var Industry = (function () {
        function Industry() {
        }
        return Industry;
    }());
    SAPB1.Industry = Industry;
    var IndustryKey = (function () {
        function IndustryKey() {
        }
        return IndustryKey;
    }());
    SAPB1.IndustryKey = IndustryKey;
    var ProductionOrderParams = (function () {
        function ProductionOrderParams() {
        }
        return ProductionOrderParams;
    }());
    SAPB1.ProductionOrderParams = ProductionOrderParams;
    var ProductionOrder = (function () {
        function ProductionOrder() {
        }
        return ProductionOrder;
    }());
    SAPB1.ProductionOrder = ProductionOrder;
    var ProductionOrderKey = (function () {
        function ProductionOrderKey() {
        }
        return ProductionOrderKey;
    }());
    SAPB1.ProductionOrderKey = ProductionOrderKey;
    var ProductionOrderLine = (function () {
        function ProductionOrderLine() {
        }
        return ProductionOrderLine;
    }());
    SAPB1.ProductionOrderLine = ProductionOrderLine;
    var ProductionOrdersSalesOrderLine = (function () {
        function ProductionOrdersSalesOrderLine() {
        }
        return ProductionOrdersSalesOrderLine;
    }());
    SAPB1.ProductionOrdersSalesOrderLine = ProductionOrdersSalesOrderLine;
    var PackagesType = (function () {
        function PackagesType() {
        }
        return PackagesType;
    }());
    SAPB1.PackagesType = PackagesType;
    var PackagesTypeKey = (function () {
        function PackagesTypeKey() {
        }
        return PackagesTypeKey;
    }());
    SAPB1.PackagesTypeKey = PackagesTypeKey;
    var UserObjectsMD = (function () {
        function UserObjectsMD() {
        }
        return UserObjectsMD;
    }());
    SAPB1.UserObjectsMD = UserObjectsMD;
    var UserObjectsMDKey = (function () {
        function UserObjectsMDKey() {
        }
        return UserObjectsMDKey;
    }());
    SAPB1.UserObjectsMDKey = UserObjectsMDKey;
    var UserObjectMD_ChildTable = (function () {
        function UserObjectMD_ChildTable() {
        }
        return UserObjectMD_ChildTable;
    }());
    SAPB1.UserObjectMD_ChildTable = UserObjectMD_ChildTable;
    var UserObjectMD_FindColumn = (function () {
        function UserObjectMD_FindColumn() {
        }
        return UserObjectMD_FindColumn;
    }());
    SAPB1.UserObjectMD_FindColumn = UserObjectMD_FindColumn;
    var UserObjectMD_FormColumn = (function () {
        function UserObjectMD_FormColumn() {
        }
        return UserObjectMD_FormColumn;
    }());
    SAPB1.UserObjectMD_FormColumn = UserObjectMD_FormColumn;
    var UserObjectMD_EnhancedFormColumn = (function () {
        function UserObjectMD_EnhancedFormColumn() {
        }
        return UserObjectMD_EnhancedFormColumn;
    }());
    SAPB1.UserObjectMD_EnhancedFormColumn = UserObjectMD_EnhancedFormColumn;
    var EmployeePosition = (function () {
        function EmployeePosition() {
        }
        return EmployeePosition;
    }());
    SAPB1.EmployeePosition = EmployeePosition;
    var EmployeePositionKey = (function () {
        function EmployeePositionKey() {
        }
        return EmployeePositionKey;
    }());
    SAPB1.EmployeePositionKey = EmployeePositionKey;
    var EmployeePositionParams = (function () {
        function EmployeePositionParams() {
        }
        return EmployeePositionParams;
    }());
    SAPB1.EmployeePositionParams = EmployeePositionParams;
    var Team = (function () {
        function Team() {
        }
        return Team;
    }());
    SAPB1.Team = Team;
    var TeamKey = (function () {
        function TeamKey() {
        }
        return TeamKey;
    }());
    SAPB1.TeamKey = TeamKey;
    var TeamMember = (function () {
        function TeamMember() {
        }
        return TeamMember;
    }());
    SAPB1.TeamMember = TeamMember;
    var Relationship = (function () {
        function Relationship() {
        }
        return Relationship;
    }());
    SAPB1.Relationship = Relationship;
    var RelationshipKey = (function () {
        function RelationshipKey() {
        }
        return RelationshipKey;
    }());
    SAPB1.RelationshipKey = RelationshipKey;
    var UserPermissionTree = (function () {
        function UserPermissionTree() {
        }
        return UserPermissionTree;
    }());
    SAPB1.UserPermissionTree = UserPermissionTree;
    var UserPermissionTreeKey = (function () {
        function UserPermissionTreeKey() {
        }
        return UserPermissionTreeKey;
    }());
    SAPB1.UserPermissionTreeKey = UserPermissionTreeKey;
    var UserPermissionForm = (function () {
        function UserPermissionForm() {
        }
        return UserPermissionForm;
    }());
    SAPB1.UserPermissionForm = UserPermissionForm;
    var PredefinedText = (function () {
        function PredefinedText() {
        }
        return PredefinedText;
    }());
    SAPB1.PredefinedText = PredefinedText;
    var PredefinedTextKey = (function () {
        function PredefinedTextKey() {
        }
        return PredefinedTextKey;
    }());
    SAPB1.PredefinedTextKey = PredefinedTextKey;
    var PredefinedTextParams = (function () {
        function PredefinedTextParams() {
        }
        return PredefinedTextParams;
    }());
    SAPB1.PredefinedTextParams = PredefinedTextParams;
    var ActivityStatus = (function () {
        function ActivityStatus() {
        }
        return ActivityStatus;
    }());
    SAPB1.ActivityStatus = ActivityStatus;
    var ActivityStatusKey = (function () {
        function ActivityStatusKey() {
        }
        return ActivityStatusKey;
    }());
    SAPB1.ActivityStatusKey = ActivityStatusKey;
    var ChooseFromList = (function () {
        function ChooseFromList() {
        }
        return ChooseFromList;
    }());
    SAPB1.ChooseFromList = ChooseFromList;
    var ChooseFromListKey = (function () {
        function ChooseFromListKey() {
        }
        return ChooseFromListKey;
    }());
    SAPB1.ChooseFromListKey = ChooseFromListKey;
    var ChooseFromList_Line = (function () {
        function ChooseFromList_Line() {
        }
        return ChooseFromList_Line;
    }());
    SAPB1.ChooseFromList_Line = ChooseFromList_Line;
    var FormattedSearche = (function () {
        function FormattedSearche() {
        }
        return FormattedSearche;
    }());
    SAPB1.FormattedSearche = FormattedSearche;
    var FormattedSearcheKey = (function () {
        function FormattedSearcheKey() {
        }
        return FormattedSearcheKey;
    }());
    SAPB1.FormattedSearcheKey = FormattedSearcheKey;
    var Attachments2 = (function () {
        function Attachments2() {
        }
        return Attachments2;
    }());
    SAPB1.Attachments2 = Attachments2;
    var Attachments2Key = (function () {
        function Attachments2Key() {
        }
        return Attachments2Key;
    }());
    SAPB1.Attachments2Key = Attachments2Key;
    var Attachments2_Line = (function () {
        function Attachments2_Line() {
        }
        return Attachments2_Line;
    }());
    SAPB1.Attachments2_Line = Attachments2_Line;
    var UserLanguage = (function () {
        function UserLanguage() {
        }
        return UserLanguage;
    }());
    SAPB1.UserLanguage = UserLanguage;
    var UserLanguageKey = (function () {
        function UserLanguageKey() {
        }
        return UserLanguageKey;
    }());
    SAPB1.UserLanguageKey = UserLanguageKey;
    var MultiLanguageTranslation = (function () {
        function MultiLanguageTranslation() {
        }
        return MultiLanguageTranslation;
    }());
    SAPB1.MultiLanguageTranslation = MultiLanguageTranslation;
    var MultiLanguageTranslationKey = (function () {
        function MultiLanguageTranslationKey() {
        }
        return MultiLanguageTranslationKey;
    }());
    SAPB1.MultiLanguageTranslationKey = MultiLanguageTranslationKey;
    var TranslationsInUserLanguage = (function () {
        function TranslationsInUserLanguage() {
        }
        return TranslationsInUserLanguage;
    }());
    SAPB1.TranslationsInUserLanguage = TranslationsInUserLanguage;
    var DynamicSystemStringParams = (function () {
        function DynamicSystemStringParams() {
        }
        return DynamicSystemStringParams;
    }());
    SAPB1.DynamicSystemStringParams = DynamicSystemStringParams;
    var DynamicSystemString = (function () {
        function DynamicSystemString() {
        }
        return DynamicSystemString;
    }());
    SAPB1.DynamicSystemString = DynamicSystemString;
    var DynamicSystemStringKey = (function () {
        function DynamicSystemStringKey() {
        }
        return DynamicSystemStringKey;
    }());
    SAPB1.DynamicSystemStringKey = DynamicSystemStringKey;
    var HouseBankAccount = (function () {
        function HouseBankAccount() {
        }
        return HouseBankAccount;
    }());
    SAPB1.HouseBankAccount = HouseBankAccount;
    var HouseBankAccountKey = (function () {
        function HouseBankAccountKey() {
        }
        return HouseBankAccountKey;
    }());
    SAPB1.HouseBankAccountKey = HouseBankAccountKey;
    var POSDailySummary = (function () {
        function POSDailySummary() {
        }
        return POSDailySummary;
    }());
    SAPB1.POSDailySummary = POSDailySummary;
    var POSDailySummaryKey = (function () {
        function POSDailySummaryKey() {
        }
        return POSDailySummaryKey;
    }());
    SAPB1.POSDailySummaryKey = POSDailySummaryKey;
    var POSTotalizer = (function () {
        function POSTotalizer() {
        }
        return POSTotalizer;
    }());
    SAPB1.POSTotalizer = POSTotalizer;
    var POSDailySummaryParams = (function () {
        function POSDailySummaryParams() {
        }
        return POSDailySummaryParams;
    }());
    SAPB1.POSDailySummaryParams = POSDailySummaryParams;
    var EmailGroup = (function () {
        function EmailGroup() {
        }
        return EmailGroup;
    }());
    SAPB1.EmailGroup = EmailGroup;
    var EmailGroupKey = (function () {
        function EmailGroupKey() {
        }
        return EmailGroupKey;
    }());
    SAPB1.EmailGroupKey = EmailGroupKey;
    var EmailGroupParams = (function () {
        function EmailGroupParams() {
        }
        return EmailGroupParams;
    }());
    SAPB1.EmailGroupParams = EmailGroupParams;
    var ServiceCallProblemSubType = (function () {
        function ServiceCallProblemSubType() {
        }
        return ServiceCallProblemSubType;
    }());
    SAPB1.ServiceCallProblemSubType = ServiceCallProblemSubType;
    var ServiceCallProblemSubTypeKey = (function () {
        function ServiceCallProblemSubTypeKey() {
        }
        return ServiceCallProblemSubTypeKey;
    }());
    SAPB1.ServiceCallProblemSubTypeKey = ServiceCallProblemSubTypeKey;
    var ServiceCallProblemSubTypeParams = (function () {
        function ServiceCallProblemSubTypeParams() {
        }
        return ServiceCallProblemSubTypeParams;
    }());
    SAPB1.ServiceCallProblemSubTypeParams = ServiceCallProblemSubTypeParams;
    var WTDCode = (function () {
        function WTDCode() {
        }
        return WTDCode;
    }());
    SAPB1.WTDCode = WTDCode;
    var WTDCodeKey = (function () {
        function WTDCodeKey() {
        }
        return WTDCodeKey;
    }());
    SAPB1.WTDCodeKey = WTDCodeKey;
    var WTDEffectiveDate = (function () {
        function WTDEffectiveDate() {
        }
        return WTDEffectiveDate;
    }());
    SAPB1.WTDEffectiveDate = WTDEffectiveDate;
    var WTDValueRange = (function () {
        function WTDValueRange() {
        }
        return WTDValueRange;
    }());
    SAPB1.WTDValueRange = WTDValueRange;
    var WTDBP = (function () {
        function WTDBP() {
        }
        return WTDBP;
    }());
    SAPB1.WTDBP = WTDBP;
    var WTDItem = (function () {
        function WTDItem() {
        }
        return WTDItem;
    }());
    SAPB1.WTDItem = WTDItem;
    var WTDFreight = (function () {
        function WTDFreight() {
        }
        return WTDFreight;
    }());
    SAPB1.WTDFreight = WTDFreight;
    var WTDCodeParams = (function () {
        function WTDCodeParams() {
        }
        return WTDCodeParams;
    }());
    SAPB1.WTDCodeParams = WTDCodeParams;
    var PM_ProjectDocumentData = (function () {
        function PM_ProjectDocumentData() {
        }
        return PM_ProjectDocumentData;
    }());
    SAPB1.PM_ProjectDocumentData = PM_ProjectDocumentData;
    var PM_ProjectDocumentDataKey = (function () {
        function PM_ProjectDocumentDataKey() {
        }
        return PM_ProjectDocumentDataKey;
    }());
    SAPB1.PM_ProjectDocumentDataKey = PM_ProjectDocumentDataKey;
    var PM_StageData = (function () {
        function PM_StageData() {
        }
        return PM_StageData;
    }());
    SAPB1.PM_StageData = PM_StageData;
    var PM_OpenIssueData = (function () {
        function PM_OpenIssueData() {
        }
        return PM_OpenIssueData;
    }());
    SAPB1.PM_OpenIssueData = PM_OpenIssueData;
    var PM_DocumentData = (function () {
        function PM_DocumentData() {
        }
        return PM_DocumentData;
    }());
    SAPB1.PM_DocumentData = PM_DocumentData;
    var PM_ActivityData = (function () {
        function PM_ActivityData() {
        }
        return PM_ActivityData;
    }());
    SAPB1.PM_ActivityData = PM_ActivityData;
    var PM_WorkOrderData = (function () {
        function PM_WorkOrderData() {
        }
        return PM_WorkOrderData;
    }());
    SAPB1.PM_WorkOrderData = PM_WorkOrderData;
    var PM_SummaryData = (function () {
        function PM_SummaryData() {
        }
        return PM_SummaryData;
    }());
    SAPB1.PM_SummaryData = PM_SummaryData;
    var PM_DocAttachement = (function () {
        function PM_DocAttachement() {
        }
        return PM_DocAttachement;
    }());
    SAPB1.PM_DocAttachement = PM_DocAttachement;
    var PM_StageAttachement = (function () {
        function PM_StageAttachement() {
        }
        return PM_StageAttachement;
    }());
    SAPB1.PM_StageAttachement = PM_StageAttachement;
    var PM_SubprojectDocumentData = (function () {
        function PM_SubprojectDocumentData() {
        }
        return PM_SubprojectDocumentData;
    }());
    SAPB1.PM_SubprojectDocumentData = PM_SubprojectDocumentData;
    var PMS_StageData = (function () {
        function PMS_StageData() {
        }
        return PMS_StageData;
    }());
    SAPB1.PMS_StageData = PMS_StageData;
    var PMS_OpenIssueData = (function () {
        function PMS_OpenIssueData() {
        }
        return PMS_OpenIssueData;
    }());
    SAPB1.PMS_OpenIssueData = PMS_OpenIssueData;
    var PMS_DocumentData = (function () {
        function PMS_DocumentData() {
        }
        return PMS_DocumentData;
    }());
    SAPB1.PMS_DocumentData = PMS_DocumentData;
    var PMS_ActivityData = (function () {
        function PMS_ActivityData() {
        }
        return PMS_ActivityData;
    }());
    SAPB1.PMS_ActivityData = PMS_ActivityData;
    var PMS_WorkOrderData = (function () {
        function PMS_WorkOrderData() {
        }
        return PMS_WorkOrderData;
    }());
    SAPB1.PMS_WorkOrderData = PMS_WorkOrderData;
    var PMS_SummaryData = (function () {
        function PMS_SummaryData() {
        }
        return PMS_SummaryData;
    }());
    SAPB1.PMS_SummaryData = PMS_SummaryData;
    var PMS_DocAttachement = (function () {
        function PMS_DocAttachement() {
        }
        return PMS_DocAttachement;
    }());
    SAPB1.PMS_DocAttachement = PMS_DocAttachement;
    var PMS_StageAttachement = (function () {
        function PMS_StageAttachement() {
        }
        return PMS_StageAttachement;
    }());
    SAPB1.PMS_StageAttachement = PMS_StageAttachement;
    var PM_ProjectDocumentParams = (function () {
        function PM_ProjectDocumentParams() {
        }
        return PM_ProjectDocumentParams;
    }());
    SAPB1.PM_ProjectDocumentParams = PM_ProjectDocumentParams;
    var PM_SubprojectDocumentParams = (function () {
        function PM_SubprojectDocumentParams() {
        }
        return PM_SubprojectDocumentParams;
    }());
    SAPB1.PM_SubprojectDocumentParams = PM_SubprojectDocumentParams;
    var PM_SubprojectParams = (function () {
        function PM_SubprojectParams() {
        }
        return PM_SubprojectParams;
    }());
    SAPB1.PM_SubprojectParams = PM_SubprojectParams;
    var PM_TimeSheetData = (function () {
        function PM_TimeSheetData() {
        }
        return PM_TimeSheetData;
    }());
    SAPB1.PM_TimeSheetData = PM_TimeSheetData;
    var PM_TimeSheetDataKey = (function () {
        function PM_TimeSheetDataKey() {
        }
        return PM_TimeSheetDataKey;
    }());
    SAPB1.PM_TimeSheetDataKey = PM_TimeSheetDataKey;
    var PM_TimeSheetLineData = (function () {
        function PM_TimeSheetLineData() {
        }
        return PM_TimeSheetLineData;
    }());
    SAPB1.PM_TimeSheetLineData = PM_TimeSheetLineData;
    var PM_TimeSheetParams = (function () {
        function PM_TimeSheetParams() {
        }
        return PM_TimeSheetParams;
    }());
    SAPB1.PM_TimeSheetParams = PM_TimeSheetParams;
    var AccountCategory = (function () {
        function AccountCategory() {
        }
        return AccountCategory;
    }());
    SAPB1.AccountCategory = AccountCategory;
    var AccountCategoryKey = (function () {
        function AccountCategoryKey() {
        }
        return AccountCategoryKey;
    }());
    SAPB1.AccountCategoryKey = AccountCategoryKey;
    var AccountCategoryParams = (function () {
        function AccountCategoryParams() {
        }
        return AccountCategoryParams;
    }());
    SAPB1.AccountCategoryParams = AccountCategoryParams;
    var BankChargesAllocationCode = (function () {
        function BankChargesAllocationCode() {
        }
        return BankChargesAllocationCode;
    }());
    SAPB1.BankChargesAllocationCode = BankChargesAllocationCode;
    var BankChargesAllocationCodeKey = (function () {
        function BankChargesAllocationCodeKey() {
        }
        return BankChargesAllocationCodeKey;
    }());
    SAPB1.BankChargesAllocationCodeKey = BankChargesAllocationCodeKey;
    var BankChargesAllocationCodeParams = (function () {
        function BankChargesAllocationCodeParams() {
        }
        return BankChargesAllocationCodeParams;
    }());
    SAPB1.BankChargesAllocationCodeParams = BankChargesAllocationCodeParams;
    var CashFlowLineItem = (function () {
        function CashFlowLineItem() {
        }
        return CashFlowLineItem;
    }());
    SAPB1.CashFlowLineItem = CashFlowLineItem;
    var CashFlowLineItemKey = (function () {
        function CashFlowLineItemKey() {
        }
        return CashFlowLineItemKey;
    }());
    SAPB1.CashFlowLineItemKey = CashFlowLineItemKey;
    var CashFlowLineItemParams = (function () {
        function CashFlowLineItemParams() {
        }
        return CashFlowLineItemParams;
    }());
    SAPB1.CashFlowLineItemParams = CashFlowLineItemParams;
    var CampaignResponseType = (function () {
        function CampaignResponseType() {
        }
        return CampaignResponseType;
    }());
    SAPB1.CampaignResponseType = CampaignResponseType;
    var CampaignResponseTypeKey = (function () {
        function CampaignResponseTypeKey() {
        }
        return CampaignResponseTypeKey;
    }());
    SAPB1.CampaignResponseTypeKey = CampaignResponseTypeKey;
    var CampaignResponseTypeParams = (function () {
        function CampaignResponseTypeParams() {
        }
        return CampaignResponseTypeParams;
    }());
    SAPB1.CampaignResponseTypeParams = CampaignResponseTypeParams;
    var GovPayCode = (function () {
        function GovPayCode() {
        }
        return GovPayCode;
    }());
    SAPB1.GovPayCode = GovPayCode;
    var GovPayCodeKey = (function () {
        function GovPayCodeKey() {
        }
        return GovPayCodeKey;
    }());
    SAPB1.GovPayCodeKey = GovPayCodeKey;
    var GovPayCodeAuthority = (function () {
        function GovPayCodeAuthority() {
        }
        return GovPayCodeAuthority;
    }());
    SAPB1.GovPayCodeAuthority = GovPayCodeAuthority;
    var GovPayCodeParams = (function () {
        function GovPayCodeParams() {
        }
        return GovPayCodeParams;
    }());
    SAPB1.GovPayCodeParams = GovPayCodeParams;
    var TaxInvoiceReport = (function () {
        function TaxInvoiceReport() {
        }
        return TaxInvoiceReport;
    }());
    SAPB1.TaxInvoiceReport = TaxInvoiceReport;
    var TaxInvoiceReportKey = (function () {
        function TaxInvoiceReportKey() {
        }
        return TaxInvoiceReportKey;
    }());
    SAPB1.TaxInvoiceReportKey = TaxInvoiceReportKey;
    var TaxInvoiceReportLine = (function () {
        function TaxInvoiceReportLine() {
        }
        return TaxInvoiceReportLine;
    }());
    SAPB1.TaxInvoiceReportLine = TaxInvoiceReportLine;
    var TaxInvoiceReportParams = (function () {
        function TaxInvoiceReportParams() {
        }
        return TaxInvoiceReportParams;
    }());
    SAPB1.TaxInvoiceReportParams = TaxInvoiceReportParams;
    var BusinessPlaceParams = (function () {
        function BusinessPlaceParams() {
        }
        return BusinessPlaceParams;
    }());
    SAPB1.BusinessPlaceParams = BusinessPlaceParams;
    var BusinessPlace = (function () {
        function BusinessPlace() {
        }
        return BusinessPlace;
    }());
    SAPB1.BusinessPlace = BusinessPlace;
    var BusinessPlaceKey = (function () {
        function BusinessPlaceKey() {
        }
        return BusinessPlaceKey;
    }());
    SAPB1.BusinessPlaceKey = BusinessPlaceKey;
    var BusinessPlaceIENumber = (function () {
        function BusinessPlaceIENumber() {
        }
        return BusinessPlaceIENumber;
    }());
    SAPB1.BusinessPlaceIENumber = BusinessPlaceIENumber;
    var BusinessPlaceTributaryInfo = (function () {
        function BusinessPlaceTributaryInfo() {
        }
        return BusinessPlaceTributaryInfo;
    }());
    SAPB1.BusinessPlaceTributaryInfo = BusinessPlaceTributaryInfo;
    var Deposit = (function () {
        function Deposit() {
        }
        return Deposit;
    }());
    SAPB1.Deposit = Deposit;
    var DepositKey = (function () {
        function DepositKey() {
        }
        return DepositKey;
    }());
    SAPB1.DepositKey = DepositKey;
    var CheckLine = (function () {
        function CheckLine() {
        }
        return CheckLine;
    }());
    SAPB1.CheckLine = CheckLine;
    var CreditLine = (function () {
        function CreditLine() {
        }
        return CreditLine;
    }());
    SAPB1.CreditLine = CreditLine;
    var BOELine = (function () {
        function BOELine() {
        }
        return BOELine;
    }());
    SAPB1.BOELine = BOELine;
    var DepositParams = (function () {
        function DepositParams() {
        }
        return DepositParams;
    }());
    SAPB1.DepositParams = DepositParams;
    var CancelCheckRowParams = (function () {
        function CancelCheckRowParams() {
        }
        return CancelCheckRowParams;
    }());
    SAPB1.CancelCheckRowParams = CancelCheckRowParams;
    var LocalEra = (function () {
        function LocalEra() {
        }
        return LocalEra;
    }());
    SAPB1.LocalEra = LocalEra;
    var LocalEraKey = (function () {
        function LocalEraKey() {
        }
        return LocalEraKey;
    }());
    SAPB1.LocalEraKey = LocalEraKey;
    var Dimension = (function () {
        function Dimension() {
        }
        return Dimension;
    }());
    SAPB1.Dimension = Dimension;
    var DimensionKey = (function () {
        function DimensionKey() {
        }
        return DimensionKey;
    }());
    SAPB1.DimensionKey = DimensionKey;
    var DimensionParams = (function () {
        function DimensionParams() {
        }
        return DimensionParams;
    }());
    SAPB1.DimensionParams = DimensionParams;
    var ServiceGroup = (function () {
        function ServiceGroup() {
        }
        return ServiceGroup;
    }());
    SAPB1.ServiceGroup = ServiceGroup;
    var ServiceGroupKey = (function () {
        function ServiceGroupKey() {
        }
        return ServiceGroupKey;
    }());
    SAPB1.ServiceGroupKey = ServiceGroupKey;
    var ServiceGroupParams = (function () {
        function ServiceGroupParams() {
        }
        return ServiceGroupParams;
    }());
    SAPB1.ServiceGroupParams = ServiceGroupParams;
    var MaterialGroup = (function () {
        function MaterialGroup() {
        }
        return MaterialGroup;
    }());
    SAPB1.MaterialGroup = MaterialGroup;
    var MaterialGroupKey = (function () {
        function MaterialGroupKey() {
        }
        return MaterialGroupKey;
    }());
    SAPB1.MaterialGroupKey = MaterialGroupKey;
    var MaterialGroupParams = (function () {
        function MaterialGroupParams() {
        }
        return MaterialGroupParams;
    }());
    SAPB1.MaterialGroupParams = MaterialGroupParams;
    var NCMCodeSetup = (function () {
        function NCMCodeSetup() {
        }
        return NCMCodeSetup;
    }());
    SAPB1.NCMCodeSetup = NCMCodeSetup;
    var NCMCodeSetupKey = (function () {
        function NCMCodeSetupKey() {
        }
        return NCMCodeSetupKey;
    }());
    SAPB1.NCMCodeSetupKey = NCMCodeSetupKey;
    var NCMCodeSetupParams = (function () {
        function NCMCodeSetupParams() {
        }
        return NCMCodeSetupParams;
    }());
    SAPB1.NCMCodeSetupParams = NCMCodeSetupParams;
    var NFTaxCategory = (function () {
        function NFTaxCategory() {
        }
        return NFTaxCategory;
    }());
    SAPB1.NFTaxCategory = NFTaxCategory;
    var NFTaxCategoryKey = (function () {
        function NFTaxCategoryKey() {
        }
        return NFTaxCategoryKey;
    }());
    SAPB1.NFTaxCategoryKey = NFTaxCategoryKey;
    var NFTaxCategoryParams = (function () {
        function NFTaxCategoryParams() {
        }
        return NFTaxCategoryParams;
    }());
    SAPB1.NFTaxCategoryParams = NFTaxCategoryParams;
    var TaxCodeDeterminationTCD = (function () {
        function TaxCodeDeterminationTCD() {
        }
        return TaxCodeDeterminationTCD;
    }());
    SAPB1.TaxCodeDeterminationTCD = TaxCodeDeterminationTCD;
    var TaxCodeDeterminationTCDKey = (function () {
        function TaxCodeDeterminationTCDKey() {
        }
        return TaxCodeDeterminationTCDKey;
    }());
    SAPB1.TaxCodeDeterminationTCDKey = TaxCodeDeterminationTCDKey;
    var TaxCodeDeterminationTCDDefaultWT = (function () {
        function TaxCodeDeterminationTCDDefaultWT() {
        }
        return TaxCodeDeterminationTCDDefaultWT;
    }());
    SAPB1.TaxCodeDeterminationTCDDefaultWT = TaxCodeDeterminationTCDDefaultWT;
    var TaxCodeDeterminationTCDByUsage = (function () {
        function TaxCodeDeterminationTCDByUsage() {
        }
        return TaxCodeDeterminationTCDByUsage;
    }());
    SAPB1.TaxCodeDeterminationTCDByUsage = TaxCodeDeterminationTCDByUsage;
    var TaxCodeDeterminationTCDKeyField = (function () {
        function TaxCodeDeterminationTCDKeyField() {
        }
        return TaxCodeDeterminationTCDKeyField;
    }());
    SAPB1.TaxCodeDeterminationTCDKeyField = TaxCodeDeterminationTCDKeyField;
    var TaxCodeDeterminationTCDKeyFieldValue = (function () {
        function TaxCodeDeterminationTCDKeyFieldValue() {
        }
        return TaxCodeDeterminationTCDKeyFieldValue;
    }());
    SAPB1.TaxCodeDeterminationTCDKeyFieldValue = TaxCodeDeterminationTCDKeyFieldValue;
    var TaxCodeDeterminationTCDKeyFieldValuePeriod = (function () {
        function TaxCodeDeterminationTCDKeyFieldValuePeriod() {
        }
        return TaxCodeDeterminationTCDKeyFieldValuePeriod;
    }());
    SAPB1.TaxCodeDeterminationTCDKeyFieldValuePeriod = TaxCodeDeterminationTCDKeyFieldValuePeriod;
    var TaxCodeDeterminationTCDKeyFieldValuePeriodByUsage = (function () {
        function TaxCodeDeterminationTCDKeyFieldValuePeriodByUsage() {
        }
        return TaxCodeDeterminationTCDKeyFieldValuePeriodByUsage;
    }());
    SAPB1.TaxCodeDeterminationTCDKeyFieldValuePeriodByUsage = TaxCodeDeterminationTCDKeyFieldValuePeriodByUsage;
    var TaxCodeDeterminationTCDKeyFieldValueDefaultWT = (function () {
        function TaxCodeDeterminationTCDKeyFieldValueDefaultWT() {
        }
        return TaxCodeDeterminationTCDKeyFieldValueDefaultWT;
    }());
    SAPB1.TaxCodeDeterminationTCDKeyFieldValueDefaultWT = TaxCodeDeterminationTCDKeyFieldValueDefaultWT;
    var TaxCodeDeterminationTCDParams = (function () {
        function TaxCodeDeterminationTCDParams() {
        }
        return TaxCodeDeterminationTCDParams;
    }());
    SAPB1.TaxCodeDeterminationTCDParams = TaxCodeDeterminationTCDParams;
    var BOEDocumentType = (function () {
        function BOEDocumentType() {
        }
        return BOEDocumentType;
    }());
    SAPB1.BOEDocumentType = BOEDocumentType;
    var BOEDocumentTypeKey = (function () {
        function BOEDocumentTypeKey() {
        }
        return BOEDocumentTypeKey;
    }());
    SAPB1.BOEDocumentTypeKey = BOEDocumentTypeKey;
    var BOEDocumentTypeParams = (function () {
        function BOEDocumentTypeParams() {
        }
        return BOEDocumentTypeParams;
    }());
    SAPB1.BOEDocumentTypeParams = BOEDocumentTypeParams;
    var BOEPortfolio = (function () {
        function BOEPortfolio() {
        }
        return BOEPortfolio;
    }());
    SAPB1.BOEPortfolio = BOEPortfolio;
    var BOEPortfolioKey = (function () {
        function BOEPortfolioKey() {
        }
        return BOEPortfolioKey;
    }());
    SAPB1.BOEPortfolioKey = BOEPortfolioKey;
    var BOEPortfolioParams = (function () {
        function BOEPortfolioParams() {
        }
        return BOEPortfolioParams;
    }());
    SAPB1.BOEPortfolioParams = BOEPortfolioParams;
    var BOEInstruction = (function () {
        function BOEInstruction() {
        }
        return BOEInstruction;
    }());
    SAPB1.BOEInstruction = BOEInstruction;
    var BOEInstructionKey = (function () {
        function BOEInstructionKey() {
        }
        return BOEInstructionKey;
    }());
    SAPB1.BOEInstructionKey = BOEInstructionKey;
    var BOEInstructionParams = (function () {
        function BOEInstructionParams() {
        }
        return BOEInstructionParams;
    }());
    SAPB1.BOEInstructionParams = BOEInstructionParams;
    var SalesTaxInvoice = (function () {
        function SalesTaxInvoice() {
        }
        return SalesTaxInvoice;
    }());
    SAPB1.SalesTaxInvoice = SalesTaxInvoice;
    var SalesTaxInvoiceKey = (function () {
        function SalesTaxInvoiceKey() {
        }
        return SalesTaxInvoiceKey;
    }());
    SAPB1.SalesTaxInvoiceKey = SalesTaxInvoiceKey;
    var SalesTaxInvoiceLine = (function () {
        function SalesTaxInvoiceLine() {
        }
        return SalesTaxInvoiceLine;
    }());
    SAPB1.SalesTaxInvoiceLine = SalesTaxInvoiceLine;
    var SalesTaxInvoiceOperationCode = (function () {
        function SalesTaxInvoiceOperationCode() {
        }
        return SalesTaxInvoiceOperationCode;
    }());
    SAPB1.SalesTaxInvoiceOperationCode = SalesTaxInvoiceOperationCode;
    var PurchaseTaxInvoice = (function () {
        function PurchaseTaxInvoice() {
        }
        return PurchaseTaxInvoice;
    }());
    SAPB1.PurchaseTaxInvoice = PurchaseTaxInvoice;
    var PurchaseTaxInvoiceKey = (function () {
        function PurchaseTaxInvoiceKey() {
        }
        return PurchaseTaxInvoiceKey;
    }());
    SAPB1.PurchaseTaxInvoiceKey = PurchaseTaxInvoiceKey;
    var PurchaseTaxInvoiceLine = (function () {
        function PurchaseTaxInvoiceLine() {
        }
        return PurchaseTaxInvoiceLine;
    }());
    SAPB1.PurchaseTaxInvoiceLine = PurchaseTaxInvoiceLine;
    var PurchaseTaxInvoiceOperationCode = (function () {
        function PurchaseTaxInvoiceOperationCode() {
        }
        return PurchaseTaxInvoiceOperationCode;
    }());
    SAPB1.PurchaseTaxInvoiceOperationCode = PurchaseTaxInvoiceOperationCode;
    var CustomsDeclaration = (function () {
        function CustomsDeclaration() {
        }
        return CustomsDeclaration;
    }());
    SAPB1.CustomsDeclaration = CustomsDeclaration;
    var CustomsDeclarationKey = (function () {
        function CustomsDeclarationKey() {
        }
        return CustomsDeclarationKey;
    }());
    SAPB1.CustomsDeclarationKey = CustomsDeclarationKey;
    var CustomsDeclarationParams = (function () {
        function CustomsDeclarationParams() {
        }
        return CustomsDeclarationParams;
    }());
    SAPB1.CustomsDeclarationParams = CustomsDeclarationParams;
    var Resource = (function () {
        function Resource() {
        }
        return Resource;
    }());
    SAPB1.Resource = Resource;
    var ResourceKey = (function () {
        function ResourceKey() {
        }
        return ResourceKey;
    }());
    SAPB1.ResourceKey = ResourceKey;
    var ResourceWarehouse = (function () {
        function ResourceWarehouse() {
        }
        return ResourceWarehouse;
    }());
    SAPB1.ResourceWarehouse = ResourceWarehouse;
    var ResourceFixedAsset = (function () {
        function ResourceFixedAsset() {
        }
        return ResourceFixedAsset;
    }());
    SAPB1.ResourceFixedAsset = ResourceFixedAsset;
    var ResourceEmployee = (function () {
        function ResourceEmployee() {
        }
        return ResourceEmployee;
    }());
    SAPB1.ResourceEmployee = ResourceEmployee;
    var ResourceDailyCapacity = (function () {
        function ResourceDailyCapacity() {
        }
        return ResourceDailyCapacity;
    }());
    SAPB1.ResourceDailyCapacity = ResourceDailyCapacity;
    var ResourceParams = (function () {
        function ResourceParams() {
        }
        return ResourceParams;
    }());
    SAPB1.ResourceParams = ResourceParams;
    var ResourceProperty = (function () {
        function ResourceProperty() {
        }
        return ResourceProperty;
    }());
    SAPB1.ResourceProperty = ResourceProperty;
    var ResourcePropertyKey = (function () {
        function ResourcePropertyKey() {
        }
        return ResourcePropertyKey;
    }());
    SAPB1.ResourcePropertyKey = ResourcePropertyKey;
    var ResourcePropertyParams = (function () {
        function ResourcePropertyParams() {
        }
        return ResourcePropertyParams;
    }());
    SAPB1.ResourcePropertyParams = ResourcePropertyParams;
    var ResourceGroup = (function () {
        function ResourceGroup() {
        }
        return ResourceGroup;
    }());
    SAPB1.ResourceGroup = ResourceGroup;
    var ResourceGroupKey = (function () {
        function ResourceGroupKey() {
        }
        return ResourceGroupKey;
    }());
    SAPB1.ResourceGroupKey = ResourceGroupKey;
    var ResourceGroupParams = (function () {
        function ResourceGroupParams() {
        }
        return ResourceGroupParams;
    }());
    SAPB1.ResourceGroupParams = ResourceGroupParams;
    var Bank = (function () {
        function Bank() {
        }
        return Bank;
    }());
    SAPB1.Bank = Bank;
    var BankKey = (function () {
        function BankKey() {
        }
        return BankKey;
    }());
    SAPB1.BankKey = BankKey;
    var JournalEntryParams = (function () {
        function JournalEntryParams() {
        }
        return JournalEntryParams;
    }());
    SAPB1.JournalEntryParams = JournalEntryParams;
    var JournalEntry = (function () {
        function JournalEntry() {
        }
        return JournalEntry;
    }());
    SAPB1.JournalEntry = JournalEntry;
    var JournalEntryKey = (function () {
        function JournalEntryKey() {
        }
        return JournalEntryKey;
    }());
    SAPB1.JournalEntryKey = JournalEntryKey;
    var JournalEntryLine = (function () {
        function JournalEntryLine() {
        }
        return JournalEntryLine;
    }());
    SAPB1.JournalEntryLine = JournalEntryLine;
    var StockTaking = (function () {
        function StockTaking() {
        }
        return StockTaking;
    }());
    SAPB1.StockTaking = StockTaking;
    var StockTakingKey = (function () {
        function StockTakingKey() {
        }
        return StockTakingKey;
    }());
    SAPB1.StockTakingKey = StockTakingKey;
    var InventoryOpeningBalance = (function () {
        function InventoryOpeningBalance() {
        }
        return InventoryOpeningBalance;
    }());
    SAPB1.InventoryOpeningBalance = InventoryOpeningBalance;
    var InventoryOpeningBalanceKey = (function () {
        function InventoryOpeningBalanceKey() {
        }
        return InventoryOpeningBalanceKey;
    }());
    SAPB1.InventoryOpeningBalanceKey = InventoryOpeningBalanceKey;
    var InventoryOpeningBalanceLine = (function () {
        function InventoryOpeningBalanceLine() {
        }
        return InventoryOpeningBalanceLine;
    }());
    SAPB1.InventoryOpeningBalanceLine = InventoryOpeningBalanceLine;
    var InventoryOpeningBalanceSerialNumber = (function () {
        function InventoryOpeningBalanceSerialNumber() {
        }
        return InventoryOpeningBalanceSerialNumber;
    }());
    SAPB1.InventoryOpeningBalanceSerialNumber = InventoryOpeningBalanceSerialNumber;
    var InventoryOpeningBalanceBatchNumber = (function () {
        function InventoryOpeningBalanceBatchNumber() {
        }
        return InventoryOpeningBalanceBatchNumber;
    }());
    SAPB1.InventoryOpeningBalanceBatchNumber = InventoryOpeningBalanceBatchNumber;
    var InventoryOpeningBalanceParams = (function () {
        function InventoryOpeningBalanceParams() {
        }
        return InventoryOpeningBalanceParams;
    }());
    SAPB1.InventoryOpeningBalanceParams = InventoryOpeningBalanceParams;
    var Contact = (function () {
        function Contact() {
        }
        return Contact;
    }());
    SAPB1.Contact = Contact;
    var ContactKey = (function () {
        function ContactKey() {
        }
        return ContactKey;
    }());
    SAPB1.ContactKey = ContactKey;
    var CreditCard = (function () {
        function CreditCard() {
        }
        return CreditCard;
    }());
    SAPB1.CreditCard = CreditCard;
    var CreditCardKey = (function () {
        function CreditCardKey() {
        }
        return CreditCardKey;
    }());
    SAPB1.CreditCardKey = CreditCardKey;
    var Currency = (function () {
        function Currency() {
        }
        return Currency;
    }());
    SAPB1.Currency = Currency;
    var CurrencyKey = (function () {
        function CurrencyKey() {
        }
        return CurrencyKey;
    }());
    SAPB1.CurrencyKey = CurrencyKey;
    var ItemParams = (function () {
        function ItemParams() {
        }
        return ItemParams;
    }());
    SAPB1.ItemParams = ItemParams;
    var Item = (function () {
        function Item() {
        }
        return Item;
    }());
    SAPB1.Item = Item;
    var ItemKey = (function () {
        function ItemKey() {
        }
        return ItemKey;
    }());
    SAPB1.ItemKey = ItemKey;
    var ItemPrice = (function () {
        function ItemPrice() {
        }
        return ItemPrice;
    }());
    SAPB1.ItemPrice = ItemPrice;
    var UoMPrice = (function () {
        function UoMPrice() {
        }
        return UoMPrice;
    }());
    SAPB1.UoMPrice = UoMPrice;
    var ItemWarehouseInfo = (function () {
        function ItemWarehouseInfo() {
        }
        return ItemWarehouseInfo;
    }());
    SAPB1.ItemWarehouseInfo = ItemWarehouseInfo;
    var ItemCycleCount = (function () {
        function ItemCycleCount() {
        }
        return ItemCycleCount;
    }());
    SAPB1.ItemCycleCount = ItemCycleCount;
    var ItemPreferredVendor = (function () {
        function ItemPreferredVendor() {
        }
        return ItemPreferredVendor;
    }());
    SAPB1.ItemPreferredVendor = ItemPreferredVendor;
    var ItemLocalizationInfo = (function () {
        function ItemLocalizationInfo() {
        }
        return ItemLocalizationInfo;
    }());
    SAPB1.ItemLocalizationInfo = ItemLocalizationInfo;
    var ItemProject = (function () {
        function ItemProject() {
        }
        return ItemProject;
    }());
    SAPB1.ItemProject = ItemProject;
    var ItemDistributionRule = (function () {
        function ItemDistributionRule() {
        }
        return ItemDistributionRule;
    }());
    SAPB1.ItemDistributionRule = ItemDistributionRule;
    var ItemAttributeGroups = (function () {
        function ItemAttributeGroups() {
        }
        return ItemAttributeGroups;
    }());
    SAPB1.ItemAttributeGroups = ItemAttributeGroups;
    var ItemDepreciationParameter = (function () {
        function ItemDepreciationParameter() {
        }
        return ItemDepreciationParameter;
    }());
    SAPB1.ItemDepreciationParameter = ItemDepreciationParameter;
    var ItemPeriodControl = (function () {
        function ItemPeriodControl() {
        }
        return ItemPeriodControl;
    }());
    SAPB1.ItemPeriodControl = ItemPeriodControl;
    var ItemUnitOfMeasurement = (function () {
        function ItemUnitOfMeasurement() {
        }
        return ItemUnitOfMeasurement;
    }());
    SAPB1.ItemUnitOfMeasurement = ItemUnitOfMeasurement;
    var ItemUoMPackage = (function () {
        function ItemUoMPackage() {
        }
        return ItemUoMPackage;
    }());
    SAPB1.ItemUoMPackage = ItemUoMPackage;
    var ItemBarCode = (function () {
        function ItemBarCode() {
        }
        return ItemBarCode;
    }());
    SAPB1.ItemBarCode = ItemBarCode;
    var ItemIntrastatExtension = (function () {
        function ItemIntrastatExtension() {
        }
        return ItemIntrastatExtension;
    }());
    SAPB1.ItemIntrastatExtension = ItemIntrastatExtension;
    var PaymentTermsType = (function () {
        function PaymentTermsType() {
        }
        return PaymentTermsType;
    }());
    SAPB1.PaymentTermsType = PaymentTermsType;
    var PaymentTermsTypeKey = (function () {
        function PaymentTermsTypeKey() {
        }
        return PaymentTermsTypeKey;
    }());
    SAPB1.PaymentTermsTypeKey = PaymentTermsTypeKey;
    var ColumnPreferences = (function () {
        function ColumnPreferences() {
        }
        return ColumnPreferences;
    }());
    SAPB1.ColumnPreferences = ColumnPreferences;
    var ColumnPreferencesKey = (function () {
        function ColumnPreferencesKey() {
        }
        return ColumnPreferencesKey;
    }());
    SAPB1.ColumnPreferencesKey = ColumnPreferencesKey;
    var ColumnsPreferencesParams = (function () {
        function ColumnsPreferencesParams() {
        }
        return ColumnsPreferencesParams;
    }());
    SAPB1.ColumnsPreferencesParams = ColumnsPreferencesParams;
    var ImportFileParam = (function () {
        function ImportFileParam() {
        }
        return ImportFileParam;
    }());
    SAPB1.ImportFileParam = ImportFileParam;
    var ElectronicFileFormat = (function () {
        function ElectronicFileFormat() {
        }
        return ElectronicFileFormat;
    }());
    SAPB1.ElectronicFileFormat = ElectronicFileFormat;
    var ElectronicFileFormatKey = (function () {
        function ElectronicFileFormatKey() {
        }
        return ElectronicFileFormatKey;
    }());
    SAPB1.ElectronicFileFormatKey = ElectronicFileFormatKey;
    var ElectronicFileFormatParams = (function () {
        function ElectronicFileFormatParams() {
        }
        return ElectronicFileFormatParams;
    }());
    SAPB1.ElectronicFileFormatParams = ElectronicFileFormatParams;
    var BankPage = (function () {
        function BankPage() {
        }
        return BankPage;
    }());
    SAPB1.BankPage = BankPage;
    var BankPageKey = (function () {
        function BankPageKey() {
        }
        return BankPageKey;
    }());
    SAPB1.BankPageKey = BankPageKey;
    var Manufacturer = (function () {
        function Manufacturer() {
        }
        return Manufacturer;
    }());
    SAPB1.Manufacturer = Manufacturer;
    var ManufacturerKey = (function () {
        function ManufacturerKey() {
        }
        return ManufacturerKey;
    }());
    SAPB1.ManufacturerKey = ManufacturerKey;
    var BusinessPartnerProperty = (function () {
        function BusinessPartnerProperty() {
        }
        return BusinessPartnerProperty;
    }());
    SAPB1.BusinessPartnerProperty = BusinessPartnerProperty;
    var BusinessPartnerPropertyKey = (function () {
        function BusinessPartnerPropertyKey() {
        }
        return BusinessPartnerPropertyKey;
    }());
    SAPB1.BusinessPartnerPropertyKey = BusinessPartnerPropertyKey;
    var BusinessPartnerPropertyParams = (function () {
        function BusinessPartnerPropertyParams() {
        }
        return BusinessPartnerPropertyParams;
    }());
    SAPB1.BusinessPartnerPropertyParams = BusinessPartnerPropertyParams;
    var TransactionCode = (function () {
        function TransactionCode() {
        }
        return TransactionCode;
    }());
    SAPB1.TransactionCode = TransactionCode;
    var TransactionCodeKey = (function () {
        function TransactionCodeKey() {
        }
        return TransactionCodeKey;
    }());
    SAPB1.TransactionCodeKey = TransactionCodeKey;
    var TransactionCodeParams = (function () {
        function TransactionCodeParams() {
        }
        return TransactionCodeParams;
    }());
    SAPB1.TransactionCodeParams = TransactionCodeParams;
    var LandedCostsCode = (function () {
        function LandedCostsCode() {
        }
        return LandedCostsCode;
    }());
    SAPB1.LandedCostsCode = LandedCostsCode;
    var LandedCostsCodeKey = (function () {
        function LandedCostsCodeKey() {
        }
        return LandedCostsCodeKey;
    }());
    SAPB1.LandedCostsCodeKey = LandedCostsCodeKey;
    var EmployeeTransfer = (function () {
        function EmployeeTransfer() {
        }
        return EmployeeTransfer;
    }());
    SAPB1.EmployeeTransfer = EmployeeTransfer;
    var EmployeeTransferKey = (function () {
        function EmployeeTransferKey() {
        }
        return EmployeeTransferKey;
    }());
    SAPB1.EmployeeTransferKey = EmployeeTransferKey;
    var EmployeeTransferDetail = (function () {
        function EmployeeTransferDetail() {
        }
        return EmployeeTransferDetail;
    }());
    SAPB1.EmployeeTransferDetail = EmployeeTransferDetail;
    var EmployeeTransferParams = (function () {
        function EmployeeTransferParams() {
        }
        return EmployeeTransferParams;
    }());
    SAPB1.EmployeeTransferParams = EmployeeTransferParams;
    var ShippingType = (function () {
        function ShippingType() {
        }
        return ShippingType;
    }());
    SAPB1.ShippingType = ShippingType;
    var ShippingTypeKey = (function () {
        function ShippingTypeKey() {
        }
        return ShippingTypeKey;
    }());
    SAPB1.ShippingTypeKey = ShippingTypeKey;
    var VatGroup = (function () {
        function VatGroup() {
        }
        return VatGroup;
    }());
    SAPB1.VatGroup = VatGroup;
    var VatGroupKey = (function () {
        function VatGroupKey() {
        }
        return VatGroupKey;
    }());
    SAPB1.VatGroupKey = VatGroupKey;
    var VatGroups_Line = (function () {
        function VatGroups_Line() {
        }
        return VatGroups_Line;
    }());
    SAPB1.VatGroups_Line = VatGroups_Line;
    var LengthMeasure = (function () {
        function LengthMeasure() {
        }
        return LengthMeasure;
    }());
    SAPB1.LengthMeasure = LengthMeasure;
    var LengthMeasureKey = (function () {
        function LengthMeasureKey() {
        }
        return LengthMeasureKey;
    }());
    SAPB1.LengthMeasureKey = LengthMeasureKey;
    var WeightMeasure = (function () {
        function WeightMeasure() {
        }
        return WeightMeasure;
    }());
    SAPB1.WeightMeasure = WeightMeasure;
    var WeightMeasureKey = (function () {
        function WeightMeasureKey() {
        }
        return WeightMeasureKey;
    }());
    SAPB1.WeightMeasureKey = WeightMeasureKey;
    var ItemGroupParams = (function () {
        function ItemGroupParams() {
        }
        return ItemGroupParams;
    }());
    SAPB1.ItemGroupParams = ItemGroupParams;
    var ItemGroups = (function () {
        function ItemGroups() {
        }
        return ItemGroups;
    }());
    SAPB1.ItemGroups = ItemGroups;
    var ItemGroupsKey = (function () {
        function ItemGroupsKey() {
        }
        return ItemGroupsKey;
    }());
    SAPB1.ItemGroupsKey = ItemGroupsKey;
    var ItemGroupsWarehouseInfo = (function () {
        function ItemGroupsWarehouseInfo() {
        }
        return ItemGroupsWarehouseInfo;
    }());
    SAPB1.ItemGroupsWarehouseInfo = ItemGroupsWarehouseInfo;
    var SalesPersonParams = (function () {
        function SalesPersonParams() {
        }
        return SalesPersonParams;
    }());
    SAPB1.SalesPersonParams = SalesPersonParams;
    var SalesPerson = (function () {
        function SalesPerson() {
        }
        return SalesPerson;
    }());
    SAPB1.SalesPerson = SalesPerson;
    var SalesPersonKey = (function () {
        function SalesPersonKey() {
        }
        return SalesPersonKey;
    }());
    SAPB1.SalesPersonKey = SalesPersonKey;
    var DeductionTaxSubGroup = (function () {
        function DeductionTaxSubGroup() {
        }
        return DeductionTaxSubGroup;
    }());
    SAPB1.DeductionTaxSubGroup = DeductionTaxSubGroup;
    var DeductionTaxSubGroupKey = (function () {
        function DeductionTaxSubGroupKey() {
        }
        return DeductionTaxSubGroupKey;
    }());
    SAPB1.DeductionTaxSubGroupKey = DeductionTaxSubGroupKey;
    var DeductionTaxSubGroupParams = (function () {
        function DeductionTaxSubGroupParams() {
        }
        return DeductionTaxSubGroupParams;
    }());
    SAPB1.DeductionTaxSubGroupParams = DeductionTaxSubGroupParams;
    var TaxCodeDetermination = (function () {
        function TaxCodeDetermination() {
        }
        return TaxCodeDetermination;
    }());
    SAPB1.TaxCodeDetermination = TaxCodeDetermination;
    var TaxCodeDeterminationKey = (function () {
        function TaxCodeDeterminationKey() {
        }
        return TaxCodeDeterminationKey;
    }());
    SAPB1.TaxCodeDeterminationKey = TaxCodeDeterminationKey;
    var TaxCodeDeterminationParams = (function () {
        function TaxCodeDeterminationParams() {
        }
        return TaxCodeDeterminationParams;
    }());
    SAPB1.TaxCodeDeterminationParams = TaxCodeDeterminationParams;
    var CostCenterType = (function () {
        function CostCenterType() {
        }
        return CostCenterType;
    }());
    SAPB1.CostCenterType = CostCenterType;
    var CostCenterTypeKey = (function () {
        function CostCenterTypeKey() {
        }
        return CostCenterTypeKey;
    }());
    SAPB1.CostCenterTypeKey = CostCenterTypeKey;
    var CostCenterTypeParams = (function () {
        function CostCenterTypeParams() {
        }
        return CostCenterTypeParams;
    }());
    SAPB1.CostCenterTypeParams = CostCenterTypeParams;
    var RclRecurringTransactionParams = (function () {
        function RclRecurringTransactionParams() {
        }
        return RclRecurringTransactionParams;
    }());
    SAPB1.RclRecurringTransactionParams = RclRecurringTransactionParams;
    var RclRecurringTransactionParamsKey = (function () {
        function RclRecurringTransactionParamsKey() {
        }
        return RclRecurringTransactionParamsKey;
    }());
    SAPB1.RclRecurringTransactionParamsKey = RclRecurringTransactionParamsKey;
    var RclRecurringTransaction = (function () {
        function RclRecurringTransaction() {
        }
        return RclRecurringTransaction;
    }());
    SAPB1.RclRecurringTransaction = RclRecurringTransaction;
    var RclRecurringExecutionParams = (function () {
        function RclRecurringExecutionParams() {
        }
        return RclRecurringExecutionParams;
    }());
    SAPB1.RclRecurringExecutionParams = RclRecurringExecutionParams;
    var AccrualType = (function () {
        function AccrualType() {
        }
        return AccrualType;
    }());
    SAPB1.AccrualType = AccrualType;
    var AccrualTypeKey = (function () {
        function AccrualTypeKey() {
        }
        return AccrualTypeKey;
    }());
    SAPB1.AccrualTypeKey = AccrualTypeKey;
    var AccrualTypeParams = (function () {
        function AccrualTypeParams() {
        }
        return AccrualTypeParams;
    }());
    SAPB1.AccrualTypeParams = AccrualTypeParams;
    var NFModel = (function () {
        function NFModel() {
        }
        return NFModel;
    }());
    SAPB1.NFModel = NFModel;
    var NFModelKey = (function () {
        function NFModelKey() {
        }
        return NFModelKey;
    }());
    SAPB1.NFModelKey = NFModelKey;
    var NFModelParams = (function () {
        function NFModelParams() {
        }
        return NFModelParams;
    }());
    SAPB1.NFModelParams = NFModelParams;
    var BrazilStringIndexer = (function () {
        function BrazilStringIndexer() {
        }
        return BrazilStringIndexer;
    }());
    SAPB1.BrazilStringIndexer = BrazilStringIndexer;
    var BrazilStringIndexerKey = (function () {
        function BrazilStringIndexerKey() {
        }
        return BrazilStringIndexerKey;
    }());
    SAPB1.BrazilStringIndexerKey = BrazilStringIndexerKey;
    var BrazilStringIndexerParams = (function () {
        function BrazilStringIndexerParams() {
        }
        return BrazilStringIndexerParams;
    }());
    SAPB1.BrazilStringIndexerParams = BrazilStringIndexerParams;
    var BrazilNumericIndexer = (function () {
        function BrazilNumericIndexer() {
        }
        return BrazilNumericIndexer;
    }());
    SAPB1.BrazilNumericIndexer = BrazilNumericIndexer;
    var BrazilNumericIndexerKey = (function () {
        function BrazilNumericIndexerKey() {
        }
        return BrazilNumericIndexerKey;
    }());
    SAPB1.BrazilNumericIndexerKey = BrazilNumericIndexerKey;
    var BrazilNumericIndexerParams = (function () {
        function BrazilNumericIndexerParams() {
        }
        return BrazilNumericIndexerParams;
    }());
    SAPB1.BrazilNumericIndexerParams = BrazilNumericIndexerParams;
    var BrazilFuelIndexer = (function () {
        function BrazilFuelIndexer() {
        }
        return BrazilFuelIndexer;
    }());
    SAPB1.BrazilFuelIndexer = BrazilFuelIndexer;
    var BrazilFuelIndexerKey = (function () {
        function BrazilFuelIndexerKey() {
        }
        return BrazilFuelIndexerKey;
    }());
    SAPB1.BrazilFuelIndexerKey = BrazilFuelIndexerKey;
    var BrazilFuelIndexerParams = (function () {
        function BrazilFuelIndexerParams() {
        }
        return BrazilFuelIndexerParams;
    }());
    SAPB1.BrazilFuelIndexerParams = BrazilFuelIndexerParams;
    var BrazilBeverageIndexer = (function () {
        function BrazilBeverageIndexer() {
        }
        return BrazilBeverageIndexer;
    }());
    SAPB1.BrazilBeverageIndexer = BrazilBeverageIndexer;
    var BrazilBeverageIndexerKey = (function () {
        function BrazilBeverageIndexerKey() {
        }
        return BrazilBeverageIndexerKey;
    }());
    SAPB1.BrazilBeverageIndexerKey = BrazilBeverageIndexerKey;
    var BrazilBeverageIndexerParams = (function () {
        function BrazilBeverageIndexerParams() {
        }
        return BrazilBeverageIndexerParams;
    }());
    SAPB1.BrazilBeverageIndexerParams = BrazilBeverageIndexerParams;
    var LegalData = (function () {
        function LegalData() {
        }
        return LegalData;
    }());
    SAPB1.LegalData = LegalData;
    var LegalDataKey = (function () {
        function LegalDataKey() {
        }
        return LegalDataKey;
    }());
    SAPB1.LegalDataKey = LegalDataKey;
    var LegalDataDetail = (function () {
        function LegalDataDetail() {
        }
        return LegalDataDetail;
    }());
    SAPB1.LegalDataDetail = LegalDataDetail;
    var LegalDataParams = (function () {
        function LegalDataParams() {
        }
        return LegalDataParams;
    }());
    SAPB1.LegalDataParams = LegalDataParams;
    var FiscalPrinter = (function () {
        function FiscalPrinter() {
        }
        return FiscalPrinter;
    }());
    SAPB1.FiscalPrinter = FiscalPrinter;
    var FiscalPrinterKey = (function () {
        function FiscalPrinterKey() {
        }
        return FiscalPrinterKey;
    }());
    SAPB1.FiscalPrinterKey = FiscalPrinterKey;
    var FiscalPrinterParams = (function () {
        function FiscalPrinterParams() {
        }
        return FiscalPrinterParams;
    }());
    SAPB1.FiscalPrinterParams = FiscalPrinterParams;
    var CustomsGroup = (function () {
        function CustomsGroup() {
        }
        return CustomsGroup;
    }());
    SAPB1.CustomsGroup = CustomsGroup;
    var CustomsGroupKey = (function () {
        function CustomsGroupKey() {
        }
        return CustomsGroupKey;
    }());
    SAPB1.CustomsGroupKey = CustomsGroupKey;
    var ChecksforPayment = (function () {
        function ChecksforPayment() {
        }
        return ChecksforPayment;
    }());
    SAPB1.ChecksforPayment = ChecksforPayment;
    var ChecksforPaymentKey = (function () {
        function ChecksforPaymentKey() {
        }
        return ChecksforPaymentKey;
    }());
    SAPB1.ChecksforPaymentKey = ChecksforPaymentKey;
    var ChecksforPaymentLine = (function () {
        function ChecksforPaymentLine() {
        }
        return ChecksforPaymentLine;
    }());
    SAPB1.ChecksforPaymentLine = ChecksforPaymentLine;
    var PriceListParams = (function () {
        function PriceListParams() {
        }
        return PriceListParams;
    }());
    SAPB1.PriceListParams = PriceListParams;
    var PriceList = (function () {
        function PriceList() {
        }
        return PriceList;
    }());
    SAPB1.PriceList = PriceList;
    var PriceListKey = (function () {
        function PriceListKey() {
        }
        return PriceListKey;
    }());
    SAPB1.PriceListKey = PriceListKey;
    var ProfitCenter = (function () {
        function ProfitCenter() {
        }
        return ProfitCenter;
    }());
    SAPB1.ProfitCenter = ProfitCenter;
    var ProfitCenterKey = (function () {
        function ProfitCenterKey() {
        }
        return ProfitCenterKey;
    }());
    SAPB1.ProfitCenterKey = ProfitCenterKey;
    var ProfitCenterParams = (function () {
        function ProfitCenterParams() {
        }
        return ProfitCenterParams;
    }());
    SAPB1.ProfitCenterParams = ProfitCenterParams;
    var DistributionRule = (function () {
        function DistributionRule() {
        }
        return DistributionRule;
    }());
    SAPB1.DistributionRule = DistributionRule;
    var DistributionRuleKey = (function () {
        function DistributionRuleKey() {
        }
        return DistributionRuleKey;
    }());
    SAPB1.DistributionRuleKey = DistributionRuleKey;
    var DistributionRuleLine = (function () {
        function DistributionRuleLine() {
        }
        return DistributionRuleLine;
    }());
    SAPB1.DistributionRuleLine = DistributionRuleLine;
    var DistributionRuleParams = (function () {
        function DistributionRuleParams() {
        }
        return DistributionRuleParams;
    }());
    SAPB1.DistributionRuleParams = DistributionRuleParams;
    var Project = (function () {
        function Project() {
        }
        return Project;
    }());
    SAPB1.Project = Project;
    var ProjectKey = (function () {
        function ProjectKey() {
        }
        return ProjectKey;
    }());
    SAPB1.ProjectKey = ProjectKey;
    var ProjectParams = (function () {
        function ProjectParams() {
        }
        return ProjectParams;
    }());
    SAPB1.ProjectParams = ProjectParams;
    var Warehouse = (function () {
        function Warehouse() {
        }
        return Warehouse;
    }());
    SAPB1.Warehouse = Warehouse;
    var WarehouseKey = (function () {
        function WarehouseKey() {
        }
        return WarehouseKey;
    }());
    SAPB1.WarehouseKey = WarehouseKey;
    var CommissionGroup = (function () {
        function CommissionGroup() {
        }
        return CommissionGroup;
    }());
    SAPB1.CommissionGroup = CommissionGroup;
    var CommissionGroupKey = (function () {
        function CommissionGroupKey() {
        }
        return CommissionGroupKey;
    }());
    SAPB1.CommissionGroupKey = CommissionGroupKey;
    var ProductTreeParams = (function () {
        function ProductTreeParams() {
        }
        return ProductTreeParams;
    }());
    SAPB1.ProductTreeParams = ProductTreeParams;
    var ProductTree = (function () {
        function ProductTree() {
        }
        return ProductTree;
    }());
    SAPB1.ProductTree = ProductTree;
    var ProductTreeKey = (function () {
        function ProductTreeKey() {
        }
        return ProductTreeKey;
    }());
    SAPB1.ProductTreeKey = ProductTreeKey;
    var ProductTreeLine = (function () {
        function ProductTreeLine() {
        }
        return ProductTreeLine;
    }());
    SAPB1.ProductTreeLine = ProductTreeLine;
    var WorkOrder = (function () {
        function WorkOrder() {
        }
        return WorkOrder;
    }());
    SAPB1.WorkOrder = WorkOrder;
    var WorkOrderKey = (function () {
        function WorkOrderKey() {
        }
        return WorkOrderKey;
    }());
    SAPB1.WorkOrderKey = WorkOrderKey;
    var WorkOrder_Line = (function () {
        function WorkOrder_Line() {
        }
        return WorkOrder_Line;
    }());
    SAPB1.WorkOrder_Line = WorkOrder_Line;
    var LandedCost = (function () {
        function LandedCost() {
        }
        return LandedCost;
    }());
    SAPB1.LandedCost = LandedCost;
    var LandedCostKey = (function () {
        function LandedCostKey() {
        }
        return LandedCostKey;
    }());
    SAPB1.LandedCostKey = LandedCostKey;
    var LandedCost_ItemLine = (function () {
        function LandedCost_ItemLine() {
        }
        return LandedCost_ItemLine;
    }());
    SAPB1.LandedCost_ItemLine = LandedCost_ItemLine;
    var LandedCost_CostLine = (function () {
        function LandedCost_CostLine() {
        }
        return LandedCost_CostLine;
    }());
    SAPB1.LandedCost_CostLine = LandedCost_CostLine;
    var LandedCostParams = (function () {
        function LandedCostParams() {
        }
        return LandedCostParams;
    }());
    SAPB1.LandedCostParams = LandedCostParams;
    var SpecialPriceParams = (function () {
        function SpecialPriceParams() {
        }
        return SpecialPriceParams;
    }());
    SAPB1.SpecialPriceParams = SpecialPriceParams;
    var SpecialPrice = (function () {
        function SpecialPrice() {
        }
        return SpecialPrice;
    }());
    SAPB1.SpecialPrice = SpecialPrice;
    var SpecialPriceKey = (function () {
        function SpecialPriceKey() {
        }
        return SpecialPriceKey;
    }());
    SAPB1.SpecialPriceKey = SpecialPriceKey;
    var SpecialPriceDataArea = (function () {
        function SpecialPriceDataArea() {
        }
        return SpecialPriceDataArea;
    }());
    SAPB1.SpecialPriceDataArea = SpecialPriceDataArea;
    var SpecialPriceQuantityArea = (function () {
        function SpecialPriceQuantityArea() {
        }
        return SpecialPriceQuantityArea;
    }());
    SAPB1.SpecialPriceQuantityArea = SpecialPriceQuantityArea;
    var CreditPaymentMethod = (function () {
        function CreditPaymentMethod() {
        }
        return CreditPaymentMethod;
    }());
    SAPB1.CreditPaymentMethod = CreditPaymentMethod;
    var CreditPaymentMethodKey = (function () {
        function CreditPaymentMethodKey() {
        }
        return CreditPaymentMethodKey;
    }());
    SAPB1.CreditPaymentMethodKey = CreditPaymentMethodKey;
    var CreditCardPayment = (function () {
        function CreditCardPayment() {
        }
        return CreditCardPayment;
    }());
    SAPB1.CreditCardPayment = CreditCardPayment;
    var CreditCardPaymentKey = (function () {
        function CreditCardPaymentKey() {
        }
        return CreditCardPaymentKey;
    }());
    SAPB1.CreditCardPaymentKey = CreditCardPaymentKey;
    var AlternateCatNum = (function () {
        function AlternateCatNum() {
        }
        return AlternateCatNum;
    }());
    SAPB1.AlternateCatNum = AlternateCatNum;
    var AlternateCatNumKey = (function () {
        function AlternateCatNumKey() {
        }
        return AlternateCatNumKey;
    }());
    SAPB1.AlternateCatNumKey = AlternateCatNumKey;
    var BudgetParams = (function () {
        function BudgetParams() {
        }
        return BudgetParams;
    }());
    SAPB1.BudgetParams = BudgetParams;
    var Budget = (function () {
        function Budget() {
        }
        return Budget;
    }());
    SAPB1.Budget = Budget;
    var BudgetKey = (function () {
        function BudgetKey() {
        }
        return BudgetKey;
    }());
    SAPB1.BudgetKey = BudgetKey;
    var BudgetLine = (function () {
        function BudgetLine() {
        }
        return BudgetLine;
    }());
    SAPB1.BudgetLine = BudgetLine;
    var BudgetCostAccountingLine = (function () {
        function BudgetCostAccountingLine() {
        }
        return BudgetCostAccountingLine;
    }());
    SAPB1.BudgetCostAccountingLine = BudgetCostAccountingLine;
    var BudgetDistribution = (function () {
        function BudgetDistribution() {
        }
        return BudgetDistribution;
    }());
    SAPB1.BudgetDistribution = BudgetDistribution;
    var BudgetDistributionKey = (function () {
        function BudgetDistributionKey() {
        }
        return BudgetDistributionKey;
    }());
    SAPB1.BudgetDistributionKey = BudgetDistributionKey;
    var ItemProperty = (function () {
        function ItemProperty() {
        }
        return ItemProperty;
    }());
    SAPB1.ItemProperty = ItemProperty;
    var ItemPropertyKey = (function () {
        function ItemPropertyKey() {
        }
        return ItemPropertyKey;
    }());
    SAPB1.ItemPropertyKey = ItemPropertyKey;
    var AlertManagement = (function () {
        function AlertManagement() {
        }
        return AlertManagement;
    }());
    SAPB1.AlertManagement = AlertManagement;
    var AlertManagementKey = (function () {
        function AlertManagementKey() {
        }
        return AlertManagementKey;
    }());
    SAPB1.AlertManagementKey = AlertManagementKey;
    var AlertManagementRecipient = (function () {
        function AlertManagementRecipient() {
        }
        return AlertManagementRecipient;
    }());
    SAPB1.AlertManagementRecipient = AlertManagementRecipient;
    var AlertManagementDocument = (function () {
        function AlertManagementDocument() {
        }
        return AlertManagementDocument;
    }());
    SAPB1.AlertManagementDocument = AlertManagementDocument;
    var AlertManagementParams = (function () {
        function AlertManagementParams() {
        }
        return AlertManagementParams;
    }());
    SAPB1.AlertManagementParams = AlertManagementParams;
    var Message = (function () {
        function Message() {
        }
        return Message;
    }());
    SAPB1.Message = Message;
    var MessageKey = (function () {
        function MessageKey() {
        }
        return MessageKey;
    }());
    SAPB1.MessageKey = MessageKey;
    var MessageDataColumn = (function () {
        function MessageDataColumn() {
        }
        return MessageDataColumn;
    }());
    SAPB1.MessageDataColumn = MessageDataColumn;
    var MessageDataLine = (function () {
        function MessageDataLine() {
        }
        return MessageDataLine;
    }());
    SAPB1.MessageDataLine = MessageDataLine;
    var Recipient = (function () {
        function Recipient() {
        }
        return Recipient;
    }());
    SAPB1.Recipient = Recipient;
    var MessageHeader = (function () {
        function MessageHeader() {
        }
        return MessageHeader;
    }());
    SAPB1.MessageHeader = MessageHeader;
    var BudgetScenario = (function () {
        function BudgetScenario() {
        }
        return BudgetScenario;
    }());
    SAPB1.BudgetScenario = BudgetScenario;
    var BudgetScenarioKey = (function () {
        function BudgetScenarioKey() {
        }
        return BudgetScenarioKey;
    }());
    SAPB1.BudgetScenarioKey = BudgetScenarioKey;
    var UserDefaultGroup = (function () {
        function UserDefaultGroup() {
        }
        return UserDefaultGroup;
    }());
    SAPB1.UserDefaultGroup = UserDefaultGroup;
    var UserDefaultGroupKey = (function () {
        function UserDefaultGroupKey() {
        }
        return UserDefaultGroupKey;
    }());
    SAPB1.UserDefaultGroupKey = UserDefaultGroupKey;
    var SalesOpportunitiesParams = (function () {
        function SalesOpportunitiesParams() {
        }
        return SalesOpportunitiesParams;
    }());
    SAPB1.SalesOpportunitiesParams = SalesOpportunitiesParams;
    var SalesOpportunities = (function () {
        function SalesOpportunities() {
        }
        return SalesOpportunities;
    }());
    SAPB1.SalesOpportunities = SalesOpportunities;
    var SalesOpportunitiesKey = (function () {
        function SalesOpportunitiesKey() {
        }
        return SalesOpportunitiesKey;
    }());
    SAPB1.SalesOpportunitiesKey = SalesOpportunitiesKey;
    var SalesOpportunitiesLine = (function () {
        function SalesOpportunitiesLine() {
        }
        return SalesOpportunitiesLine;
    }());
    SAPB1.SalesOpportunitiesLine = SalesOpportunitiesLine;
    var SalesOpportunitiesCompetitionItem = (function () {
        function SalesOpportunitiesCompetitionItem() {
        }
        return SalesOpportunitiesCompetitionItem;
    }());
    SAPB1.SalesOpportunitiesCompetitionItem = SalesOpportunitiesCompetitionItem;
    var SalesOpportunitiesPartner = (function () {
        function SalesOpportunitiesPartner() {
        }
        return SalesOpportunitiesPartner;
    }());
    SAPB1.SalesOpportunitiesPartner = SalesOpportunitiesPartner;
    var SalesOpportunitiesInterest = (function () {
        function SalesOpportunitiesInterest() {
        }
        return SalesOpportunitiesInterest;
    }());
    SAPB1.SalesOpportunitiesInterest = SalesOpportunitiesInterest;
    var SalesOpportunitiesReason = (function () {
        function SalesOpportunitiesReason() {
        }
        return SalesOpportunitiesReason;
    }());
    SAPB1.SalesOpportunitiesReason = SalesOpportunitiesReason;
    var SalesOpportunityInterestSetup = (function () {
        function SalesOpportunityInterestSetup() {
        }
        return SalesOpportunityInterestSetup;
    }());
    SAPB1.SalesOpportunityInterestSetup = SalesOpportunityInterestSetup;
    var SalesOpportunityInterestSetupKey = (function () {
        function SalesOpportunityInterestSetupKey() {
        }
        return SalesOpportunityInterestSetupKey;
    }());
    SAPB1.SalesOpportunityInterestSetupKey = SalesOpportunityInterestSetupKey;
    var SalesOpportunityInterestSetupParams = (function () {
        function SalesOpportunityInterestSetupParams() {
        }
        return SalesOpportunityInterestSetupParams;
    }());
    SAPB1.SalesOpportunityInterestSetupParams = SalesOpportunityInterestSetupParams;
    var ATTACHMENTS = (function () {
        function ATTACHMENTS() {
        }
        return ATTACHMENTS;
    }());
    SAPB1.ATTACHMENTS = ATTACHMENTS;
    var ATTACHMENTSKey = (function () {
        function ATTACHMENTSKey() {
        }
        return ATTACHMENTSKey;
    }());
    SAPB1.ATTACHMENTSKey = ATTACHMENTSKey;
    var ATTACHMENTSParams = (function () {
        function ATTACHMENTSParams() {
        }
        return ATTACHMENTSParams;
    }());
    SAPB1.ATTACHMENTSParams = ATTACHMENTSParams;
    var InvokeParams = (function () {
        function InvokeParams() {
        }
        return InvokeParams;
    }());
    SAPB1.InvokeParams = InvokeParams;
    var BXPAUDIT = (function () {
        function BXPAUDIT() {
        }
        return BXPAUDIT;
    }());
    SAPB1.BXPAUDIT = BXPAUDIT;
    var BXPAUDITKey = (function () {
        function BXPAUDITKey() {
        }
        return BXPAUDITKey;
    }());
    SAPB1.BXPAUDITKey = BXPAUDITKey;
    var BXPAUDITParams = (function () {
        function BXPAUDITParams() {
        }
        return BXPAUDITParams;
    }());
    SAPB1.BXPAUDITParams = BXPAUDITParams;
    var BXPCONFIG = (function () {
        function BXPCONFIG() {
        }
        return BXPCONFIG;
    }());
    SAPB1.BXPCONFIG = BXPCONFIG;
    var BXPCONFIGKey = (function () {
        function BXPCONFIGKey() {
        }
        return BXPCONFIGKey;
    }());
    SAPB1.BXPCONFIGKey = BXPCONFIGKey;
    var BXPCONFIGParams = (function () {
        function BXPCONFIGParams() {
        }
        return BXPCONFIGParams;
    }());
    SAPB1.BXPCONFIGParams = BXPCONFIGParams;
    var BXPCTRLPREFS = (function () {
        function BXPCTRLPREFS() {
        }
        return BXPCTRLPREFS;
    }());
    SAPB1.BXPCTRLPREFS = BXPCTRLPREFS;
    var BXPCTRLPREFSKey = (function () {
        function BXPCTRLPREFSKey() {
        }
        return BXPCTRLPREFSKey;
    }());
    SAPB1.BXPCTRLPREFSKey = BXPCTRLPREFSKey;
    var BXPCTRLPREFSParams = (function () {
        function BXPCTRLPREFSParams() {
        }
        return BXPCTRLPREFSParams;
    }());
    SAPB1.BXPCTRLPREFSParams = BXPCTRLPREFSParams;
    var BXPCUSTFD = (function () {
        function BXPCUSTFD() {
        }
        return BXPCUSTFD;
    }());
    SAPB1.BXPCUSTFD = BXPCUSTFD;
    var BXPCUSTFDKey = (function () {
        function BXPCUSTFDKey() {
        }
        return BXPCUSTFDKey;
    }());
    SAPB1.BXPCUSTFDKey = BXPCUSTFDKey;
    var BXPCUSTFDParams = (function () {
        function BXPCUSTFDParams() {
        }
        return BXPCUSTFDParams;
    }());
    SAPB1.BXPCUSTFDParams = BXPCUSTFDParams;
    var BXPCUSTSORTDEF = (function () {
        function BXPCUSTSORTDEF() {
        }
        return BXPCUSTSORTDEF;
    }());
    SAPB1.BXPCUSTSORTDEF = BXPCUSTSORTDEF;
    var BXPCUSTSORTDEFKey = (function () {
        function BXPCUSTSORTDEFKey() {
        }
        return BXPCUSTSORTDEFKey;
    }());
    SAPB1.BXPCUSTSORTDEFKey = BXPCUSTSORTDEFKey;
    var BXPCUSTSORTDEFParams = (function () {
        function BXPCUSTSORTDEFParams() {
        }
        return BXPCUSTSORTDEFParams;
    }());
    SAPB1.BXPCUSTSORTDEFParams = BXPCUSTSORTDEFParams;
    var BXPFORMPREFS = (function () {
        function BXPFORMPREFS() {
        }
        return BXPFORMPREFS;
    }());
    SAPB1.BXPFORMPREFS = BXPFORMPREFS;
    var BXPFORMPREFSKey = (function () {
        function BXPFORMPREFSKey() {
        }
        return BXPFORMPREFSKey;
    }());
    SAPB1.BXPFORMPREFSKey = BXPFORMPREFSKey;
    var BXPFORMPREFSParams = (function () {
        function BXPFORMPREFSParams() {
        }
        return BXPFORMPREFSParams;
    }());
    SAPB1.BXPFORMPREFSParams = BXPFORMPREFSParams;
    var BXPLICFEAT = (function () {
        function BXPLICFEAT() {
        }
        return BXPLICFEAT;
    }());
    SAPB1.BXPLICFEAT = BXPLICFEAT;
    var BXPLICFEATKey = (function () {
        function BXPLICFEATKey() {
        }
        return BXPLICFEATKey;
    }());
    SAPB1.BXPLICFEATKey = BXPLICFEATKey;
    var BXPLICFEATParams = (function () {
        function BXPLICFEATParams() {
        }
        return BXPLICFEATParams;
    }());
    SAPB1.BXPLICFEATParams = BXPLICFEATParams;
    var BXPLICIP = (function () {
        function BXPLICIP() {
        }
        return BXPLICIP;
    }());
    SAPB1.BXPLICIP = BXPLICIP;
    var BXPLICIPKey = (function () {
        function BXPLICIPKey() {
        }
        return BXPLICIPKey;
    }());
    SAPB1.BXPLICIPKey = BXPLICIPKey;
    var BXPLICIPParams = (function () {
        function BXPLICIPParams() {
        }
        return BXPLICIPParams;
    }());
    SAPB1.BXPLICIPParams = BXPLICIPParams;
    var BXPLICSET = (function () {
        function BXPLICSET() {
        }
        return BXPLICSET;
    }());
    SAPB1.BXPLICSET = BXPLICSET;
    var BXPLICSETKey = (function () {
        function BXPLICSETKey() {
        }
        return BXPLICSETKey;
    }());
    SAPB1.BXPLICSETKey = BXPLICSETKey;
    var BXPLICSETParams = (function () {
        function BXPLICSETParams() {
        }
        return BXPLICSETParams;
    }());
    SAPB1.BXPLICSETParams = BXPLICSETParams;
    var BXPLICTER = (function () {
        function BXPLICTER() {
        }
        return BXPLICTER;
    }());
    SAPB1.BXPLICTER = BXPLICTER;
    var BXPLICTERKey = (function () {
        function BXPLICTERKey() {
        }
        return BXPLICTERKey;
    }());
    SAPB1.BXPLICTERKey = BXPLICTERKey;
    var BXPLICTERParams = (function () {
        function BXPLICTERParams() {
        }
        return BXPLICTERParams;
    }());
    SAPB1.BXPLICTERParams = BXPLICTERParams;
    var BXPLMSEMPPRINTER = (function () {
        function BXPLMSEMPPRINTER() {
        }
        return BXPLMSEMPPRINTER;
    }());
    SAPB1.BXPLMSEMPPRINTER = BXPLMSEMPPRINTER;
    var BXPLMSEMPPRINTERKey = (function () {
        function BXPLMSEMPPRINTERKey() {
        }
        return BXPLMSEMPPRINTERKey;
    }());
    SAPB1.BXPLMSEMPPRINTERKey = BXPLMSEMPPRINTERKey;
    var BXPLMSEMPPRINTERParams = (function () {
        function BXPLMSEMPPRINTERParams() {
        }
        return BXPLMSEMPPRINTERParams;
    }());
    SAPB1.BXPLMSEMPPRINTERParams = BXPLMSEMPPRINTERParams;
    var BXPLMSMOBINVCOUNT = (function () {
        function BXPLMSMOBINVCOUNT() {
        }
        return BXPLMSMOBINVCOUNT;
    }());
    SAPB1.BXPLMSMOBINVCOUNT = BXPLMSMOBINVCOUNT;
    var BXPLMSMOBINVCOUNTKey = (function () {
        function BXPLMSMOBINVCOUNTKey() {
        }
        return BXPLMSMOBINVCOUNTKey;
    }());
    SAPB1.BXPLMSMOBINVCOUNTKey = BXPLMSMOBINVCOUNTKey;
    var BXPLMSMOBINVCOUNTParams = (function () {
        function BXPLMSMOBINVCOUNTParams() {
        }
        return BXPLMSMOBINVCOUNTParams;
    }());
    SAPB1.BXPLMSMOBINVCOUNTParams = BXPLMSMOBINVCOUNTParams;
    var BXPLMSMOBLOG = (function () {
        function BXPLMSMOBLOG() {
        }
        return BXPLMSMOBLOG;
    }());
    SAPB1.BXPLMSMOBLOG = BXPLMSMOBLOG;
    var BXPLMSMOBLOGKey = (function () {
        function BXPLMSMOBLOGKey() {
        }
        return BXPLMSMOBLOGKey;
    }());
    SAPB1.BXPLMSMOBLOGKey = BXPLMSMOBLOGKey;
    var BXPLMSMOBLOGParams = (function () {
        function BXPLMSMOBLOGParams() {
        }
        return BXPLMSMOBLOGParams;
    }());
    SAPB1.BXPLMSMOBLOGParams = BXPLMSMOBLOGParams;
    var BXPLMSMOBPICK = (function () {
        function BXPLMSMOBPICK() {
        }
        return BXPLMSMOBPICK;
    }());
    SAPB1.BXPLMSMOBPICK = BXPLMSMOBPICK;
    var BXPLMSMOBPICKKey = (function () {
        function BXPLMSMOBPICKKey() {
        }
        return BXPLMSMOBPICKKey;
    }());
    SAPB1.BXPLMSMOBPICKKey = BXPLMSMOBPICKKey;
    var BXPLMSMOBPICKParams = (function () {
        function BXPLMSMOBPICKParams() {
        }
        return BXPLMSMOBPICKParams;
    }());
    SAPB1.BXPLMSMOBPICKParams = BXPLMSMOBPICKParams;
    var BXPLMSMOBTEN = (function () {
        function BXPLMSMOBTEN() {
        }
        return BXPLMSMOBTEN;
    }());
    SAPB1.BXPLMSMOBTEN = BXPLMSMOBTEN;
    var BXPLMSMOBTENKey = (function () {
        function BXPLMSMOBTENKey() {
        }
        return BXPLMSMOBTENKey;
    }());
    SAPB1.BXPLMSMOBTENKey = BXPLMSMOBTENKey;
    var BXPLMSMOBTENParams = (function () {
        function BXPLMSMOBTENParams() {
        }
        return BXPLMSMOBTENParams;
    }());
    SAPB1.BXPLMSMOBTENParams = BXPLMSMOBTENParams;
    var BXPLMSMOBTHD = (function () {
        function BXPLMSMOBTHD() {
        }
        return BXPLMSMOBTHD;
    }());
    SAPB1.BXPLMSMOBTHD = BXPLMSMOBTHD;
    var BXPLMSMOBTHDKey = (function () {
        function BXPLMSMOBTHDKey() {
        }
        return BXPLMSMOBTHDKey;
    }());
    SAPB1.BXPLMSMOBTHDKey = BXPLMSMOBTHDKey;
    var BXPLMSMOBTHDParams = (function () {
        function BXPLMSMOBTHDParams() {
        }
        return BXPLMSMOBTHDParams;
    }());
    SAPB1.BXPLMSMOBTHDParams = BXPLMSMOBTHDParams;
    var BXPLMSMOBTLN = (function () {
        function BXPLMSMOBTLN() {
        }
        return BXPLMSMOBTLN;
    }());
    SAPB1.BXPLMSMOBTLN = BXPLMSMOBTLN;
    var BXPLMSMOBTLNKey = (function () {
        function BXPLMSMOBTLNKey() {
        }
        return BXPLMSMOBTLNKey;
    }());
    SAPB1.BXPLMSMOBTLNKey = BXPLMSMOBTLNKey;
    var BXPLMSMOBTLNParams = (function () {
        function BXPLMSMOBTLNParams() {
        }
        return BXPLMSMOBTLNParams;
    }());
    SAPB1.BXPLMSMOBTLNParams = BXPLMSMOBTLNParams;
    var BXPLMSPRINTER = (function () {
        function BXPLMSPRINTER() {
        }
        return BXPLMSPRINTER;
    }());
    SAPB1.BXPLMSPRINTER = BXPLMSPRINTER;
    var BXPLMSPRINTERKey = (function () {
        function BXPLMSPRINTERKey() {
        }
        return BXPLMSPRINTERKey;
    }());
    SAPB1.BXPLMSPRINTERKey = BXPLMSPRINTERKey;
    var BXPLMSPRINTERParams = (function () {
        function BXPLMSPRINTERParams() {
        }
        return BXPLMSPRINTERParams;
    }());
    SAPB1.BXPLMSPRINTERParams = BXPLMSPRINTERParams;
    var BXPLMSPRINTLAYOUT = (function () {
        function BXPLMSPRINTLAYOUT() {
        }
        return BXPLMSPRINTLAYOUT;
    }());
    SAPB1.BXPLMSPRINTLAYOUT = BXPLMSPRINTLAYOUT;
    var BXPLMSPRINTLAYOUTKey = (function () {
        function BXPLMSPRINTLAYOUTKey() {
        }
        return BXPLMSPRINTLAYOUTKey;
    }());
    SAPB1.BXPLMSPRINTLAYOUTKey = BXPLMSPRINTLAYOUTKey;
    var BXPLMSPRINTLAYOUTParams = (function () {
        function BXPLMSPRINTLAYOUTParams() {
        }
        return BXPLMSPRINTLAYOUTParams;
    }());
    SAPB1.BXPLMSPRINTLAYOUTParams = BXPLMSPRINTLAYOUTParams;
    var BXPLMSPRINTLAYSET = (function () {
        function BXPLMSPRINTLAYSET() {
        }
        return BXPLMSPRINTLAYSET;
    }());
    SAPB1.BXPLMSPRINTLAYSET = BXPLMSPRINTLAYSET;
    var BXPLMSPRINTLAYSETKey = (function () {
        function BXPLMSPRINTLAYSETKey() {
        }
        return BXPLMSPRINTLAYSETKey;
    }());
    SAPB1.BXPLMSPRINTLAYSETKey = BXPLMSPRINTLAYSETKey;
    var BXPLMSPRINTLAYSETParams = (function () {
        function BXPLMSPRINTLAYSETParams() {
        }
        return BXPLMSPRINTLAYSETParams;
    }());
    SAPB1.BXPLMSPRINTLAYSETParams = BXPLMSPRINTLAYSETParams;
    var BXPLMSUSRPREF = (function () {
        function BXPLMSUSRPREF() {
        }
        return BXPLMSUSRPREF;
    }());
    SAPB1.BXPLMSUSRPREF = BXPLMSUSRPREF;
    var BXPLMSUSRPREFKey = (function () {
        function BXPLMSUSRPREFKey() {
        }
        return BXPLMSUSRPREFKey;
    }());
    SAPB1.BXPLMSUSRPREFKey = BXPLMSUSRPREFKey;
    var BXPLMSUSRPREFParams = (function () {
        function BXPLMSUSRPREFParams() {
        }
        return BXPLMSUSRPREFParams;
    }());
    SAPB1.BXPLMSUSRPREFParams = BXPLMSUSRPREFParams;
    var BXPLOG = (function () {
        function BXPLOG() {
        }
        return BXPLOG;
    }());
    SAPB1.BXPLOG = BXPLOG;
    var BXPLOGKey = (function () {
        function BXPLOGKey() {
        }
        return BXPLOGKey;
    }());
    SAPB1.BXPLOGKey = BXPLOGKey;
    var BXPLOGParams = (function () {
        function BXPLOGParams() {
        }
        return BXPLOGParams;
    }());
    SAPB1.BXPLOGParams = BXPLOGParams;
    var BXPREPORT = (function () {
        function BXPREPORT() {
        }
        return BXPREPORT;
    }());
    SAPB1.BXPREPORT = BXPREPORT;
    var BXPREPORTKey = (function () {
        function BXPREPORTKey() {
        }
        return BXPREPORTKey;
    }());
    SAPB1.BXPREPORTKey = BXPREPORTKey;
    var BXPREPORTParams = (function () {
        function BXPREPORTParams() {
        }
        return BXPREPORTParams;
    }());
    SAPB1.BXPREPORTParams = BXPREPORTParams;
    var BXPRPTPF = (function () {
        function BXPRPTPF() {
        }
        return BXPRPTPF;
    }());
    SAPB1.BXPRPTPF = BXPRPTPF;
    var BXPRPTPFKey = (function () {
        function BXPRPTPFKey() {
        }
        return BXPRPTPFKey;
    }());
    SAPB1.BXPRPTPFKey = BXPRPTPFKey;
    var BXPRPTPFParams = (function () {
        function BXPRPTPFParams() {
        }
        return BXPRPTPFParams;
    }());
    SAPB1.BXPRPTPFParams = BXPRPTPFParams;
    var BXPSEQUENCE = (function () {
        function BXPSEQUENCE() {
        }
        return BXPSEQUENCE;
    }());
    SAPB1.BXPSEQUENCE = BXPSEQUENCE;
    var BXPSEQUENCEKey = (function () {
        function BXPSEQUENCEKey() {
        }
        return BXPSEQUENCEKey;
    }());
    SAPB1.BXPSEQUENCEKey = BXPSEQUENCEKey;
    var BXPSEQUENCEParams = (function () {
        function BXPSEQUENCEParams() {
        }
        return BXPSEQUENCEParams;
    }());
    SAPB1.BXPSEQUENCEParams = BXPSEQUENCEParams;
    var BXPSYNCOBJC = (function () {
        function BXPSYNCOBJC() {
        }
        return BXPSYNCOBJC;
    }());
    SAPB1.BXPSYNCOBJC = BXPSYNCOBJC;
    var BXPSYNCOBJCKey = (function () {
        function BXPSYNCOBJCKey() {
        }
        return BXPSYNCOBJCKey;
    }());
    SAPB1.BXPSYNCOBJCKey = BXPSYNCOBJCKey;
    var BXPSYNCOBJCParams = (function () {
        function BXPSYNCOBJCParams() {
        }
        return BXPSYNCOBJCParams;
    }());
    SAPB1.BXPSYNCOBJCParams = BXPSYNCOBJCParams;
    var BXPSYNCQ = (function () {
        function BXPSYNCQ() {
        }
        return BXPSYNCQ;
    }());
    SAPB1.BXPSYNCQ = BXPSYNCQ;
    var BXPSYNCQKey = (function () {
        function BXPSYNCQKey() {
        }
        return BXPSYNCQKey;
    }());
    SAPB1.BXPSYNCQKey = BXPSYNCQKey;
    var BXPSYNCQParams = (function () {
        function BXPSYNCQParams() {
        }
        return BXPSYNCQParams;
    }());
    SAPB1.BXPSYNCQParams = BXPSYNCQParams;
    var BXPTCCONF = (function () {
        function BXPTCCONF() {
        }
        return BXPTCCONF;
    }());
    SAPB1.BXPTCCONF = BXPTCCONF;
    var BXPTCCONFKey = (function () {
        function BXPTCCONFKey() {
        }
        return BXPTCCONFKey;
    }());
    SAPB1.BXPTCCONFKey = BXPTCCONFKey;
    var BXPTCCONFParams = (function () {
        function BXPTCCONFParams() {
        }
        return BXPTCCONFParams;
    }());
    SAPB1.BXPTCCONFParams = BXPTCCONFParams;
    var BXPTRANCUST = (function () {
        function BXPTRANCUST() {
        }
        return BXPTRANCUST;
    }());
    SAPB1.BXPTRANCUST = BXPTRANCUST;
    var BXPTRANCUSTKey = (function () {
        function BXPTRANCUSTKey() {
        }
        return BXPTRANCUSTKey;
    }());
    SAPB1.BXPTRANCUSTKey = BXPTRANCUSTKey;
    var BXPTRANCUSTParams = (function () {
        function BXPTRANCUSTParams() {
        }
        return BXPTRANCUSTParams;
    }());
    SAPB1.BXPTRANCUSTParams = BXPTRANCUSTParams;
    var BXPUSRLC = (function () {
        function BXPUSRLC() {
        }
        return BXPUSRLC;
    }());
    SAPB1.BXPUSRLC = BXPUSRLC;
    var BXPUSRLCKey = (function () {
        function BXPUSRLCKey() {
        }
        return BXPUSRLCKey;
    }());
    SAPB1.BXPUSRLCKey = BXPUSRLCKey;
    var BXPUSRLCParams = (function () {
        function BXPUSRLCParams() {
        }
        return BXPUSRLCParams;
    }());
    SAPB1.BXPUSRLCParams = BXPUSRLCParams;
    var B1Session = (function () {
        function B1Session() {
        }
        return B1Session;
    }());
    SAPB1.B1Session = B1Session;
    var B1SessionKey = (function () {
        function B1SessionKey() {
        }
        return B1SessionKey;
    }());
    SAPB1.B1SessionKey = B1SessionKey;
    var ItemImage = (function () {
        function ItemImage() {
        }
        return ItemImage;
    }());
    SAPB1.ItemImage = ItemImage;
    var ItemImageKey = (function () {
        function ItemImageKey() {
        }
        return ItemImageKey;
    }());
    SAPB1.ItemImageKey = ItemImageKey;
    var ChartOfAccountParams = (function () {
        function ChartOfAccountParams() {
        }
        return ChartOfAccountParams;
    }());
    SAPB1.ChartOfAccountParams = ChartOfAccountParams;
    var ExternalCall = (function () {
        function ExternalCall() {
        }
        return ExternalCall;
    }());
    SAPB1.ExternalCall = ExternalCall;
    var CallArgument = (function () {
        function CallArgument() {
        }
        return CallArgument;
    }());
    SAPB1.CallArgument = CallArgument;
    var CallMessage = (function () {
        function CallMessage() {
        }
        return CallMessage;
    }());
    SAPB1.CallMessage = CallMessage;
    var CallMessageArgument = (function () {
        function CallMessageArgument() {
        }
        return CallMessageArgument;
    }());
    SAPB1.CallMessageArgument = CallMessageArgument;
    var ExternalCallParams = (function () {
        function ExternalCallParams() {
        }
        return ExternalCallParams;
    }());
    SAPB1.ExternalCallParams = ExternalCallParams;
    var GLAccount = (function () {
        function GLAccount() {
        }
        return GLAccount;
    }());
    SAPB1.GLAccount = GLAccount;
    var ItemPriceParams = (function () {
        function ItemPriceParams() {
        }
        return ItemPriceParams;
    }());
    SAPB1.ItemPriceParams = ItemPriceParams;
    var ItemPriceReturnParams = (function () {
        function ItemPriceReturnParams() {
        }
        return ItemPriceReturnParams;
    }());
    SAPB1.ItemPriceReturnParams = ItemPriceReturnParams;
    var AdvancedGLAccountParams = (function () {
        function AdvancedGLAccountParams() {
        }
        return AdvancedGLAccountParams;
    }());
    SAPB1.AdvancedGLAccountParams = AdvancedGLAccountParams;
    var AdvancedGLAccountReturnParams = (function () {
        function AdvancedGLAccountReturnParams() {
        }
        return AdvancedGLAccountReturnParams;
    }());
    SAPB1.AdvancedGLAccountReturnParams = AdvancedGLAccountReturnParams;
    var CompanyInfo = (function () {
        function CompanyInfo() {
        }
        return CompanyInfo;
    }());
    SAPB1.CompanyInfo = CompanyInfo;
    var AdminInfo = (function () {
        function AdminInfo() {
        }
        return AdminInfo;
    }());
    SAPB1.AdminInfo = AdminInfo;
    var ExtendedAdminInfo = (function () {
        function ExtendedAdminInfo() {
        }
        return ExtendedAdminInfo;
    }());
    SAPB1.ExtendedAdminInfo = ExtendedAdminInfo;
    var PathAdmin = (function () {
        function PathAdmin() {
        }
        return PathAdmin;
    }());
    SAPB1.PathAdmin = PathAdmin;
    var PeriodCategory = (function () {
        function PeriodCategory() {
        }
        return PeriodCategory;
    }());
    SAPB1.PeriodCategory = PeriodCategory;
    var WIPMapping = (function () {
        function WIPMapping() {
        }
        return WIPMapping;
    }());
    SAPB1.WIPMapping = WIPMapping;
    var PeriodCategoryParams = (function () {
        function PeriodCategoryParams() {
        }
        return PeriodCategoryParams;
    }());
    SAPB1.PeriodCategoryParams = PeriodCategoryParams;
    var FinancePeriod = (function () {
        function FinancePeriod() {
        }
        return FinancePeriod;
    }());
    SAPB1.FinancePeriod = FinancePeriod;
    var FinancePeriodParams = (function () {
        function FinancePeriodParams() {
        }
        return FinancePeriodParams;
    }());
    SAPB1.FinancePeriodParams = FinancePeriodParams;
    var RecordsetParams = (function () {
        function RecordsetParams() {
        }
        return RecordsetParams;
    }());
    SAPB1.RecordsetParams = RecordsetParams;
    var FeatureStatus = (function () {
        function FeatureStatus() {
        }
        return FeatureStatus;
    }());
    SAPB1.FeatureStatus = FeatureStatus;
    var TableInfo = (function () {
        function TableInfo() {
        }
        return TableInfo;
    }());
    SAPB1.TableInfo = TableInfo;
    var Blob = (function () {
        function Blob() {
        }
        return Blob;
    }());
    SAPB1.Blob = Blob;
    var BlobParams = (function () {
        function BlobParams() {
        }
        return BlobParams;
    }());
    SAPB1.BlobParams = BlobParams;
    var BlobTableKeySegment = (function () {
        function BlobTableKeySegment() {
        }
        return BlobTableKeySegment;
    }());
    SAPB1.BlobTableKeySegment = BlobTableKeySegment;
    var UpdateUserLicenseParams = (function () {
        function UpdateUserLicenseParams() {
        }
        return UpdateUserLicenseParams;
    }());
    SAPB1.UpdateUserLicenseParams = UpdateUserLicenseParams;
    var DecimalData = (function () {
        function DecimalData() {
        }
        return DecimalData;
    }());
    SAPB1.DecimalData = DecimalData;
    var RoundedData = (function () {
        function RoundedData() {
        }
        return RoundedData;
    }());
    SAPB1.RoundedData = RoundedData;
    var MaterialRevaluationFIFO = (function () {
        function MaterialRevaluationFIFO() {
        }
        return MaterialRevaluationFIFO;
    }());
    SAPB1.MaterialRevaluationFIFO = MaterialRevaluationFIFO;
    var Layer = (function () {
        function Layer() {
        }
        return Layer;
    }());
    SAPB1.Layer = Layer;
    var MaterialRevaluationFIFOParams = (function () {
        function MaterialRevaluationFIFOParams() {
        }
        return MaterialRevaluationFIFOParams;
    }());
    SAPB1.MaterialRevaluationFIFOParams = MaterialRevaluationFIFOParams;
    var SalesStageParams = (function () {
        function SalesStageParams() {
        }
        return SalesStageParams;
    }());
    SAPB1.SalesStageParams = SalesStageParams;
    var ActivityTypeParams = (function () {
        function ActivityTypeParams() {
        }
        return ActivityTypeParams;
    }());
    SAPB1.ActivityTypeParams = ActivityTypeParams;
    var ActivityLocationParams = (function () {
        function ActivityLocationParams() {
        }
        return ActivityLocationParams;
    }());
    SAPB1.ActivityLocationParams = ActivityLocationParams;
    var OriginalItem = (function () {
        function OriginalItem() {
        }
        return OriginalItem;
    }());
    SAPB1.OriginalItem = OriginalItem;
    var AlternativeItem = (function () {
        function AlternativeItem() {
        }
        return AlternativeItem;
    }());
    SAPB1.AlternativeItem = AlternativeItem;
    var OriginalItemParams = (function () {
        function OriginalItemParams() {
        }
        return OriginalItemParams;
    }());
    SAPB1.OriginalItemParams = OriginalItemParams;
    var DashboardPackageParams = (function () {
        function DashboardPackageParams() {
        }
        return DashboardPackageParams;
    }());
    SAPB1.DashboardPackageParams = DashboardPackageParams;
    var DashboardPackageImportParams = (function () {
        function DashboardPackageImportParams() {
        }
        return DashboardPackageImportParams;
    }());
    SAPB1.DashboardPackageImportParams = DashboardPackageImportParams;
    var GTIParams = (function () {
        function GTIParams() {
        }
        return GTIParams;
    }());
    SAPB1.GTIParams = GTIParams;
    var AdditionalExpensesParams = (function () {
        function AdditionalExpensesParams() {
        }
        return AdditionalExpensesParams;
    }());
    SAPB1.AdditionalExpensesParams = AdditionalExpensesParams;
    var SalesTaxAuthoritiesTypeParams = (function () {
        function SalesTaxAuthoritiesTypeParams() {
        }
        return SalesTaxAuthoritiesTypeParams;
    }());
    SAPB1.SalesTaxAuthoritiesTypeParams = SalesTaxAuthoritiesTypeParams;
    var SalesTaxCodeParams = (function () {
        function SalesTaxCodeParams() {
        }
        return SalesTaxCodeParams;
    }());
    SAPB1.SalesTaxCodeParams = SalesTaxCodeParams;
    var QueryCategoryParams = (function () {
        function QueryCategoryParams() {
        }
        return QueryCategoryParams;
    }());
    SAPB1.QueryCategoryParams = QueryCategoryParams;
    var FactoringIndicatorParams = (function () {
        function FactoringIndicatorParams() {
        }
        return FactoringIndicatorParams;
    }());
    SAPB1.FactoringIndicatorParams = FactoringIndicatorParams;
    var AccountSegmentationCategoryParams = (function () {
        function AccountSegmentationCategoryParams() {
        }
        return AccountSegmentationCategoryParams;
    }());
    SAPB1.AccountSegmentationCategoryParams = AccountSegmentationCategoryParams;
    var Forms1099Params = (function () {
        function Forms1099Params() {
        }
        return Forms1099Params;
    }());
    SAPB1.Forms1099Params = Forms1099Params;
    var ECMCodeParams = (function () {
        function ECMCodeParams() {
        }
        return ECMCodeParams;
    }());
    SAPB1.ECMCodeParams = ECMCodeParams;
    var ECMActionStatusData = (function () {
        function ECMActionStatusData() {
        }
        return ECMActionStatusData;
    }());
    SAPB1.ECMActionStatusData = ECMActionStatusData;
    var FixedAssetValues = (function () {
        function FixedAssetValues() {
        }
        return FixedAssetValues;
    }());
    SAPB1.FixedAssetValues = FixedAssetValues;
    var FixedAssetValuesParams = (function () {
        function FixedAssetValuesParams() {
        }
        return FixedAssetValuesParams;
    }());
    SAPB1.FixedAssetValuesParams = FixedAssetValuesParams;
    var FixedAssetEndBalance = (function () {
        function FixedAssetEndBalance() {
        }
        return FixedAssetEndBalance;
    }());
    SAPB1.FixedAssetEndBalance = FixedAssetEndBalance;
    var PaymentBPCode = (function () {
        function PaymentBPCode() {
        }
        return PaymentBPCode;
    }());
    SAPB1.PaymentBPCode = PaymentBPCode;
    var PaymentInvoiceEntry = (function () {
        function PaymentInvoiceEntry() {
        }
        return PaymentInvoiceEntry;
    }());
    SAPB1.PaymentInvoiceEntry = PaymentInvoiceEntry;
    var PaymentAmountParams = (function () {
        function PaymentAmountParams() {
        }
        return PaymentAmountParams;
    }());
    SAPB1.PaymentAmountParams = PaymentAmountParams;
    var BPPriorityParams = (function () {
        function BPPriorityParams() {
        }
        return BPPriorityParams;
    }());
    SAPB1.BPPriorityParams = BPPriorityParams;
    var DunningLetterParams = (function () {
        function DunningLetterParams() {
        }
        return DunningLetterParams;
    }());
    SAPB1.DunningLetterParams = DunningLetterParams;
    var ServiceTaxPostingParams = (function () {
        function ServiceTaxPostingParams() {
        }
        return ServiceTaxPostingParams;
    }());
    SAPB1.ServiceTaxPostingParams = ServiceTaxPostingParams;
    var UserTableParams = (function () {
        function UserTableParams() {
        }
        return UserTableParams;
    }());
    SAPB1.UserTableParams = UserTableParams;
    var UserQueryParams = (function () {
        function UserQueryParams() {
        }
        return UserQueryParams;
    }());
    SAPB1.UserQueryParams = UserQueryParams;
    var WorkflowTaskCompleteParams = (function () {
        function WorkflowTaskCompleteParams() {
        }
        return WorkflowTaskCompleteParams;
    }());
    SAPB1.WorkflowTaskCompleteParams = WorkflowTaskCompleteParams;
    var WorkflowApprovalTaskListParams = (function () {
        function WorkflowApprovalTaskListParams() {
        }
        return WorkflowApprovalTaskListParams;
    }());
    SAPB1.WorkflowApprovalTaskListParams = WorkflowApprovalTaskListParams;
    var WorkflowTask = (function () {
        function WorkflowTask() {
        }
        return WorkflowTask;
    }());
    SAPB1.WorkflowTask = WorkflowTask;
    var WorkflowTaskInputObject = (function () {
        function WorkflowTaskInputObject() {
        }
        return WorkflowTaskInputObject;
    }());
    SAPB1.WorkflowTaskInputObject = WorkflowTaskInputObject;
    var WorkflowTaskNote = (function () {
        function WorkflowTaskNote() {
        }
        return WorkflowTaskNote;
    }());
    SAPB1.WorkflowTaskNote = WorkflowTaskNote;
    var WorkflowTaskOutputObject = (function () {
        function WorkflowTaskOutputObject() {
        }
        return WorkflowTaskOutputObject;
    }());
    SAPB1.WorkflowTaskOutputObject = WorkflowTaskOutputObject;
    var ContractTemplateParams = (function () {
        function ContractTemplateParams() {
        }
        return ContractTemplateParams;
    }());
    SAPB1.ContractTemplateParams = ContractTemplateParams;
    var EcmActionParams = (function () {
        function EcmActionParams() {
        }
        return EcmActionParams;
    }());
    SAPB1.EcmActionParams = EcmActionParams;
    var EcmActionDocParams = (function () {
        function EcmActionDocParams() {
        }
        return EcmActionDocParams;
    }());
    SAPB1.EcmActionDocParams = EcmActionDocParams;
    var EcmAction = (function () {
        function EcmAction() {
        }
        return EcmAction;
    }());
    SAPB1.EcmAction = EcmAction;
    var EcmActionLogParams = (function () {
        function EcmActionLogParams() {
        }
        return EcmActionLogParams;
    }());
    SAPB1.EcmActionLogParams = EcmActionLogParams;
    var EcmActionLog = (function () {
        function EcmActionLog() {
        }
        return EcmActionLog;
    }());
    SAPB1.EcmActionLog = EcmActionLog;
    var CustomerEquipmentCardParams = (function () {
        function CustomerEquipmentCardParams() {
        }
        return CustomerEquipmentCardParams;
    }());
    SAPB1.CustomerEquipmentCardParams = CustomerEquipmentCardParams;
    var BOELineParams = (function () {
        function BOELineParams() {
        }
        return BOELineParams;
    }());
    SAPB1.BOELineParams = BOELineParams;
    var KnowledgeBaseSolutionParams = (function () {
        function KnowledgeBaseSolutionParams() {
        }
        return KnowledgeBaseSolutionParams;
    }());
    SAPB1.KnowledgeBaseSolutionParams = KnowledgeBaseSolutionParams;
    var UserKeyParams = (function () {
        function UserKeyParams() {
        }
        return UserKeyParams;
    }());
    SAPB1.UserKeyParams = UserKeyParams;
    var QueueParams = (function () {
        function QueueParams() {
        }
        return QueueParams;
    }());
    SAPB1.QueueParams = QueueParams;
    var TerritoryParams = (function () {
        function TerritoryParams() {
        }
        return TerritoryParams;
    }());
    SAPB1.TerritoryParams = TerritoryParams;
    var IndustryParams = (function () {
        function IndustryParams() {
        }
        return IndustryParams;
    }());
    SAPB1.IndustryParams = IndustryParams;
    var PackagesTypeParams = (function () {
        function PackagesTypeParams() {
        }
        return PackagesTypeParams;
    }());
    SAPB1.PackagesTypeParams = PackagesTypeParams;
    var UserObjectsMDParams = (function () {
        function UserObjectsMDParams() {
        }
        return UserObjectsMDParams;
    }());
    SAPB1.UserObjectsMDParams = UserObjectsMDParams;
    var TeamParams = (function () {
        function TeamParams() {
        }
        return TeamParams;
    }());
    SAPB1.TeamParams = TeamParams;
    var RelationshipParams = (function () {
        function RelationshipParams() {
        }
        return RelationshipParams;
    }());
    SAPB1.RelationshipParams = RelationshipParams;
    var ActivityStatusParams = (function () {
        function ActivityStatusParams() {
        }
        return ActivityStatusParams;
    }());
    SAPB1.ActivityStatusParams = ActivityStatusParams;
    var ChooseFromListParams = (function () {
        function ChooseFromListParams() {
        }
        return ChooseFromListParams;
    }());
    SAPB1.ChooseFromListParams = ChooseFromListParams;
    var FormattedSearchParams = (function () {
        function FormattedSearchParams() {
        }
        return FormattedSearchParams;
    }());
    SAPB1.FormattedSearchParams = FormattedSearchParams;
    var Attachment2Params = (function () {
        function Attachment2Params() {
        }
        return Attachment2Params;
    }());
    SAPB1.Attachment2Params = Attachment2Params;
    var UserLanguageParams = (function () {
        function UserLanguageParams() {
        }
        return UserLanguageParams;
    }());
    SAPB1.UserLanguageParams = UserLanguageParams;
    var MultiLanguageTranslationParams = (function () {
        function MultiLanguageTranslationParams() {
        }
        return MultiLanguageTranslationParams;
    }());
    SAPB1.MultiLanguageTranslationParams = MultiLanguageTranslationParams;
    var HouseBankAccountParams = (function () {
        function HouseBankAccountParams() {
        }
        return HouseBankAccountParams;
    }());
    SAPB1.HouseBankAccountParams = HouseBankAccountParams;
    var DefaultReportParams = (function () {
        function DefaultReportParams() {
        }
        return DefaultReportParams;
    }());
    SAPB1.DefaultReportParams = DefaultReportParams;
    var ReportParams = (function () {
        function ReportParams() {
        }
        return ReportParams;
    }());
    SAPB1.ReportParams = ReportParams;
    var ReportLayoutPrintParams = (function () {
        function ReportLayoutPrintParams() {
        }
        return ReportLayoutPrintParams;
    }());
    SAPB1.ReportLayoutPrintParams = ReportLayoutPrintParams;
    var ReportInputParams = (function () {
        function ReportInputParams() {
        }
        return ReportInputParams;
    }());
    SAPB1.ReportInputParams = ReportInputParams;
    var ReportLayoutParams = (function () {
        function ReportLayoutParams() {
        }
        return ReportLayoutParams;
    }());
    SAPB1.ReportLayoutParams = ReportLayoutParams;
    var ReportLayout = (function () {
        function ReportLayout() {
        }
        return ReportLayout;
    }());
    SAPB1.ReportLayout = ReportLayout;
    var ReportLayoutItem = (function () {
        function ReportLayoutItem() {
        }
        return ReportLayoutItem;
    }());
    SAPB1.ReportLayoutItem = ReportLayoutItem;
    var ReportLayout_TranslationLine = (function () {
        function ReportLayout_TranslationLine() {
        }
        return ReportLayout_TranslationLine;
    }());
    SAPB1.ReportLayout_TranslationLine = ReportLayout_TranslationLine;
    var PMC_SubprojectTypeData = (function () {
        function PMC_SubprojectTypeData() {
        }
        return PMC_SubprojectTypeData;
    }());
    SAPB1.PMC_SubprojectTypeData = PMC_SubprojectTypeData;
    var PMC_StageTypeData = (function () {
        function PMC_StageTypeData() {
        }
        return PMC_StageTypeData;
    }());
    SAPB1.PMC_StageTypeData = PMC_StageTypeData;
    var PMC_AreaData = (function () {
        function PMC_AreaData() {
        }
        return PMC_AreaData;
    }());
    SAPB1.PMC_AreaData = PMC_AreaData;
    var PMC_PriorityData = (function () {
        function PMC_PriorityData() {
        }
        return PMC_PriorityData;
    }());
    SAPB1.PMC_PriorityData = PMC_PriorityData;
    var PMC_ActivityData = (function () {
        function PMC_ActivityData() {
        }
        return PMC_ActivityData;
    }());
    SAPB1.PMC_ActivityData = PMC_ActivityData;
    var PMC_TaskData = (function () {
        function PMC_TaskData() {
        }
        return PMC_TaskData;
    }());
    SAPB1.PMC_TaskData = PMC_TaskData;
    var ExpenseTypeData = (function () {
        function ExpenseTypeData() {
        }
        return ExpenseTypeData;
    }());
    SAPB1.ExpenseTypeData = ExpenseTypeData;
    var ExpenseTypeParams = (function () {
        function ExpenseTypeParams() {
        }
        return ExpenseTypeParams;
    }());
    SAPB1.ExpenseTypeParams = ExpenseTypeParams;
    var LocalEraParams = (function () {
        function LocalEraParams() {
        }
        return LocalEraParams;
    }());
    SAPB1.LocalEraParams = LocalEraParams;
    var VM_B1ValuesData = (function () {
        function VM_B1ValuesData() {
        }
        return VM_B1ValuesData;
    }());
    SAPB1.VM_B1ValuesData = VM_B1ValuesData;
    var VM_ThirdPartyValuesData = (function () {
        function VM_ThirdPartyValuesData() {
        }
        return VM_ThirdPartyValuesData;
    }());
    SAPB1.VM_ThirdPartyValuesData = VM_ThirdPartyValuesData;
    var ValueMappingParams = (function () {
        function ValueMappingParams() {
        }
        return ValueMappingParams;
    }());
    SAPB1.ValueMappingParams = ValueMappingParams;
    var ValueMappingCommunicationData = (function () {
        function ValueMappingCommunicationData() {
        }
        return ValueMappingCommunicationData;
    }());
    SAPB1.ValueMappingCommunicationData = ValueMappingCommunicationData;
    var ValueMappingCommunicationParams = (function () {
        function ValueMappingCommunicationParams() {
        }
        return ValueMappingCommunicationParams;
    }());
    SAPB1.ValueMappingCommunicationParams = ValueMappingCommunicationParams;
    var ExternalReconciliation = (function () {
        function ExternalReconciliation() {
        }
        return ExternalReconciliation;
    }());
    SAPB1.ExternalReconciliation = ExternalReconciliation;
    var ReconciliationJournalEntryLine = (function () {
        function ReconciliationJournalEntryLine() {
        }
        return ReconciliationJournalEntryLine;
    }());
    SAPB1.ReconciliationJournalEntryLine = ReconciliationJournalEntryLine;
    var ReconciliationBankStatementLine = (function () {
        function ReconciliationBankStatementLine() {
        }
        return ReconciliationBankStatementLine;
    }());
    SAPB1.ReconciliationBankStatementLine = ReconciliationBankStatementLine;
    var ExternalReconciliationParams = (function () {
        function ExternalReconciliationParams() {
        }
        return ExternalReconciliationParams;
    }());
    SAPB1.ExternalReconciliationParams = ExternalReconciliationParams;
    var ExternalReconciliationFilterParams = (function () {
        function ExternalReconciliationFilterParams() {
        }
        return ExternalReconciliationFilterParams;
    }());
    SAPB1.ExternalReconciliationFilterParams = ExternalReconciliationFilterParams;
    var CheckLineParams = (function () {
        function CheckLineParams() {
        }
        return CheckLineParams;
    }());
    SAPB1.CheckLineParams = CheckLineParams;
    var TaxInvoiceParams = (function () {
        function TaxInvoiceParams() {
        }
        return TaxInvoiceParams;
    }());
    SAPB1.TaxInvoiceParams = TaxInvoiceParams;
    var BankParams = (function () {
        function BankParams() {
        }
        return BankParams;
    }());
    SAPB1.BankParams = BankParams;
    var ContactParams = (function () {
        function ContactParams() {
        }
        return ContactParams;
    }());
    SAPB1.ContactParams = ContactParams;
    var Series = (function () {
        function Series() {
        }
        return Series;
    }());
    SAPB1.Series = Series;
    var SeriesParams = (function () {
        function SeriesParams() {
        }
        return SeriesParams;
    }());
    SAPB1.SeriesParams = SeriesParams;
    var DocumentSeriesParams = (function () {
        function DocumentSeriesParams() {
        }
        return DocumentSeriesParams;
    }());
    SAPB1.DocumentSeriesParams = DocumentSeriesParams;
    var DocumentSeriesUserParams = (function () {
        function DocumentSeriesUserParams() {
        }
        return DocumentSeriesUserParams;
    }());
    SAPB1.DocumentSeriesUserParams = DocumentSeriesUserParams;
    var DocumentTypeParams = (function () {
        function DocumentTypeParams() {
        }
        return DocumentTypeParams;
    }());
    SAPB1.DocumentTypeParams = DocumentTypeParams;
    var DocumentChangeMenuName = (function () {
        function DocumentChangeMenuName() {
        }
        return DocumentChangeMenuName;
    }());
    SAPB1.DocumentChangeMenuName = DocumentChangeMenuName;
    var ElectronicSeries = (function () {
        function ElectronicSeries() {
        }
        return ElectronicSeries;
    }());
    SAPB1.ElectronicSeries = ElectronicSeries;
    var ElectronicSeriesParams = (function () {
        function ElectronicSeriesParams() {
        }
        return ElectronicSeriesParams;
    }());
    SAPB1.ElectronicSeriesParams = ElectronicSeriesParams;
    var DefaultElectronicSeriesParams = (function () {
        function DefaultElectronicSeriesParams() {
        }
        return DefaultElectronicSeriesParams;
    }());
    SAPB1.DefaultElectronicSeriesParams = DefaultElectronicSeriesParams;
    var CreditCardParams = (function () {
        function CreditCardParams() {
        }
        return CreditCardParams;
    }());
    SAPB1.CreditCardParams = CreditCardParams;
    var CurrenciesParams = (function () {
        function CurrenciesParams() {
        }
        return CurrenciesParams;
    }());
    SAPB1.CurrenciesParams = CurrenciesParams;
    var PaymentTermsTypeParams = (function () {
        function PaymentTermsTypeParams() {
        }
        return PaymentTermsTypeParams;
    }());
    SAPB1.PaymentTermsTypeParams = PaymentTermsTypeParams;
    var BankPageParams = (function () {
        function BankPageParams() {
        }
        return BankPageParams;
    }());
    SAPB1.BankPageParams = BankPageParams;
    var ManufacturerParams = (function () {
        function ManufacturerParams() {
        }
        return ManufacturerParams;
    }());
    SAPB1.ManufacturerParams = ManufacturerParams;
    var LandedCostsCodeParams = (function () {
        function LandedCostsCodeParams() {
        }
        return LandedCostsCodeParams;
    }());
    SAPB1.LandedCostsCodeParams = LandedCostsCodeParams;
    var ShippingTypeParams = (function () {
        function ShippingTypeParams() {
        }
        return ShippingTypeParams;
    }());
    SAPB1.ShippingTypeParams = ShippingTypeParams;
    var VatGroupParams = (function () {
        function VatGroupParams() {
        }
        return VatGroupParams;
    }());
    SAPB1.VatGroupParams = VatGroupParams;
    var LengthMeasureParams = (function () {
        function LengthMeasureParams() {
        }
        return LengthMeasureParams;
    }());
    SAPB1.LengthMeasureParams = LengthMeasureParams;
    var WeightMeasureParams = (function () {
        function WeightMeasureParams() {
        }
        return WeightMeasureParams;
    }());
    SAPB1.WeightMeasureParams = WeightMeasureParams;
    var CustomsGroupParams = (function () {
        function CustomsGroupParams() {
        }
        return CustomsGroupParams;
    }());
    SAPB1.CustomsGroupParams = CustomsGroupParams;
    var ChecksforPaymentParams = (function () {
        function ChecksforPaymentParams() {
        }
        return ChecksforPaymentParams;
    }());
    SAPB1.ChecksforPaymentParams = ChecksforPaymentParams;
    var WarehouseParams = (function () {
        function WarehouseParams() {
        }
        return WarehouseParams;
    }());
    SAPB1.WarehouseParams = WarehouseParams;
    var CommissionGroupParams = (function () {
        function CommissionGroupParams() {
        }
        return CommissionGroupParams;
    }());
    SAPB1.CommissionGroupParams = CommissionGroupParams;
    var WorkOrderParams = (function () {
        function WorkOrderParams() {
        }
        return WorkOrderParams;
    }());
    SAPB1.WorkOrderParams = WorkOrderParams;
    var CreditPaymentMethodParams = (function () {
        function CreditPaymentMethodParams() {
        }
        return CreditPaymentMethodParams;
    }());
    SAPB1.CreditPaymentMethodParams = CreditPaymentMethodParams;
    var CreditCardPaymentParams = (function () {
        function CreditCardPaymentParams() {
        }
        return CreditCardPaymentParams;
    }());
    SAPB1.CreditCardPaymentParams = CreditCardPaymentParams;
    var CreditLineParams = (function () {
        function CreditLineParams() {
        }
        return CreditLineParams;
    }());
    SAPB1.CreditLineParams = CreditLineParams;
    var AlternateCatNumParams = (function () {
        function AlternateCatNumParams() {
        }
        return AlternateCatNumParams;
    }());
    SAPB1.AlternateCatNumParams = AlternateCatNumParams;
    var BudgetDistributionParams = (function () {
        function BudgetDistributionParams() {
        }
        return BudgetDistributionParams;
    }());
    SAPB1.BudgetDistributionParams = BudgetDistributionParams;
    var ItemPropertyParams = (function () {
        function ItemPropertyParams() {
        }
        return ItemPropertyParams;
    }());
    SAPB1.ItemPropertyParams = ItemPropertyParams;
    var BudgetScenarioParams = (function () {
        function BudgetScenarioParams() {
        }
        return BudgetScenarioParams;
    }());
    SAPB1.BudgetScenarioParams = BudgetScenarioParams;
    var HttpCommandEnum = (function () {
        function HttpCommandEnum() {
        }
        HttpCommandEnum.POST = "POST";
        HttpCommandEnum.GET = "GET";
        HttpCommandEnum.DELETE = "DELETE";
        HttpCommandEnum.PUT = "PUT";
        HttpCommandEnum.PATCH = "PATCH";
        return HttpCommandEnum;
    }());
    SAPB1.HttpCommandEnum = HttpCommandEnum;
    var B1ObjActionEnum = (function () {
        function B1ObjActionEnum() {
        }
        B1ObjActionEnum.LOGIN = "Login";
        B1ObjActionEnum.LOGOUT = "Logout";
        B1ObjActionEnum.ADD = "Add";
        B1ObjActionEnum.UPDATE = "Update";
        B1ObjActionEnum.GET = "Get";
        B1ObjActionEnum.DELETE = "Delete";
        B1ObjActionEnum.ACTION = "Action";
        return B1ObjActionEnum;
    }());
    SAPB1.B1ObjActionEnum = B1ObjActionEnum;
    var LoginInfo = (function () {
        function LoginInfo() {
        }
        return LoginInfo;
    }());
    SAPB1.LoginInfo = LoginInfo;
    var SBOBobService = (function () {
        function SBOBobService() {
        }
        // Return type: string
        SBOBobService.Format_MoneyToString = function (InMoney, InPrecision, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_Format_MoneyToString", sessionId, routeId, [InMoney, InPrecision]);
        };
        // Return type: number
        SBOBobService.GetIndexRate = function (Index, Date, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetIndexRate", sessionId, routeId, [Index, Date]);
        };
        // Return type: string
        SBOBobService.GetLocalCurrency = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetLocalCurrency", sessionId, routeId, [null]);
        };
        // Return type: number
        SBOBobService.GetCurrencyRate = function (Currency, Date, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetCurrencyRate", sessionId, routeId, [Currency, Date]);
        };
        // Return type: string
        SBOBobService.GetSystemCurrency = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetSystemCurrency", sessionId, routeId, [null]);
        };
        // Return type: string
        SBOBobService.GetDueDate = function (CardCode, RefDate, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetDueDate", sessionId, routeId, [CardCode, RefDate]);
        };
        // Return type: number
        SBOBobService.GetSystemPermission = function (UserCode, PermissionID, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SBOBobService_GetSystemPermission", sessionId, routeId, [UserCode, PermissionID]);
        };
        return SBOBobService;
    }());
    SAPB1.SBOBobService = SBOBobService;
    var CycleCountDeterminationsService = (function () {
        function CycleCountDeterminationsService() {
        }
        // Return type: SAPB1.CycleCountDeterminationParams[]
        CycleCountDeterminationsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CycleCountDeterminationsService_GetList", sessionId, routeId, [null]);
        };
        return CycleCountDeterminationsService;
    }());
    SAPB1.CycleCountDeterminationsService = CycleCountDeterminationsService;
    var DistributionRulesService = (function () {
        function DistributionRulesService() {
        }
        // Return type: SAPB1.DistributionRuleParams[]
        DistributionRulesService.GetDistributionRuleList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DistributionRulesService_GetDistributionRuleList", sessionId, routeId, [null]);
        };
        return DistributionRulesService;
    }());
    SAPB1.DistributionRulesService = DistributionRulesService;
    var PickListsService = (function () {
        function PickListsService() {
        }
        // Return type: void
        PickListsService.Close = function (PickList, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PickListsService_Close", sessionId, routeId, [PickList]);
        };
        // Return type: void
        PickListsService.UpdateReleasedAllocation = function (PickList, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PickListsService_UpdateReleasedAllocation", sessionId, routeId, [PickList]);
        };
        return PickListsService;
    }());
    SAPB1.PickListsService = PickListsService;
    var InventoryGenExitService = (function () {
        function InventoryGenExitService() {
        }
        // Return type: SAPB1.Document
        InventoryGenExitService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExitService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        InventoryGenExitService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExitService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        InventoryGenExitService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExitService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return InventoryGenExitService;
    }());
    SAPB1.InventoryGenExitService = InventoryGenExitService;
    var AssetDepreciationGroupsService = (function () {
        function AssetDepreciationGroupsService() {
        }
        // Return type: SAPB1.AssetDepreciationGroupParams[]
        AssetDepreciationGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetDepreciationGroupsService_GetList", sessionId, routeId, [null]);
        };
        return AssetDepreciationGroupsService;
    }());
    SAPB1.AssetDepreciationGroupsService = AssetDepreciationGroupsService;
    var GLAccountAdvancedRulesService = (function () {
        function GLAccountAdvancedRulesService() {
        }
        // Return type: SAPB1.GLAccountAdvancedRuleParams[]
        GLAccountAdvancedRulesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "GLAccountAdvancedRulesService_GetList", sessionId, routeId, [null]);
        };
        return GLAccountAdvancedRulesService;
    }());
    SAPB1.GLAccountAdvancedRulesService = GLAccountAdvancedRulesService;
    var CorrectionPurchaseInvoiceService = (function () {
        function CorrectionPurchaseInvoiceService() {
        }
        // Return type: SAPB1.Document
        CorrectionPurchaseInvoiceService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        CorrectionPurchaseInvoiceService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        CorrectionPurchaseInvoiceService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return CorrectionPurchaseInvoiceService;
    }());
    SAPB1.CorrectionPurchaseInvoiceService = CorrectionPurchaseInvoiceService;
    var AccountCategoryService = (function () {
        function AccountCategoryService() {
        }
        // Return type: SAPB1.AccountCategoryParams[]
        AccountCategoryService.GetCategoryList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AccountCategoryService_GetCategoryList", sessionId, routeId, [null]);
        };
        return AccountCategoryService;
    }());
    SAPB1.AccountCategoryService = AccountCategoryService;
    var PurchaseDownPaymentsService = (function () {
        function PurchaseDownPaymentsService() {
        }
        // Return type: SAPB1.Document
        PurchaseDownPaymentsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPaymentsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseDownPaymentsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPaymentsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseDownPaymentsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPaymentsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseDownPaymentsService;
    }());
    SAPB1.PurchaseDownPaymentsService = PurchaseDownPaymentsService;
    var RecurringTransactionService = (function () {
        function RecurringTransactionService() {
        }
        // Return type: SAPB1.RclRecurringTransaction[]
        RecurringTransactionService.GetAvailableRecurringTransactions = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "RecurringTransactionService_GetAvailableRecurringTransactions", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.RclRecurringTransaction[]
        RecurringTransactionService.ExecuteRecurringTransactions = function (RclRecurringTransactionParamsCollection, RclRecurringExecutionParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "RecurringTransactionService_ExecuteRecurringTransactions", sessionId, routeId, [RclRecurringTransactionParamsCollection, RclRecurringExecutionParams]);
        };
        return RecurringTransactionService;
    }());
    SAPB1.RecurringTransactionService = RecurringTransactionService;
    var ApprovalRequestsService = (function () {
        function ApprovalRequestsService() {
        }
        // Return type: SAPB1.ApprovalRequestParams[]
        ApprovalRequestsService.GetApprovalRequestList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ApprovalRequestsService_GetApprovalRequestList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.ApprovalRequestParams[]
        ApprovalRequestsService.GetOpenApprovalRequestList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ApprovalRequestsService_GetOpenApprovalRequestList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.ApprovalRequestParams[]
        ApprovalRequestsService.GetAllApprovalRequestsList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ApprovalRequestsService_GetAllApprovalRequestsList", sessionId, routeId, [null]);
        };
        return ApprovalRequestsService;
    }());
    SAPB1.ApprovalRequestsService = ApprovalRequestsService;
    var DimensionsService = (function () {
        function DimensionsService() {
        }
        // Return type: SAPB1.DimensionParams[]
        DimensionsService.GetDimensionList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DimensionsService_GetDimensionList", sessionId, routeId, [null]);
        };
        return DimensionsService;
    }());
    SAPB1.DimensionsService = DimensionsService;
    var DepreciationTypesService = (function () {
        function DepreciationTypesService() {
        }
        // Return type: SAPB1.DepreciationTypeParams[]
        DepreciationTypesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepreciationTypesService_GetList", sessionId, routeId, [null]);
        };
        return DepreciationTypesService;
    }());
    SAPB1.DepreciationTypesService = DepreciationTypesService;
    var ExternalReconciliationsService = (function () {
        function ExternalReconciliationsService() {
        }
        // Return type: void
        ExternalReconciliationsService.Reconcile = function (ExternalReconciliation, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalReconciliationsService_Reconcile", sessionId, routeId, [ExternalReconciliation]);
        };
        // Return type: SAPB1.ExternalReconciliation
        ExternalReconciliationsService.GetReconciliation = function (ExternalReconciliationParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalReconciliationsService_GetReconciliation", sessionId, routeId, [ExternalReconciliationParams]);
        };
        // Return type: void
        ExternalReconciliationsService.CancelReconciliation = function (ExternalReconciliationParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalReconciliationsService_CancelReconciliation", sessionId, routeId, [ExternalReconciliationParams]);
        };
        // Return type: SAPB1.ExternalReconciliationParams[]
        ExternalReconciliationsService.GetReconciliationList = function (ExternalReconciliationFilterParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalReconciliationsService_GetReconciliationList", sessionId, routeId, [ExternalReconciliationFilterParams]);
        };
        return ExternalReconciliationsService;
    }());
    SAPB1.ExternalReconciliationsService = ExternalReconciliationsService;
    var AccountsService = (function () {
        function AccountsService() {
        }
        // Return type: void
        AccountsService.CreateOpenBalance = function (OpenningBalanceAccount, GLAccounts, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AccountsService_CreateOpenBalance", sessionId, routeId, [OpenningBalanceAccount, GLAccounts]);
        };
        return AccountsService;
    }());
    SAPB1.AccountsService = AccountsService;
    var JournalEntryDocumentTypeService = (function () {
        function JournalEntryDocumentTypeService() {
        }
        // Return type: SAPB1.JournalEntryDocumentTypeParams[]
        JournalEntryDocumentTypeService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "JournalEntryDocumentTypeService_GetList", sessionId, routeId, [null]);
        };
        return JournalEntryDocumentTypeService;
    }());
    SAPB1.JournalEntryDocumentTypeService = JournalEntryDocumentTypeService;
    var FAAccountDeterminationsService = (function () {
        function FAAccountDeterminationsService() {
        }
        // Return type: SAPB1.FAAccountDeterminationParams[]
        FAAccountDeterminationsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FAAccountDeterminationsService_GetList", sessionId, routeId, [null]);
        };
        return FAAccountDeterminationsService;
    }());
    SAPB1.FAAccountDeterminationsService = FAAccountDeterminationsService;
    var ResourceGroupsService = (function () {
        function ResourceGroupsService() {
        }
        // Return type: SAPB1.ResourceGroupParams[]
        ResourceGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ResourceGroupsService_GetList", sessionId, routeId, [null]);
        };
        return ResourceGroupsService;
    }());
    SAPB1.ResourceGroupsService = ResourceGroupsService;
    var DunningTermsService = (function () {
        function DunningTermsService() {
        }
        // Return type: SAPB1.DunningTermParams[]
        DunningTermsService.GetDunningTermList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DunningTermsService_GetDunningTermList", sessionId, routeId, [null]);
        };
        return DunningTermsService;
    }());
    SAPB1.DunningTermsService = DunningTermsService;
    var StockTransferService = (function () {
        function StockTransferService() {
        }
        // Return type: SAPB1.StockTransfer
        StockTransferService.GetApprovalTemplates = function (StockTransfer, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferService_GetApprovalTemplates", sessionId, routeId, [StockTransfer]);
        };
        // Return type: void
        StockTransferService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return StockTransferService;
    }());
    SAPB1.StockTransferService = StockTransferService;
    var BankStatementsService = (function () {
        function BankStatementsService() {
        }
        // Return type: SAPB1.BankStatementParams[]
        BankStatementsService.GetBankStatementList = function (BankStatementsFilter, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BankStatementsService_GetBankStatementList", sessionId, routeId, [BankStatementsFilter]);
        };
        return BankStatementsService;
    }());
    SAPB1.BankStatementsService = BankStatementsService;
    var ReportLayoutsService = (function () {
        function ReportLayoutsService() {
        }
        // Return type: void
        ReportLayoutsService.SetDefaultReport = function (DefaultReportParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_SetDefaultReport", sessionId, routeId, [DefaultReportParams]);
        };
        // Return type: SAPB1.DefaultReportParams
        ReportLayoutsService.GetDefaultReport = function (ReportParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_GetDefaultReport", sessionId, routeId, [ReportParams]);
        };
        // Return type: SAPB1.ReportLayoutParams
        ReportLayoutsService.AddReportLayout = function (ReportLayout, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_AddReportLayout", sessionId, routeId, [ReportLayout]);
        };
        // Return type: void
        ReportLayoutsService.UpdatePrinterSettings = function (ReportLayout, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_UpdatePrinterSettings", sessionId, routeId, [ReportLayout]);
        };
        // Return type: void
        ReportLayoutsService.DeleteReportLayout = function (ReportLayoutParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_DeleteReportLayout", sessionId, routeId, [ReportLayoutParams]);
        };
        // Return type: SAPB1.ReportLayout
        ReportLayoutsService.GetReportLayout = function (ReportLayoutParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_GetReportLayout", sessionId, routeId, [ReportLayoutParams]);
        };
        // Return type: SAPB1.ReportLayout
        ReportLayoutsService.GetDefaultReportLayout = function (ReportParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_GetDefaultReportLayout", sessionId, routeId, [ReportParams]);
        };
        // Return type: SAPB1.ReportLayoutParams[]
        ReportLayoutsService.GetReportLayoutList = function (ReportParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_GetReportLayoutList", sessionId, routeId, [ReportParams]);
        };
        // Return type: void
        ReportLayoutsService.UpdateLanguageReport = function (ReportLayout, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_UpdateLanguageReport", sessionId, routeId, [ReportLayout]);
        };
        // Return type: SAPB1.ReportLayoutParams
        ReportLayoutsService.AddReportLayoutToMenu = function (ReportLayout, ReportInputParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_AddReportLayoutToMenu", sessionId, routeId, [ReportLayout, ReportInputParams]);
        };
        // Return type: void
        ReportLayoutsService.DeleteReportLayoutAndMenu = function (ReportLayoutParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_DeleteReportLayoutAndMenu", sessionId, routeId, [ReportLayoutParams]);
        };
        // Return type: void
        ReportLayoutsService.Print = function (ReportLayoutPrintParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportLayoutsService_Print", sessionId, routeId, [ReportLayoutPrintParams]);
        };
        return ReportLayoutsService;
    }());
    SAPB1.ReportLayoutsService = ReportLayoutsService;
    var PurchaseRequestService = (function () {
        function PurchaseRequestService() {
        }
        // Return type: SAPB1.Document
        PurchaseRequestService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequestService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseRequestService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequestService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseRequestService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequestService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseRequestService;
    }());
    SAPB1.PurchaseRequestService = PurchaseRequestService;
    var BPOpeningBalanceService = (function () {
        function BPOpeningBalanceService() {
        }
        // Return type: void
        BPOpeningBalanceService.CreateOpenBalance = function (OpenningBalanceAccount, BPCodes, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BPOpeningBalanceService_CreateOpenBalance", sessionId, routeId, [OpenningBalanceAccount, BPCodes]);
        };
        return BPOpeningBalanceService;
    }());
    SAPB1.BPOpeningBalanceService = BPOpeningBalanceService;
    var ElectronicFileFormatsService = (function () {
        function ElectronicFileFormatsService() {
        }
        // Return type: SAPB1.ElectronicFileFormatParams[]
        ElectronicFileFormatsService.GetElectronicFileFormatList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicFileFormatsService_GetElectronicFileFormatList", sessionId, routeId, [null]);
        };
        return ElectronicFileFormatsService;
    }());
    SAPB1.ElectronicFileFormatsService = ElectronicFileFormatsService;
    var ElectronicCommunicationActionsService = (function () {
        function ElectronicCommunicationActionsService() {
        }
        // Return type: SAPB1.EcmAction
        ElectronicCommunicationActionsService.GetEcmAction = function (EcmActionParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_GetEcmAction", sessionId, routeId, [EcmActionParams]);
        };
        // Return type: SAPB1.EcmAction
        ElectronicCommunicationActionsService.AddEcmAction = function (EcmAction, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_AddEcmAction", sessionId, routeId, [EcmAction]);
        };
        // Return type: void
        ElectronicCommunicationActionsService.UpdateEcmAction = function (EcmAction, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_UpdateEcmAction", sessionId, routeId, [EcmAction]);
        };
        // Return type: void
        ElectronicCommunicationActionsService.DeleteEcmAction = function (EcmAction, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_DeleteEcmAction", sessionId, routeId, [EcmAction]);
        };
        // Return type: SAPB1.EcmAction
        ElectronicCommunicationActionsService.GetEcmActionByDoc = function (EcmActionDocParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_GetEcmActionByDoc", sessionId, routeId, [EcmActionDocParams]);
        };
        // Return type: SAPB1.EcmActionLog[]
        ElectronicCommunicationActionsService.GetEcmActionLogList = function (EcmAction, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_GetEcmActionLogList", sessionId, routeId, [EcmAction]);
        };
        // Return type: SAPB1.EcmActionLog
        ElectronicCommunicationActionsService.GetEcmActionLog = function (EcmActionLogParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_GetEcmActionLog", sessionId, routeId, [EcmActionLogParams]);
        };
        // Return type: SAPB1.EcmActionLog
        ElectronicCommunicationActionsService.AddEcmActionLog = function (EcmActionLog, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionsService_AddEcmActionLog", sessionId, routeId, [EcmActionLog]);
        };
        return ElectronicCommunicationActionsService;
    }());
    SAPB1.ElectronicCommunicationActionsService = ElectronicCommunicationActionsService;
    var WarehouseSublevelCodesService = (function () {
        function WarehouseSublevelCodesService() {
        }
        // Return type: SAPB1.WarehouseSublevelCodeParams[]
        WarehouseSublevelCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "WarehouseSublevelCodesService_GetList", sessionId, routeId, [null]);
        };
        return WarehouseSublevelCodesService;
    }());
    SAPB1.WarehouseSublevelCodesService = WarehouseSublevelCodesService;
    var PurchaseOrdersService = (function () {
        function PurchaseOrdersService() {
        }
        // Return type: SAPB1.Document
        PurchaseOrdersService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrdersService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseOrdersService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrdersService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseOrdersService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrdersService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseOrdersService;
    }());
    SAPB1.PurchaseOrdersService = PurchaseOrdersService;
    var EmployeeStatusService = (function () {
        function EmployeeStatusService() {
        }
        // Return type: SAPB1.EmployeeStatusParams[]
        EmployeeStatusService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeeStatusService_GetList", sessionId, routeId, [null]);
        };
        return EmployeeStatusService;
    }());
    SAPB1.EmployeeStatusService = EmployeeStatusService;
    var CorrectionPurchaseInvoiceReversalService = (function () {
        function CorrectionPurchaseInvoiceReversalService() {
        }
        // Return type: SAPB1.Document
        CorrectionPurchaseInvoiceReversalService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversalService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        CorrectionPurchaseInvoiceReversalService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversalService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        CorrectionPurchaseInvoiceReversalService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversalService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return CorrectionPurchaseInvoiceReversalService;
    }());
    SAPB1.CorrectionPurchaseInvoiceReversalService = CorrectionPurchaseInvoiceReversalService;
    var SalesOpportunitySourcesSetupService = (function () {
        function SalesOpportunitySourcesSetupService() {
        }
        // Return type: SAPB1.SalesOpportunitySourceSetupParams[]
        SalesOpportunitySourcesSetupService.GetSalesOpportunitySourceSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SalesOpportunitySourcesSetupService_GetSalesOpportunitySourceSetupList", sessionId, routeId, [null]);
        };
        return SalesOpportunitySourcesSetupService;
    }());
    SAPB1.SalesOpportunitySourcesSetupService = SalesOpportunitySourcesSetupService;
    var RetornoCodesService = (function () {
        function RetornoCodesService() {
        }
        // Return type: SAPB1.RetornoCodeParams[]
        RetornoCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "RetornoCodesService_GetList", sessionId, routeId, [null]);
        };
        return RetornoCodesService;
    }());
    SAPB1.RetornoCodesService = RetornoCodesService;
    var EnhancedDiscountGroupsService = (function () {
        function EnhancedDiscountGroupsService() {
        }
        // Return type: SAPB1.EnhancedDiscountGroupParams[]
        EnhancedDiscountGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EnhancedDiscountGroupsService_GetList", sessionId, routeId, [null]);
        };
        return EnhancedDiscountGroupsService;
    }());
    SAPB1.EnhancedDiscountGroupsService = EnhancedDiscountGroupsService;
    var PredefinedTextsService = (function () {
        function PredefinedTextsService() {
        }
        // Return type: SAPB1.PredefinedTextParams[]
        PredefinedTextsService.GetPredefinedTextList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PredefinedTextsService_GetPredefinedTextList", sessionId, routeId, [null]);
        };
        return PredefinedTextsService;
    }());
    SAPB1.PredefinedTextsService = PredefinedTextsService;
    var KPIsService = (function () {
        function KPIsService() {
        }
        // Return type: SAPB1.KPIParams[]
        KPIsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "KPIsService_GetList", sessionId, routeId, [null]);
        };
        return KPIsService;
    }());
    SAPB1.KPIsService = KPIsService;
    var ServiceCallOriginsService = (function () {
        function ServiceCallOriginsService() {
        }
        // Return type: SAPB1.ServiceCallOriginParams[]
        ServiceCallOriginsService.GetServiceCallOriginList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallOriginsService_GetServiceCallOriginList", sessionId, routeId, [null]);
        };
        return ServiceCallOriginsService;
    }());
    SAPB1.ServiceCallOriginsService = ServiceCallOriginsService;
    var StockTransferDraftService = (function () {
        function StockTransferDraftService() {
        }
        // Return type: SAPB1.StockTransfer
        StockTransferDraftService.GetApprovalTemplates = function (StockTransfer, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferDraftService_GetApprovalTemplates", sessionId, routeId, [StockTransfer]);
        };
        // Return type: void
        StockTransferDraftService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferDraftService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return StockTransferDraftService;
    }());
    SAPB1.StockTransferDraftService = StockTransferDraftService;
    var MaterialRevaluationFIFOService = (function () {
        function MaterialRevaluationFIFOService() {
        }
        // Return type: SAPB1.MaterialRevaluationFIFO
        MaterialRevaluationFIFOService.GetMaterialRevaluationFIFO = function (MaterialRevaluationFIFOParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MaterialRevaluationFIFOService_GetMaterialRevaluationFIFO", sessionId, routeId, [MaterialRevaluationFIFOParams]);
        };
        return MaterialRevaluationFIFOService;
    }());
    SAPB1.MaterialRevaluationFIFOService = MaterialRevaluationFIFOService;
    var DepreciationAreasService = (function () {
        function DepreciationAreasService() {
        }
        // Return type: SAPB1.DepreciationAreaParams[]
        DepreciationAreasService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepreciationAreasService_GetList", sessionId, routeId, [null]);
        };
        return DepreciationAreasService;
    }());
    SAPB1.DepreciationAreasService = DepreciationAreasService;
    var NFModelsService = (function () {
        function NFModelsService() {
        }
        // Return type: SAPB1.NFModelParams[]
        NFModelsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "NFModelsService_GetList", sessionId, routeId, [null]);
        };
        return NFModelsService;
    }());
    SAPB1.NFModelsService = NFModelsService;
    var CertificateSeriesService = (function () {
        function CertificateSeriesService() {
        }
        // Return type: SAPB1.CertificateSeriesParams[]
        CertificateSeriesService.GetCertificateSeriesList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CertificateSeriesService_GetCertificateSeriesList", sessionId, routeId, [null]);
        };
        return CertificateSeriesService;
    }());
    SAPB1.CertificateSeriesService = CertificateSeriesService;
    var CostCenterTypesService = (function () {
        function CostCenterTypesService() {
        }
        // Return type: SAPB1.CostCenterTypeParams[]
        CostCenterTypesService.GetCostCenterTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CostCenterTypesService_GetCostCenterTypeList", sessionId, routeId, [null]);
        };
        return CostCenterTypesService;
    }());
    SAPB1.CostCenterTypesService = CostCenterTypesService;
    var InventoryGenEntryService = (function () {
        function InventoryGenEntryService() {
        }
        // Return type: SAPB1.Document
        InventoryGenEntryService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntryService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        InventoryGenEntryService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntryService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        InventoryGenEntryService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntryService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return InventoryGenEntryService;
    }());
    SAPB1.InventoryGenEntryService = InventoryGenEntryService;
    var IntegrationPackagesConfigureService = (function () {
        function IntegrationPackagesConfigureService() {
        }
        // Return type: SAPB1.IntegrationPackageParams[]
        IntegrationPackagesConfigureService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IntegrationPackagesConfigureService_GetList", sessionId, routeId, [null]);
        };
        return IntegrationPackagesConfigureService;
    }());
    SAPB1.IntegrationPackagesConfigureService = IntegrationPackagesConfigureService;
    var DeliveryNotesService = (function () {
        function DeliveryNotesService() {
        }
        // Return type: SAPB1.Document
        DeliveryNotesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        DeliveryNotesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        DeliveryNotesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return DeliveryNotesService;
    }());
    SAPB1.DeliveryNotesService = DeliveryNotesService;
    var TerminationReasonService = (function () {
        function TerminationReasonService() {
        }
        // Return type: SAPB1.TerminationReasonParams[]
        TerminationReasonService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TerminationReasonService_GetList", sessionId, routeId, [null]);
        };
        return TerminationReasonService;
    }());
    SAPB1.TerminationReasonService = TerminationReasonService;
    var DepositsService = (function () {
        function DepositsService() {
        }
        // Return type: SAPB1.DepositParams[]
        DepositsService.GetDepositList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepositsService_GetDepositList", sessionId, routeId, [null]);
        };
        // Return type: void
        DepositsService.CancelCheckRow = function (CancelCheckRowParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepositsService_CancelCheckRow", sessionId, routeId, [CancelCheckRowParams]);
        };
        // Return type: void
        DepositsService.CancelCheckRowbyCurrentSystemDate = function (CancelCheckRowParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepositsService_CancelCheckRowbyCurrentSystemDate", sessionId, routeId, [CancelCheckRowParams]);
        };
        return DepositsService;
    }());
    SAPB1.DepositsService = DepositsService;
    var SalesOpportunityReasonsSetupService = (function () {
        function SalesOpportunityReasonsSetupService() {
        }
        // Return type: SAPB1.SalesOpportunityReasonSetupParams[]
        SalesOpportunityReasonsSetupService.GetSalesOpportunityReasonSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SalesOpportunityReasonsSetupService_GetSalesOpportunityReasonSetupList", sessionId, routeId, [null]);
        };
        return SalesOpportunityReasonsSetupService;
    }());
    SAPB1.SalesOpportunityReasonsSetupService = SalesOpportunityReasonsSetupService;
    var UnitOfMeasurementGroupsService = (function () {
        function UnitOfMeasurementGroupsService() {
        }
        // Return type: SAPB1.UnitOfMeasurementGroupParams[]
        UnitOfMeasurementGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UnitOfMeasurementGroupsService_GetList", sessionId, routeId, [null]);
        };
        return UnitOfMeasurementGroupsService;
    }());
    SAPB1.UnitOfMeasurementGroupsService = UnitOfMeasurementGroupsService;
    var BusinessPartnersService = (function () {
        function BusinessPartnersService() {
        }
        // Return type: void
        BusinessPartnersService.CreateOpenBalance = function (OpenningBalanceAccount, BPCodes, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BusinessPartnersService_CreateOpenBalance", sessionId, routeId, [OpenningBalanceAccount, BPCodes]);
        };
        return BusinessPartnersService;
    }());
    SAPB1.BusinessPartnersService = BusinessPartnersService;
    var PartnersSetupsService = (function () {
        function PartnersSetupsService() {
        }
        // Return type: SAPB1.PartnersSetupParams[]
        PartnersSetupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PartnersSetupsService_GetList", sessionId, routeId, [null]);
        };
        return PartnersSetupsService;
    }());
    SAPB1.PartnersSetupsService = PartnersSetupsService;
    var ValueMappingService = (function () {
        function ValueMappingService() {
        }
        // Return type: SAPB1.VM_B1ValuesData[]
        ValueMappingService.GetMappedB1Value = function (VM_B1ValuesData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ValueMappingService_GetMappedB1Value", sessionId, routeId, [VM_B1ValuesData]);
        };
        // Return type: SAPB1.VM_ThirdPartyValuesData[]
        ValueMappingService.GetThirdPartyValuesForB1Value = function (VM_B1ValuesData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ValueMappingService_GetThirdPartyValuesForB1Value", sessionId, routeId, [VM_B1ValuesData]);
        };
        // Return type: void
        ValueMappingService.RemoveMappedValue = function (VM_ThirdPartyValuesData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ValueMappingService_RemoveMappedValue", sessionId, routeId, [VM_ThirdPartyValuesData]);
        };
        return ValueMappingService;
    }());
    SAPB1.ValueMappingService = ValueMappingService;
    var DNFCodeSetupService = (function () {
        function DNFCodeSetupService() {
        }
        // Return type: SAPB1.DNFCodeSetupParams[]
        DNFCodeSetupService.GetDNFCodeSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DNFCodeSetupService_GetDNFCodeSetupList", sessionId, routeId, [null]);
        };
        return DNFCodeSetupService;
    }());
    SAPB1.DNFCodeSetupService = DNFCodeSetupService;
    var EmployeePositionService = (function () {
        function EmployeePositionService() {
        }
        // Return type: SAPB1.EmployeePositionParams[]
        EmployeePositionService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeePositionService_GetList", sessionId, routeId, [null]);
        };
        return EmployeePositionService;
    }());
    SAPB1.EmployeePositionService = EmployeePositionService;
    var ServiceCallStatusService = (function () {
        function ServiceCallStatusService() {
        }
        // Return type: SAPB1.ServiceCallStatusParams[]
        ServiceCallStatusService.GetServiceCallStatusList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallStatusService_GetServiceCallStatusList", sessionId, routeId, [null]);
        };
        return ServiceCallStatusService;
    }());
    SAPB1.ServiceCallStatusService = ServiceCallStatusService;
    var ServiceTaxPostingService = (function () {
        function ServiceTaxPostingService() {
        }
        // Return type: void
        ServiceTaxPostingService.PostServiceTax = function (ServiceTaxPostingParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceTaxPostingService_PostServiceTax", sessionId, routeId, [ServiceTaxPostingParams]);
        };
        // Return type: SAPB1.ServiceTaxPostingParams[]
        ServiceTaxPostingService.GetTaxableDeliveries = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceTaxPostingService_GetTaxableDeliveries", sessionId, routeId, [null]);
        };
        return ServiceTaxPostingService;
    }());
    SAPB1.ServiceTaxPostingService = ServiceTaxPostingService;
    var EmailGroupsService = (function () {
        function EmailGroupsService() {
        }
        // Return type: SAPB1.EmailGroupParams[]
        EmailGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmailGroupsService_GetList", sessionId, routeId, [null]);
        };
        return EmailGroupsService;
    }());
    SAPB1.EmailGroupsService = EmailGroupsService;
    var LandedCostsService = (function () {
        function LandedCostsService() {
        }
        // Return type: SAPB1.LandedCostParams[]
        LandedCostsService.GetLandedCostList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "LandedCostsService_GetLandedCostList", sessionId, routeId, [null]);
        };
        return LandedCostsService;
    }());
    SAPB1.LandedCostsService = LandedCostsService;
    var ElectronicCommunicationActionService = (function () {
        function ElectronicCommunicationActionService() {
        }
        // Return type: SAPB1.ECMActionStatusData
        ElectronicCommunicationActionService.GetAction = function (ECMCodeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionService_GetAction", sessionId, routeId, [ECMCodeParams]);
        };
        // Return type: void
        ElectronicCommunicationActionService.UpdateAction = function (ECMActionStatusData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionService_UpdateAction", sessionId, routeId, [ECMActionStatusData]);
        };
        // Return type: void
        ElectronicCommunicationActionService.ConfirmSuccessOfCommunication = function (ECMCodeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionService_ConfirmSuccessOfCommunication", sessionId, routeId, [ECMCodeParams]);
        };
        // Return type: void
        ElectronicCommunicationActionService.ReportErrorAndContinue = function (ECMCodeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionService_ReportErrorAndContinue", sessionId, routeId, [ECMCodeParams]);
        };
        // Return type: void
        ElectronicCommunicationActionService.ReportErrorAndStop = function (ECMCodeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ElectronicCommunicationActionService_ReportErrorAndStop", sessionId, routeId, [ECMCodeParams]);
        };
        return ElectronicCommunicationActionService;
    }());
    SAPB1.ElectronicCommunicationActionService = ElectronicCommunicationActionService;
    var Session = (function () {
        function Session() {
        }
        // Return type: SAPB1.B1Session
        Session.Login = function (loginInfo) {
            callSL(B1ObjActionEnum.LOGIN, "Login", "", "", [loginInfo]);
        };
        // Return type: void
        Session.Logout = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.LOGOUT, "Logout", sessionId, routeId, [null]);
        };
        return Session;
    }());
    SAPB1.Session = Session;
    var InventoryOpeningBalancesService = (function () {
        function InventoryOpeningBalancesService() {
        }
        // Return type: SAPB1.InventoryOpeningBalanceParams[]
        InventoryOpeningBalancesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryOpeningBalancesService_GetList", sessionId, routeId, [null]);
        };
        return InventoryOpeningBalancesService;
    }());
    SAPB1.InventoryOpeningBalancesService = InventoryOpeningBalancesService;
    var PurchaseInvoicesService = (function () {
        function PurchaseInvoicesService() {
        }
        // Return type: SAPB1.Document
        PurchaseInvoicesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoicesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseInvoicesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoicesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseInvoicesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoicesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseInvoicesService;
    }());
    SAPB1.PurchaseInvoicesService = PurchaseInvoicesService;
    var CashFlowLineItemsService = (function () {
        function CashFlowLineItemsService() {
        }
        // Return type: SAPB1.CashFlowLineItemParams[]
        CashFlowLineItemsService.GetCashFlowLineItemList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CashFlowLineItemsService_GetCashFlowLineItemList", sessionId, routeId, [null]);
        };
        return CashFlowLineItemsService;
    }());
    SAPB1.CashFlowLineItemsService = CashFlowLineItemsService;
    var ResourceCapacitiesService = (function () {
        function ResourceCapacitiesService() {
        }
        // Return type: SAPB1.ResourceCapacityParams[]
        ResourceCapacitiesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ResourceCapacitiesService_GetList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.ResourceCapacityParams[]
        ResourceCapacitiesService.GetListWithFilter = function (ResourceCapacityWithFilterParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ResourceCapacitiesService_GetListWithFilter", sessionId, routeId, [ResourceCapacityWithFilterParams]);
        };
        return ResourceCapacitiesService;
    }());
    SAPB1.ResourceCapacitiesService = ResourceCapacitiesService;
    var GovPayCodesService = (function () {
        function GovPayCodesService() {
        }
        // Return type: SAPB1.GovPayCodeParams[]
        GovPayCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "GovPayCodesService_GetList", sessionId, routeId, [null]);
        };
        return GovPayCodesService;
    }());
    SAPB1.GovPayCodesService = GovPayCodesService;
    var TaxCodeDeterminationsTCDService = (function () {
        function TaxCodeDeterminationsTCDService() {
        }
        // Return type: SAPB1.TaxCodeDeterminationTCDParams[]
        TaxCodeDeterminationsTCDService.GetTaxCodeDeterminationTCDList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxCodeDeterminationsTCDService_GetTaxCodeDeterminationTCDList", sessionId, routeId, [null]);
        };
        return TaxCodeDeterminationsTCDService;
    }());
    SAPB1.TaxCodeDeterminationsTCDService = TaxCodeDeterminationsTCDService;
    var CreditNotesService = (function () {
        function CreditNotesService() {
        }
        // Return type: SAPB1.Document
        CreditNotesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        CreditNotesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        CreditNotesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return CreditNotesService;
    }());
    SAPB1.CreditNotesService = CreditNotesService;
    var BranchesService = (function () {
        function BranchesService() {
        }
        // Return type: SAPB1.BranchParams[]
        BranchesService.GetBranchList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BranchesService_GetBranchList", sessionId, routeId, [null]);
        };
        return BranchesService;
    }());
    SAPB1.BranchesService = BranchesService;
    var ProjectManagementService = (function () {
        function ProjectManagementService() {
        }
        // Return type: SAPB1.PM_SubprojectDocumentParams[]
        ProjectManagementService.GetSubprojectsList = function (PM_SubprojectParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementService_GetSubprojectsList", sessionId, routeId, [PM_SubprojectParams]);
        };
        // Return type: SAPB1.PM_SubprojectDocumentData
        ProjectManagementService.GetSubproject = function (PM_SubprojectDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementService_GetSubproject", sessionId, routeId, [PM_SubprojectDocumentParams]);
        };
        // Return type: SAPB1.PM_SubprojectDocumentParams
        ProjectManagementService.AddSubproject = function (PM_SubprojectDocumentData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementService_AddSubproject", sessionId, routeId, [PM_SubprojectDocumentData]);
        };
        // Return type: void
        ProjectManagementService.UpdateSubproject = function (PM_SubprojectDocumentData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementService_UpdateSubproject", sessionId, routeId, [PM_SubprojectDocumentData]);
        };
        // Return type: void
        ProjectManagementService.DeleteSubproject = function (PM_SubprojectDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementService_DeleteSubproject", sessionId, routeId, [PM_SubprojectDocumentParams]);
        };
        return ProjectManagementService;
    }());
    SAPB1.ProjectManagementService = ProjectManagementService;
    var EmployeeIDTypeService = (function () {
        function EmployeeIDTypeService() {
        }
        // Return type: SAPB1.EmployeeIDTypeParams[]
        EmployeeIDTypeService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeeIDTypeService_GetList", sessionId, routeId, [null]);
        };
        return EmployeeIDTypeService;
    }());
    SAPB1.EmployeeIDTypeService = EmployeeIDTypeService;
    var ResourcePropertiesService = (function () {
        function ResourcePropertiesService() {
        }
        // Return type: SAPB1.ResourcePropertyParams[]
        ResourcePropertiesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ResourcePropertiesService_GetList", sessionId, routeId, [null]);
        };
        return ResourcePropertiesService;
    }());
    SAPB1.ResourcePropertiesService = ResourcePropertiesService;
    var BrazilBeverageIndexersService = (function () {
        function BrazilBeverageIndexersService() {
        }
        // Return type: SAPB1.BrazilBeverageIndexerParams[]
        BrazilBeverageIndexersService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BrazilBeverageIndexersService_GetList", sessionId, routeId, [null]);
        };
        return BrazilBeverageIndexersService;
    }());
    SAPB1.BrazilBeverageIndexersService = BrazilBeverageIndexersService;
    var CompanyService = (function () {
        function CompanyService() {
        }
        // Return type: SAPB1.CompanyInfo
        CompanyService.GetCompanyInfo = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetCompanyInfo", sessionId, routeId, [null]);
        };
        // Return type: void
        CompanyService.UpdateCompanyInfo = function (CompanyInfo, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_UpdateCompanyInfo", sessionId, routeId, [CompanyInfo]);
        };
        // Return type: SAPB1.AdminInfo
        CompanyService.GetAdminInfo = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetAdminInfo", sessionId, routeId, [null]);
        };
        // Return type: void
        CompanyService.UpdateAdminInfo = function (AdminInfo, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_UpdateAdminInfo", sessionId, routeId, [AdminInfo]);
        };
        // Return type: SAPB1.PeriodCategoryParams
        CompanyService.CreatePeriod = function (PeriodCategory, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_CreatePeriod", sessionId, routeId, [PeriodCategory]);
        };
        // Return type: SAPB1.PeriodCategoryParams[]
        CompanyService.GetPeriods = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetPeriods", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.PeriodCategory
        CompanyService.GetPeriod = function (PeriodCategoryParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetPeriod", sessionId, routeId, [PeriodCategoryParams]);
        };
        // Return type: void
        CompanyService.UpdatePeriod = function (PeriodCategory, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_UpdatePeriod", sessionId, routeId, [PeriodCategory]);
        };
        // Return type: SAPB1.FinancePeriod[]
        CompanyService.GetFinancePeriods = function (PeriodCategoryParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetFinancePeriods", sessionId, routeId, [PeriodCategoryParams]);
        };
        // Return type: SAPB1.FinancePeriod
        CompanyService.GetFinancePeriod = function (FinancePeriodParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetFinancePeriod", sessionId, routeId, [FinancePeriodParams]);
        };
        // Return type: void
        CompanyService.UpdateFinancePeriod = function (FinancePeriod, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_UpdateFinancePeriod", sessionId, routeId, [FinancePeriod]);
        };
        // Return type: void
        CompanyService.RemoveFinancePeriod = function (FinancePeriodParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_RemoveFinancePeriod", sessionId, routeId, [FinancePeriodParams]);
        };
        // Return type: SAPB1.PeriodCategoryParams
        CompanyService.CreatePeriodWithFinanceParams = function (PeriodCategory, FinancePeriodParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_CreatePeriodWithFinanceParams", sessionId, routeId, [PeriodCategory, FinancePeriodParams]);
        };
        // Return type: SAPB1.FeatureStatus[]
        CompanyService.GetFeaturesStatus = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetFeaturesStatus", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.PathAdmin
        CompanyService.GetPathAdmin = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetPathAdmin", sessionId, routeId, [null]);
        };
        // Return type: void
        CompanyService.UpdatePathAdmin = function (PathAdmin, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_UpdatePathAdmin", sessionId, routeId, [PathAdmin]);
        };
        // Return type: SAPB1.RoundedData
        CompanyService.RoundDecimal = function (DecimalData, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_RoundDecimal", sessionId, routeId, [DecimalData]);
        };
        // Return type: SAPB1.ItemPriceReturnParams
        CompanyService.GetItemPrice = function (ItemPriceParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetItemPrice", sessionId, routeId, [ItemPriceParams]);
        };
        // Return type: SAPB1.AdvancedGLAccountReturnParams
        CompanyService.GetAdvancedGLAccount = function (AdvancedGLAccountParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CompanyService_GetAdvancedGLAccount", sessionId, routeId, [AdvancedGLAccountParams]);
        };
        return CompanyService;
    }());
    SAPB1.CompanyService = CompanyService;
    var ProjectManagementConfigurationService = (function () {
        function ProjectManagementConfigurationService() {
        }
        // Return type: SAPB1.PMC_SubprojectTypeData[]
        ProjectManagementConfigurationService.GetSubprojectTypes = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetSubprojectTypes", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddSubprojectTypes = function (PMC_SubprojectTypesCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddSubprojectTypes", sessionId, routeId, [PMC_SubprojectTypesCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdateSubprojectTypes = function (PMC_SubprojectTypesCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdateSubprojectTypes", sessionId, routeId, [PMC_SubprojectTypesCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeleteSubprojectTypes = function (PMC_SubprojectTypesCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeleteSubprojectTypes", sessionId, routeId, [PMC_SubprojectTypesCollection]);
        };
        // Return type: SAPB1.PMC_StageTypeData[]
        ProjectManagementConfigurationService.GetStageTypes = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetStageTypes", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddStageTypes = function (PMC_StageTypeCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddStageTypes", sessionId, routeId, [PMC_StageTypeCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdateStageTypes = function (PMC_StageTypeCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdateStageTypes", sessionId, routeId, [PMC_StageTypeCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeleteStageTypes = function (PMC_StageTypeCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeleteStageTypes", sessionId, routeId, [PMC_StageTypeCollection]);
        };
        // Return type: SAPB1.PMC_AreaData[]
        ProjectManagementConfigurationService.GetAreas = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetAreas", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddAreas = function (PMC_AreaCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddAreas", sessionId, routeId, [PMC_AreaCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdateAreas = function (PMC_AreaCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdateAreas", sessionId, routeId, [PMC_AreaCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeleteAreas = function (PMC_AreaCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeleteAreas", sessionId, routeId, [PMC_AreaCollection]);
        };
        // Return type: SAPB1.PMC_PriorityData[]
        ProjectManagementConfigurationService.GetPriorities = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetPriorities", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddPriorities = function (PMC_PriorityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddPriorities", sessionId, routeId, [PMC_PriorityCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdatePriorities = function (PMC_PriorityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdatePriorities", sessionId, routeId, [PMC_PriorityCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeletePriorities = function (PMC_PriorityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeletePriorities", sessionId, routeId, [PMC_PriorityCollection]);
        };
        // Return type: SAPB1.PMC_ActivityData[]
        ProjectManagementConfigurationService.GetActivities = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetActivities", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddActivities = function (PMC_ActivityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddActivities", sessionId, routeId, [PMC_ActivityCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdateActivities = function (PMC_ActivityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdateActivities", sessionId, routeId, [PMC_ActivityCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeleteActivities = function (PMC_ActivityCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeleteActivities", sessionId, routeId, [PMC_ActivityCollection]);
        };
        // Return type: SAPB1.PMC_TaskData[]
        ProjectManagementConfigurationService.GetTasks = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_GetTasks", sessionId, routeId, [null]);
        };
        // Return type: void
        ProjectManagementConfigurationService.AddTasks = function (PMC_TaskCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_AddTasks", sessionId, routeId, [PMC_TaskCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.UpdateTasks = function (PMC_TaskCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_UpdateTasks", sessionId, routeId, [PMC_TaskCollection]);
        };
        // Return type: void
        ProjectManagementConfigurationService.DeleteTasks = function (PMC_TaskCollection, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagementConfigurationService_DeleteTasks", sessionId, routeId, [PMC_TaskCollection]);
        };
        return ProjectManagementConfigurationService;
    }());
    SAPB1.ProjectManagementConfigurationService = ProjectManagementConfigurationService;
    var InvoicesService = (function () {
        function InvoicesService() {
        }
        // Return type: SAPB1.Document
        InvoicesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InvoicesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        InvoicesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InvoicesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        InvoicesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InvoicesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return InvoicesService;
    }());
    SAPB1.InvoicesService = InvoicesService;
    var DepartmentsService = (function () {
        function DepartmentsService() {
        }
        // Return type: SAPB1.DepartmentParams[]
        DepartmentsService.GetDepartmentList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepartmentsService_GetDepartmentList", sessionId, routeId, [null]);
        };
        return DepartmentsService;
    }());
    SAPB1.DepartmentsService = DepartmentsService;
    var SeriesService = (function () {
        function SeriesService() {
        }
        // Return type: SAPB1.SeriesParams
        SeriesService.AddSeries = function (Series, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_AddSeries", sessionId, routeId, [Series]);
        };
        // Return type: void
        SeriesService.RemoveSeries = function (SeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_RemoveSeries", sessionId, routeId, [SeriesParams]);
        };
        // Return type: void
        SeriesService.AttachSeriesToDocument = function (DocumentSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_AttachSeriesToDocument", sessionId, routeId, [DocumentSeriesParams]);
        };
        // Return type: void
        SeriesService.UnattachSeriesFromDocument = function (DocumentSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_UnattachSeriesFromDocument", sessionId, routeId, [DocumentSeriesParams]);
        };
        // Return type: void
        SeriesService.SetDefaultSeriesForAllUsers = function (DocumentSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_SetDefaultSeriesForAllUsers", sessionId, routeId, [DocumentSeriesParams]);
        };
        // Return type: void
        SeriesService.SetDefaultSeriesForCurrentUser = function (DocumentSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_SetDefaultSeriesForCurrentUser", sessionId, routeId, [DocumentSeriesParams]);
        };
        // Return type: void
        SeriesService.SetDefaultSeriesForUser = function (DocumentSeriesUserParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_SetDefaultSeriesForUser", sessionId, routeId, [DocumentSeriesUserParams]);
        };
        // Return type: void
        SeriesService.UpdateSeries = function (Series, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_UpdateSeries", sessionId, routeId, [Series]);
        };
        // Return type: SAPB1.Series
        SeriesService.GetDefaultSeries = function (DocumentTypeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetDefaultSeries", sessionId, routeId, [DocumentTypeParams]);
        };
        // Return type: SAPB1.Series[]
        SeriesService.GetDocumentSeries = function (DocumentTypeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetDocumentSeries", sessionId, routeId, [DocumentTypeParams]);
        };
        // Return type: SAPB1.Series
        SeriesService.GetSeries = function (SeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetSeries", sessionId, routeId, [SeriesParams]);
        };
        // Return type: SAPB1.DocumentChangeMenuName
        SeriesService.GetDocumentChangedMenuName = function (DocumentTypeParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetDocumentChangedMenuName", sessionId, routeId, [DocumentTypeParams]);
        };
        // Return type: void
        SeriesService.ChangeDocumentMenuName = function (DocumentChangeMenuName, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_ChangeDocumentMenuName", sessionId, routeId, [DocumentChangeMenuName]);
        };
        // Return type: SAPB1.ElectronicSeries
        SeriesService.GetElectronicSeries = function (ElectronicSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetElectronicSeries", sessionId, routeId, [ElectronicSeriesParams]);
        };
        // Return type: SAPB1.ElectronicSeriesParams
        SeriesService.AddElectronicSeries = function (ElectronicSeries, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_AddElectronicSeries", sessionId, routeId, [ElectronicSeries]);
        };
        // Return type: void
        SeriesService.RemoveElectronicSeries = function (ElectronicSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_RemoveElectronicSeries", sessionId, routeId, [ElectronicSeriesParams]);
        };
        // Return type: void
        SeriesService.UpdateElectronicSeries = function (ElectronicSeries, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_UpdateElectronicSeries", sessionId, routeId, [ElectronicSeries]);
        };
        // Return type: SAPB1.ElectronicSeriesParams
        SeriesService.GetDefaultElectronicSeries = function (SeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_GetDefaultElectronicSeries", sessionId, routeId, [SeriesParams]);
        };
        // Return type: void
        SeriesService.SetDefaultElectronicSeries = function (DefaultElectronicSeriesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SeriesService_SetDefaultElectronicSeries", sessionId, routeId, [DefaultElectronicSeriesParams]);
        };
        return SeriesService;
    }());
    SAPB1.SeriesService = SeriesService;
    var EmployeeTransfersService = (function () {
        function EmployeeTransfersService() {
        }
        // Return type: SAPB1.EmployeeTransferParams[]
        EmployeeTransfersService.GetEmployeeTransferList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeeTransfersService_GetEmployeeTransferList", sessionId, routeId, [null]);
        };
        return EmployeeTransfersService;
    }());
    SAPB1.EmployeeTransfersService = EmployeeTransfersService;
    var BarCodesService = (function () {
        function BarCodesService() {
        }
        // Return type: SAPB1.BarCodeParams[]
        BarCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BarCodesService_GetList", sessionId, routeId, [null]);
        };
        return BarCodesService;
    }());
    SAPB1.BarCodesService = BarCodesService;
    var AssetManualDepreciationService = (function () {
        function AssetManualDepreciationService() {
        }
        // Return type: void
        AssetManualDepreciationService.Cancel = function (AssetDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetManualDepreciationService_Cancel", sessionId, routeId, [AssetDocumentParams]);
        };
        // Return type: SAPB1.AssetDocumentParams[]
        AssetManualDepreciationService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetManualDepreciationService_GetList", sessionId, routeId, [null]);
        };
        return AssetManualDepreciationService;
    }());
    SAPB1.AssetManualDepreciationService = AssetManualDepreciationService;
    var PurchaseQuotationsService = (function () {
        function PurchaseQuotationsService() {
        }
        // Return type: SAPB1.Document
        PurchaseQuotationsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotationsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseQuotationsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotationsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseQuotationsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotationsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseQuotationsService;
    }());
    SAPB1.PurchaseQuotationsService = PurchaseQuotationsService;
    var CountriesService = (function () {
        function CountriesService() {
        }
        // Return type: SAPB1.CountryParams[]
        CountriesService.GetCountryList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CountriesService_GetCountryList", sessionId, routeId, [null]);
        };
        return CountriesService;
    }());
    SAPB1.CountriesService = CountriesService;
    var NatureOfAssesseesService = (function () {
        function NatureOfAssesseesService() {
        }
        // Return type: SAPB1.NatureOfAssesseeParams[]
        NatureOfAssesseesService.GetNatureOfAssesseeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "NatureOfAssesseesService_GetNatureOfAssesseeList", sessionId, routeId, [null]);
        };
        return NatureOfAssesseesService;
    }());
    SAPB1.NatureOfAssesseesService = NatureOfAssesseesService;
    var BinLocationsService = (function () {
        function BinLocationsService() {
        }
        // Return type: SAPB1.BinLocationParams[]
        BinLocationsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BinLocationsService_GetList", sessionId, routeId, [null]);
        };
        return BinLocationsService;
    }());
    SAPB1.BinLocationsService = BinLocationsService;
    var AssetClassesService = (function () {
        function AssetClassesService() {
        }
        // Return type: SAPB1.AssetClassParams[]
        AssetClassesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetClassesService_GetList", sessionId, routeId, [null]);
        };
        return AssetClassesService;
    }());
    SAPB1.AssetClassesService = AssetClassesService;
    var ServiceCallTypesService = (function () {
        function ServiceCallTypesService() {
        }
        // Return type: SAPB1.ServiceCallTypeParams[]
        ServiceCallTypesService.GetServiceCallTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallTypesService_GetServiceCallTypeList", sessionId, routeId, [null]);
        };
        return ServiceCallTypesService;
    }());
    SAPB1.ServiceCallTypesService = ServiceCallTypesService;
    var ExternalCallsService = (function () {
        function ExternalCallsService() {
        }
        // Return type: SAPB1.ExternalCallParams
        ExternalCallsService.SendCall = function (ExternalCall, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalCallsService_SendCall", sessionId, routeId, [ExternalCall]);
        };
        // Return type: void
        ExternalCallsService.UpdateCall = function (ExternalCall, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalCallsService_UpdateCall", sessionId, routeId, [ExternalCall]);
        };
        // Return type: SAPB1.ExternalCall
        ExternalCallsService.GetCall = function (ExternalCallParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExternalCallsService_GetCall", sessionId, routeId, [ExternalCallParams]);
        };
        return ExternalCallsService;
    }());
    SAPB1.ExternalCallsService = ExternalCallsService;
    var AlertService = (function () {
        function AlertService() {
        }
        // Return type: number
        AlertService.RunAlert = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlertService_RunAlert", sessionId, routeId, [null]);
        };
        return AlertService;
    }());
    SAPB1.AlertService = AlertService;
    var AssetCapitalizationService = (function () {
        function AssetCapitalizationService() {
        }
        // Return type: void
        AssetCapitalizationService.Cancel = function (AssetDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetCapitalizationService_Cancel", sessionId, routeId, [AssetDocumentParams]);
        };
        // Return type: SAPB1.AssetDocumentParams[]
        AssetCapitalizationService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetCapitalizationService_GetList", sessionId, routeId, [null]);
        };
        return AssetCapitalizationService;
    }());
    SAPB1.AssetCapitalizationService = AssetCapitalizationService;
    var CockpitsService = (function () {
        function CockpitsService() {
        }
        // Return type: SAPB1.CockpitParams[]
        CockpitsService.GetCockpitList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CockpitsService_GetCockpitList", sessionId, routeId, [null]);
        };
        // Return type: void
        CockpitsService.PublishCockpit = function (Cockpit, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CockpitsService_PublishCockpit", sessionId, routeId, [Cockpit]);
        };
        // Return type: SAPB1.CockpitParams[]
        CockpitsService.GetUserCockpitList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CockpitsService_GetUserCockpitList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.CockpitParams[]
        CockpitsService.GetTemplateCockpitList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CockpitsService_GetTemplateCockpitList", sessionId, routeId, [null]);
        };
        return CockpitsService;
    }());
    SAPB1.CockpitsService = CockpitsService;
    var InventoryPostingsService = (function () {
        function InventoryPostingsService() {
        }
        // Return type: SAPB1.InventoryPostingParams[]
        InventoryPostingsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryPostingsService_GetList", sessionId, routeId, [null]);
        };
        // Return type: void
        InventoryPostingsService.SetCopyOption = function (InventoryPostingCopyOption, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryPostingsService_SetCopyOption", sessionId, routeId, [InventoryPostingCopyOption]);
        };
        return InventoryPostingsService;
    }());
    SAPB1.InventoryPostingsService = InventoryPostingsService;
    var FiscalPrinterService = (function () {
        function FiscalPrinterService() {
        }
        // Return type: SAPB1.FiscalPrinterParams[]
        FiscalPrinterService.GetFiscalPrinterList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FiscalPrinterService_GetFiscalPrinterList", sessionId, routeId, [null]);
        };
        return FiscalPrinterService;
    }());
    SAPB1.FiscalPrinterService = FiscalPrinterService;
    var CheckLinesService = (function () {
        function CheckLinesService() {
        }
        // Return type: SAPB1.CheckLine
        CheckLinesService.GetCheckLine = function (CheckLineParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CheckLinesService_GetCheckLine", sessionId, routeId, [CheckLineParams]);
        };
        // Return type: SAPB1.CheckLineParams[]
        CheckLinesService.GetValidCheckLineList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CheckLinesService_GetValidCheckLineList", sessionId, routeId, [null]);
        };
        return CheckLinesService;
    }());
    SAPB1.CheckLinesService = CheckLinesService;
    var PurchaseCreditNotesService = (function () {
        function PurchaseCreditNotesService() {
        }
        // Return type: SAPB1.Document
        PurchaseCreditNotesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseCreditNotesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseCreditNotesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseCreditNotesService;
    }());
    SAPB1.PurchaseCreditNotesService = PurchaseCreditNotesService;
    var OrdersService = (function () {
        function OrdersService() {
        }
        // Return type: SAPB1.Document
        OrdersService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "OrdersService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        OrdersService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "OrdersService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        OrdersService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "OrdersService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return OrdersService;
    }());
    SAPB1.OrdersService = OrdersService;
    var BinLocationFieldsService = (function () {
        function BinLocationFieldsService() {
        }
        // Return type: SAPB1.BinLocationFieldParams[]
        BinLocationFieldsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BinLocationFieldsService_GetList", sessionId, routeId, [null]);
        };
        return BinLocationFieldsService;
    }());
    SAPB1.BinLocationFieldsService = BinLocationFieldsService;
    var ProjectsService = (function () {
        function ProjectsService() {
        }
        // Return type: SAPB1.ProjectParams[]
        ProjectsService.GetProjectList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectsService_GetProjectList", sessionId, routeId, [null]);
        };
        return ProjectsService;
    }());
    SAPB1.ProjectsService = ProjectsService;
    var ProfitCentersService = (function () {
        function ProfitCentersService() {
        }
        // Return type: SAPB1.ProfitCenterParams[]
        ProfitCentersService.GetProfitCenterList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProfitCentersService_GetProfitCenterList", sessionId, routeId, [null]);
        };
        return ProfitCentersService;
    }());
    SAPB1.ProfitCentersService = ProfitCentersService;
    var ResourcesService = (function () {
        function ResourcesService() {
        }
        // Return type: SAPB1.ResourceParams[]
        ResourcesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ResourcesService_GetList", sessionId, routeId, [null]);
        };
        return ResourcesService;
    }());
    SAPB1.ResourcesService = ResourcesService;
    var PurchaseReturnsService = (function () {
        function PurchaseReturnsService() {
        }
        // Return type: SAPB1.Document
        PurchaseReturnsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturnsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseReturnsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturnsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseReturnsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturnsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseReturnsService;
    }());
    SAPB1.PurchaseReturnsService = PurchaseReturnsService;
    var DepreciationTypePoolsService = (function () {
        function DepreciationTypePoolsService() {
        }
        // Return type: SAPB1.DepreciationTypePoolParams[]
        DepreciationTypePoolsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DepreciationTypePoolsService_GetList", sessionId, routeId, [null]);
        };
        return DepreciationTypePoolsService;
    }());
    SAPB1.DepreciationTypePoolsService = DepreciationTypePoolsService;
    var MaterialRevaluationSNBService = (function () {
        function MaterialRevaluationSNBService() {
        }
        // Return type: SAPB1.MaterialRevaluationSNBParams[]
        MaterialRevaluationSNBService.GetList = function (MaterialRevaluationSNBParam, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MaterialRevaluationSNBService_GetList", sessionId, routeId, [MaterialRevaluationSNBParam]);
        };
        return MaterialRevaluationSNBService;
    }());
    SAPB1.MaterialRevaluationSNBService = MaterialRevaluationSNBService;
    var ReturnsService = (function () {
        function ReturnsService() {
        }
        // Return type: SAPB1.Document
        ReturnsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReturnsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        ReturnsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReturnsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        ReturnsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReturnsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return ReturnsService;
    }());
    SAPB1.ReturnsService = ReturnsService;
    var CashDiscountsService = (function () {
        function CashDiscountsService() {
        }
        // Return type: SAPB1.CashDiscountParams[]
        CashDiscountsService.GetCashDiscountList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CashDiscountsService_GetCashDiscountList", sessionId, routeId, [null]);
        };
        return CashDiscountsService;
    }());
    SAPB1.CashDiscountsService = CashDiscountsService;
    var InventoryCountingsService = (function () {
        function InventoryCountingsService() {
        }
        // Return type: SAPB1.InventoryCountingParams[]
        InventoryCountingsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryCountingsService_GetList", sessionId, routeId, [null]);
        };
        return InventoryCountingsService;
    }());
    SAPB1.InventoryCountingsService = InventoryCountingsService;
    var PurchaseDeliveryNotesService = (function () {
        function PurchaseDeliveryNotesService() {
        }
        // Return type: SAPB1.Document
        PurchaseDeliveryNotesService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotesService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        PurchaseDeliveryNotesService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotesService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        PurchaseDeliveryNotesService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotesService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return PurchaseDeliveryNotesService;
    }());
    SAPB1.PurchaseDeliveryNotesService = PurchaseDeliveryNotesService;
    var UserMenuService = (function () {
        function UserMenuService() {
        }
        // Return type: SAPB1.UserMenuItem[]
        UserMenuService.GetCurrentUserMenu = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UserMenuService_GetCurrentUserMenu", sessionId, routeId, [null]);
        };
        // Return type: void
        UserMenuService.UpdateCurrentUserMenu = function (UserMenuItems, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UserMenuService_UpdateCurrentUserMenu", sessionId, routeId, [UserMenuItems]);
        };
        // Return type: SAPB1.UserMenuItem[]
        UserMenuService.GetUserMenu = function (UserMenuParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UserMenuService_GetUserMenu", sessionId, routeId, [UserMenuParams]);
        };
        // Return type: void
        UserMenuService.UpdateUserMenu = function (UserMenuParams, UserMenuItems, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UserMenuService_UpdateUserMenu", sessionId, routeId, [UserMenuParams, UserMenuItems]);
        };
        return UserMenuService;
    }());
    SAPB1.UserMenuService = UserMenuService;
    var ServiceCallProblemTypesService = (function () {
        function ServiceCallProblemTypesService() {
        }
        // Return type: SAPB1.ServiceCallProblemTypeParams[]
        ServiceCallProblemTypesService.GetServiceCallProblemTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallProblemTypesService_GetServiceCallProblemTypeList", sessionId, routeId, [null]);
        };
        return ServiceCallProblemTypesService;
    }());
    SAPB1.ServiceCallProblemTypesService = ServiceCallProblemTypesService;
    var LicenseService = (function () {
        function LicenseService() {
        }
        // Return type: string
        LicenseService.GetInstallationNumber = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "LicenseService_GetInstallationNumber", sessionId, routeId, [null]);
        };
        return LicenseService;
    }());
    SAPB1.LicenseService = LicenseService;
    var TaxWebSitesService = (function () {
        function TaxWebSitesService() {
        }
        // Return type: SAPB1.TaxWebSiteParams[]
        TaxWebSitesService.GetTaxWebSiteList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxWebSitesService_GetTaxWebSiteList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.TaxWebSiteParams
        TaxWebSitesService.GetDefaultWebSite = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxWebSitesService_GetDefaultWebSite", sessionId, routeId, [null]);
        };
        return TaxWebSitesService;
    }());
    SAPB1.TaxWebSitesService = TaxWebSitesService;
    var BrazilFuelIndexersService = (function () {
        function BrazilFuelIndexersService() {
        }
        // Return type: SAPB1.BrazilFuelIndexerParams[]
        BrazilFuelIndexersService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BrazilFuelIndexersService_GetList", sessionId, routeId, [null]);
        };
        return BrazilFuelIndexersService;
    }());
    SAPB1.BrazilFuelIndexersService = BrazilFuelIndexersService;
    var DeterminationCriteriasService = (function () {
        function DeterminationCriteriasService() {
        }
        // Return type: SAPB1.DeterminationCriteriaParams[]
        DeterminationCriteriasService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeterminationCriteriasService_GetList", sessionId, routeId, [null]);
        };
        return DeterminationCriteriasService;
    }());
    SAPB1.DeterminationCriteriasService = DeterminationCriteriasService;
    var ServiceGroupsService = (function () {
        function ServiceGroupsService() {
        }
        // Return type: SAPB1.ServiceGroupParams[]
        ServiceGroupsService.GetServiceGroupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceGroupsService_GetServiceGroupList", sessionId, routeId, [null]);
        };
        return ServiceGroupsService;
    }());
    SAPB1.ServiceGroupsService = ServiceGroupsService;
    var DraftsService = (function () {
        function DraftsService() {
        }
        // Return type: SAPB1.Document
        DraftsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DraftsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        DraftsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DraftsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        DraftsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DraftsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return DraftsService;
    }());
    SAPB1.DraftsService = DraftsService;
    var CorrectionInvoiceReversalService = (function () {
        function CorrectionInvoiceReversalService() {
        }
        // Return type: SAPB1.Document
        CorrectionInvoiceReversalService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversalService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        CorrectionInvoiceReversalService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversalService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        CorrectionInvoiceReversalService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversalService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return CorrectionInvoiceReversalService;
    }());
    SAPB1.CorrectionInvoiceReversalService = CorrectionInvoiceReversalService;
    var ReportTypesService = (function () {
        function ReportTypesService() {
        }
        // Return type: SAPB1.ReportTypeParams[]
        ReportTypesService.GetReportTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportTypesService_GetReportTypeList", sessionId, routeId, [null]);
        };
        return ReportTypesService;
    }());
    SAPB1.ReportTypesService = ReportTypesService;
    var GTIsService = (function () {
        function GTIsService() {
        }
        // Return type: SAPB1.GTIParams[]
        GTIsService.Import = function (GTIParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "GTIsService_Import", sessionId, routeId, [GTIParams]);
        };
        return GTIsService;
    }());
    SAPB1.GTIsService = GTIsService;
    var AssetRetirementService = (function () {
        function AssetRetirementService() {
        }
        // Return type: void
        AssetRetirementService.Cancel = function (AssetDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetRetirementService_Cancel", sessionId, routeId, [AssetDocumentParams]);
        };
        // Return type: SAPB1.AssetDocumentParams[]
        AssetRetirementService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetRetirementService_GetList", sessionId, routeId, [null]);
        };
        return AssetRetirementService;
    }());
    SAPB1.AssetRetirementService = AssetRetirementService;
    var NFTaxCategoriesService = (function () {
        function NFTaxCategoriesService() {
        }
        // Return type: SAPB1.NFTaxCategoryParams[]
        NFTaxCategoriesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "NFTaxCategoriesService_GetList", sessionId, routeId, [null]);
        };
        return NFTaxCategoriesService;
    }());
    SAPB1.NFTaxCategoriesService = NFTaxCategoriesService;
    var FinancialYearsService = (function () {
        function FinancialYearsService() {
        }
        // Return type: SAPB1.FinancialYearParams[]
        FinancialYearsService.GetFinancialYearList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FinancialYearsService_GetFinancialYearList", sessionId, routeId, [null]);
        };
        return FinancialYearsService;
    }());
    SAPB1.FinancialYearsService = FinancialYearsService;
    var MaterialGroupsService = (function () {
        function MaterialGroupsService() {
        }
        // Return type: SAPB1.MaterialGroupParams[]
        MaterialGroupsService.GetMaterialGroupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MaterialGroupsService_GetMaterialGroupList", sessionId, routeId, [null]);
        };
        return MaterialGroupsService;
    }());
    SAPB1.MaterialGroupsService = MaterialGroupsService;
    var SectionsService = (function () {
        function SectionsService() {
        }
        // Return type: SAPB1.SectionParams[]
        SectionsService.GetSectionList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SectionsService_GetSectionList", sessionId, routeId, [null]);
        };
        return SectionsService;
    }());
    SAPB1.SectionsService = SectionsService;
    var WorkflowTaskService = (function () {
        function WorkflowTaskService() {
        }
        // Return type: void
        WorkflowTaskService.Complete = function (WorkflowTaskCompleteParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "WorkflowTaskService_Complete", sessionId, routeId, [WorkflowTaskCompleteParams]);
        };
        // Return type: SAPB1.WorkflowTask[]
        WorkflowTaskService.GetApprovalTaskList = function (WorkflowApprovalTaskListParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "WorkflowTaskService_GetApprovalTaskList", sessionId, routeId, [WorkflowApprovalTaskListParams]);
        };
        return WorkflowTaskService;
    }());
    SAPB1.WorkflowTaskService = WorkflowTaskService;
    var AssetCapitalizationCreditMemoService = (function () {
        function AssetCapitalizationCreditMemoService() {
        }
        // Return type: void
        AssetCapitalizationCreditMemoService.Cancel = function (AssetDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetCapitalizationCreditMemoService_Cancel", sessionId, routeId, [AssetDocumentParams]);
        };
        // Return type: SAPB1.AssetDocumentParams[]
        AssetCapitalizationCreditMemoService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetCapitalizationCreditMemoService_GetList", sessionId, routeId, [null]);
        };
        return AssetCapitalizationCreditMemoService;
    }());
    SAPB1.AssetCapitalizationCreditMemoService = AssetCapitalizationCreditMemoService;
    var ChangeLogsService = (function () {
        function ChangeLogsService() {
        }
        // Return type: SAPB1.ChangeLogParams[]
        ChangeLogsService.GetChangeLog = function (GetChangeLogParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ChangeLogsService_GetChangeLog", sessionId, routeId, [GetChangeLogParams]);
        };
        // Return type: SAPB1.ChangeLogDifferenceParams[]
        ChangeLogsService.GetChangeLogDifferences = function (ShowDifferenceParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ChangeLogsService_GetChangeLogDifferences", sessionId, routeId, [ShowDifferenceParams]);
        };
        return ChangeLogsService;
    }());
    SAPB1.ChangeLogsService = ChangeLogsService;
    var AssetGroupsService = (function () {
        function AssetGroupsService() {
        }
        // Return type: SAPB1.AssetGroupParams[]
        AssetGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetGroupsService_GetList", sessionId, routeId, [null]);
        };
        return AssetGroupsService;
    }());
    SAPB1.AssetGroupsService = AssetGroupsService;
    var CreditLinesService = (function () {
        function CreditLinesService() {
        }
        // Return type: SAPB1.CreditLine
        CreditLinesService.GetCreditLine = function (CreditLineParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditLinesService_GetCreditLine", sessionId, routeId, [CreditLineParams]);
        };
        // Return type: SAPB1.CreditLineParams[]
        CreditLinesService.GetValidCreditLineList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditLinesService_GetValidCreditLineList", sessionId, routeId, [null]);
        };
        return CreditLinesService;
    }());
    SAPB1.CreditLinesService = CreditLinesService;
    var CampaignResponseTypeService = (function () {
        function CampaignResponseTypeService() {
        }
        // Return type: SAPB1.CampaignResponseTypeParams[]
        CampaignResponseTypeService.GetResponseTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CampaignResponseTypeService_GetResponseTypeList", sessionId, routeId, [null]);
        };
        return CampaignResponseTypeService;
    }());
    SAPB1.CampaignResponseTypeService = CampaignResponseTypeService;
    var BusinessPartnerPropertiesService = (function () {
        function BusinessPartnerPropertiesService() {
        }
        // Return type: SAPB1.BusinessPartnerPropertyParams[]
        BusinessPartnerPropertiesService.GetBusinessPartnerPropertyList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BusinessPartnerPropertiesService_GetBusinessPartnerPropertyList", sessionId, routeId, [null]);
        };
        return BusinessPartnerPropertiesService;
    }());
    SAPB1.BusinessPartnerPropertiesService = BusinessPartnerPropertiesService;
    var BOEPortfoliosService = (function () {
        function BOEPortfoliosService() {
        }
        // Return type: SAPB1.BOEPortfolioParams[]
        BOEPortfoliosService.GetBOEPortfolioList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BOEPortfoliosService_GetBOEPortfolioList", sessionId, routeId, [null]);
        };
        return BOEPortfoliosService;
    }());
    SAPB1.BOEPortfoliosService = BOEPortfoliosService;
    var NCMCodesSetupService = (function () {
        function NCMCodesSetupService() {
        }
        // Return type: SAPB1.NCMCodeSetupParams[]
        NCMCodesSetupService.GetNCMCodeSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "NCMCodesSetupService_GetNCMCodeSetupList", sessionId, routeId, [null]);
        };
        return NCMCodesSetupService;
    }());
    SAPB1.NCMCodesSetupService = NCMCodesSetupService;
    var TransactionCodesService = (function () {
        function TransactionCodesService() {
        }
        // Return type: SAPB1.TransactionCodeParams[]
        TransactionCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TransactionCodesService_GetList", sessionId, routeId, [null]);
        };
        return TransactionCodesService;
    }());
    SAPB1.TransactionCodesService = TransactionCodesService;
    var JournalVouchersService = (function () {
        function JournalVouchersService() {
        }
        // Return type: void
        JournalVouchersService.Add = function (JournalVoucher, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "JournalVouchersService_Add", sessionId, routeId, [JournalVoucher]);
        };
        return JournalVouchersService;
    }());
    SAPB1.JournalVouchersService = JournalVouchersService;
    var AssetTransferService = (function () {
        function AssetTransferService() {
        }
        // Return type: void
        AssetTransferService.Cancel = function (AssetDocumentParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetTransferService_Cancel", sessionId, routeId, [AssetDocumentParams]);
        };
        // Return type: SAPB1.AssetDocumentParams[]
        AssetTransferService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AssetTransferService_GetList", sessionId, routeId, [null]);
        };
        return AssetTransferService;
    }());
    SAPB1.AssetTransferService = AssetTransferService;
    var UnitOfMeasurementsService = (function () {
        function UnitOfMeasurementsService() {
        }
        // Return type: SAPB1.UnitOfMeasurementParams[]
        UnitOfMeasurementsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "UnitOfMeasurementsService_GetList", sessionId, routeId, [null]);
        };
        return UnitOfMeasurementsService;
    }());
    SAPB1.UnitOfMeasurementsService = UnitOfMeasurementsService;
    var ExtendedTranslationsService = (function () {
        function ExtendedTranslationsService() {
        }
        // Return type: SAPB1.ExtendedTranslationParams[]
        ExtendedTranslationsService.GetExtendedTranslationList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ExtendedTranslationsService_GetExtendedTranslationList", sessionId, routeId, [null]);
        };
        return ExtendedTranslationsService;
    }());
    SAPB1.ExtendedTranslationsService = ExtendedTranslationsService;
    var ReportFilterService = (function () {
        function ReportFilterService() {
        }
        // Return type: SAPB1.TaxReportFilterParams[]
        ReportFilterService.GetTaxReportFilterList = function (TaxReportFilterParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ReportFilterService_GetTaxReportFilterList", sessionId, routeId, [TaxReportFilterParams]);
        };
        return ReportFilterService;
    }());
    SAPB1.ReportFilterService = ReportFilterService;
    var PaymentBlocksService = (function () {
        function PaymentBlocksService() {
        }
        // Return type: SAPB1.PaymentBlockParams[]
        PaymentBlocksService.GetPaymentBlockList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentBlocksService_GetPaymentBlockList", sessionId, routeId, [null]);
        };
        return PaymentBlocksService;
    }());
    SAPB1.PaymentBlocksService = PaymentBlocksService;
    var OccurrenceCodesService = (function () {
        function OccurrenceCodesService() {
        }
        // Return type: SAPB1.OccurenceCodeParams[]
        OccurrenceCodesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "OccurrenceCodesService_GetList", sessionId, routeId, [null]);
        };
        return OccurrenceCodesService;
    }());
    SAPB1.OccurrenceCodesService = OccurrenceCodesService;
    var AttributeGroupsService = (function () {
        function AttributeGroupsService() {
        }
        // Return type: SAPB1.AttributeGroupParams[]
        AttributeGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AttributeGroupsService_GetList", sessionId, routeId, [null]);
        };
        return AttributeGroupsService;
    }());
    SAPB1.AttributeGroupsService = AttributeGroupsService;
    var IntrastatConfigurationService = (function () {
        function IntrastatConfigurationService() {
        }
        // Return type: SAPB1.IntrastatConfigurationParams[]
        IntrastatConfigurationService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IntrastatConfigurationService_GetList", sessionId, routeId, [null]);
        };
        return IntrastatConfigurationService;
    }());
    SAPB1.IntrastatConfigurationService = IntrastatConfigurationService;
    var BlanketAgreementsService = (function () {
        function BlanketAgreementsService() {
        }
        // Return type: SAPB1.BlanketAgreementParams[]
        BlanketAgreementsService.GetBlanketAgreementList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BlanketAgreementsService_GetBlanketAgreementList", sessionId, routeId, [null]);
        };
        return BlanketAgreementsService;
    }());
    SAPB1.BlanketAgreementsService = BlanketAgreementsService;
    var CorrectionInvoiceService = (function () {
        function CorrectionInvoiceService() {
        }
        // Return type: SAPB1.Document
        CorrectionInvoiceService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        CorrectionInvoiceService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        CorrectionInvoiceService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return CorrectionInvoiceService;
    }());
    SAPB1.CorrectionInvoiceService = CorrectionInvoiceService;
    var TaxCodeDeterminationsService = (function () {
        function TaxCodeDeterminationsService() {
        }
        // Return type: SAPB1.TaxCodeDeterminationParams[]
        TaxCodeDeterminationsService.GetTaxCodeDeterminationList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxCodeDeterminationsService_GetTaxCodeDeterminationList", sessionId, routeId, [null]);
        };
        return TaxCodeDeterminationsService;
    }());
    SAPB1.TaxCodeDeterminationsService = TaxCodeDeterminationsService;
    var InventoryTransferRequestsService = (function () {
        function InventoryTransferRequestsService() {
        }
        // Return type: SAPB1.StockTransfer
        InventoryTransferRequestsService.GetApprovalTemplates = function (StockTransfer, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryTransferRequestsService_GetApprovalTemplates", sessionId, routeId, [StockTransfer]);
        };
        // Return type: void
        InventoryTransferRequestsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryTransferRequestsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return InventoryTransferRequestsService;
    }());
    SAPB1.InventoryTransferRequestsService = InventoryTransferRequestsService;
    var BankChargesAllocationCodesService = (function () {
        function BankChargesAllocationCodesService() {
        }
        // Return type: SAPB1.BankChargesAllocationCodeParams[]
        BankChargesAllocationCodesService.GetBankChargesAllocationCodeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BankChargesAllocationCodesService_GetBankChargesAllocationCodeList", sessionId, routeId, [null]);
        };
        return BankChargesAllocationCodesService;
    }());
    SAPB1.BankChargesAllocationCodesService = BankChargesAllocationCodesService;
    var QuotationsService = (function () {
        function QuotationsService() {
        }
        // Return type: SAPB1.Document
        QuotationsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "QuotationsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        QuotationsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "QuotationsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        QuotationsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "QuotationsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return QuotationsService;
    }());
    SAPB1.QuotationsService = QuotationsService;
    var ApprovalTemplatesService = (function () {
        function ApprovalTemplatesService() {
        }
        // Return type: SAPB1.ApprovalTemplateParams[]
        ApprovalTemplatesService.GetApprovalTemplateList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ApprovalTemplatesService_GetApprovalTemplateList", sessionId, routeId, [null]);
        };
        return ApprovalTemplatesService;
    }());
    SAPB1.ApprovalTemplatesService = ApprovalTemplatesService;
    var TargetGroupsService = (function () {
        function TargetGroupsService() {
        }
        // Return type: SAPB1.TargetGroupParams[]
        TargetGroupsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TargetGroupsService_GetList", sessionId, routeId, [null]);
        };
        return TargetGroupsService;
    }());
    SAPB1.TargetGroupsService = TargetGroupsService;
    var BOELinesService = (function () {
        function BOELinesService() {
        }
        // Return type: SAPB1.BOELine
        BOELinesService.GetBOELine = function (BOELineParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BOELinesService_GetBOELine", sessionId, routeId, [BOELineParams]);
        };
        return BOELinesService;
    }());
    SAPB1.BOELinesService = BOELinesService;
    var BOEInstructionsService = (function () {
        function BOEInstructionsService() {
        }
        // Return type: SAPB1.BOEInstructionParams[]
        BOEInstructionsService.GetBOEInstructionList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BOEInstructionsService_GetBOEInstructionList", sessionId, routeId, [null]);
        };
        return BOEInstructionsService;
    }());
    SAPB1.BOEInstructionsService = BOEInstructionsService;
    var AccrualTypesService = (function () {
        function AccrualTypesService() {
        }
        // Return type: SAPB1.AccrualTypeParams[]
        AccrualTypesService.GetAccrualTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AccrualTypesService_GetAccrualTypeList", sessionId, routeId, [null]);
        };
        return AccrualTypesService;
    }());
    SAPB1.AccrualTypesService = AccrualTypesService;
    var BOEDocumentTypesService = (function () {
        function BOEDocumentTypesService() {
        }
        // Return type: SAPB1.BOEDocumentTypeParams[]
        BOEDocumentTypesService.GetBOEDocumentTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BOEDocumentTypesService_GetBOEDocumentTypeList", sessionId, routeId, [null]);
        };
        return BOEDocumentTypesService;
    }());
    SAPB1.BOEDocumentTypesService = BOEDocumentTypesService;
    var EmployeeRolesSetupService = (function () {
        function EmployeeRolesSetupService() {
        }
        // Return type: SAPB1.EmployeeRoleSetupParams[]
        EmployeeRolesSetupService.GetEmployeeRoleSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeeRolesSetupService_GetEmployeeRoleSetupList", sessionId, routeId, [null]);
        };
        return EmployeeRolesSetupService;
    }());
    SAPB1.EmployeeRolesSetupService = EmployeeRolesSetupService;
    var StatesService = (function () {
        function StatesService() {
        }
        // Return type: SAPB1.StateParams[]
        StatesService.GetStateList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StatesService_GetStateList", sessionId, routeId, [null]);
        };
        return StatesService;
    }());
    SAPB1.StatesService = StatesService;
    var ActivitiesService = (function () {
        function ActivitiesService() {
        }
        // Return type: SAPB1.ActivityParams[]
        ActivitiesService.GetActivityList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ActivitiesService_GetActivityList", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.Activity
        ActivitiesService.GetSingleInstanceFromSeries = function (ActivityInstanceParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ActivitiesService_GetSingleInstanceFromSeries", sessionId, routeId, [ActivityInstanceParams]);
        };
        // Return type: SAPB1.ActivityParams
        ActivitiesService.UpdateSingleInstanceInSeries = function (Activity, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ActivitiesService_UpdateSingleInstanceInSeries", sessionId, routeId, [Activity]);
        };
        // Return type: void
        ActivitiesService.DeleteSingleInstanceFromSeries = function (ActivityInstanceParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ActivitiesService_DeleteSingleInstanceFromSeries", sessionId, routeId, [ActivityInstanceParams]);
        };
        // Return type: SAPB1.ActivityInstanceParams[]
        ActivitiesService.GetTopNActivityInstances = function (ActivityInstancesListParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ActivitiesService_GetTopNActivityInstances", sessionId, routeId, [ActivityInstancesListParams]);
        };
        return ActivitiesService;
    }());
    SAPB1.ActivitiesService = ActivitiesService;
    var DownPaymentsService = (function () {
        function DownPaymentsService() {
        }
        // Return type: SAPB1.Document
        DownPaymentsService.GetApprovalTemplates = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPaymentsService_GetApprovalTemplates", sessionId, routeId, [Document]);
        };
        // Return type: SAPB1.Document
        DownPaymentsService.Preview = function (Document, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPaymentsService_Preview", sessionId, routeId, [Document]);
        };
        // Return type: void
        DownPaymentsService.HandleApprovalRequest = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPaymentsService_HandleApprovalRequest", sessionId, routeId, [null]);
        };
        return DownPaymentsService;
    }());
    SAPB1.DownPaymentsService = DownPaymentsService;
    var SalesOpportunityInterestsSetupService = (function () {
        function SalesOpportunityInterestsSetupService() {
        }
        // Return type: SAPB1.SalesOpportunityInterestSetupParams[]
        SalesOpportunityInterestsSetupService.GetSalesOpportunityInterestSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SalesOpportunityInterestsSetupService_GetSalesOpportunityInterestSetupList", sessionId, routeId, [null]);
        };
        return SalesOpportunityInterestsSetupService;
    }());
    SAPB1.SalesOpportunityInterestsSetupService = SalesOpportunityInterestsSetupService;
    var ApprovalStagesService = (function () {
        function ApprovalStagesService() {
        }
        // Return type: SAPB1.ApprovalStageParams[]
        ApprovalStagesService.GetApprovalStageList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ApprovalStagesService_GetApprovalStageList", sessionId, routeId, [null]);
        };
        return ApprovalStagesService;
    }());
    SAPB1.ApprovalStagesService = ApprovalStagesService;
    var ServiceCallSolutionStatusService = (function () {
        function ServiceCallSolutionStatusService() {
        }
        // Return type: SAPB1.ServiceCallSolutionStatusParams[]
        ServiceCallSolutionStatusService.GetServiceCallSolutionStatusList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallSolutionStatusService_GetServiceCallSolutionStatusList", sessionId, routeId, [null]);
        };
        return ServiceCallSolutionStatusService;
    }());
    SAPB1.ServiceCallSolutionStatusService = ServiceCallSolutionStatusService;
    var DeductionTaxSubGroupsService = (function () {
        function DeductionTaxSubGroupsService() {
        }
        // Return type: SAPB1.DeductionTaxSubGroupParams[]
        DeductionTaxSubGroupsService.GetDeductionTaxSubGroupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeductionTaxSubGroupsService_GetDeductionTaxSubGroupList", sessionId, routeId, [null]);
        };
        return DeductionTaxSubGroupsService;
    }());
    SAPB1.DeductionTaxSubGroupsService = DeductionTaxSubGroupsService;
    var DashboardPackagesService = (function () {
        function DashboardPackagesService() {
        }
        // Return type: SAPB1.DashboardPackageParams
        DashboardPackagesService.ImportDashboardPackage = function (DashboardPackageImportParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DashboardPackagesService_ImportDashboardPackage", sessionId, routeId, [DashboardPackageImportParams]);
        };
        return DashboardPackagesService;
    }());
    SAPB1.DashboardPackagesService = DashboardPackagesService;
    var PaymentCalculationService = (function () {
        function PaymentCalculationService() {
        }
        // Return type: SAPB1.PaymentAmountParams[]
        PaymentCalculationService.GetPaymentAmount = function (PaymentBPCode, PaymentInvoiceEntries, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentCalculationService_GetPaymentAmount", sessionId, routeId, [PaymentBPCode, PaymentInvoiceEntries]);
        };
        return PaymentCalculationService;
    }());
    SAPB1.PaymentCalculationService = PaymentCalculationService;
    var FixedAssetItemsService = (function () {
        function FixedAssetItemsService() {
        }
        // Return type: SAPB1.FixedAssetValues[]
        FixedAssetItemsService.GetAssetValuesList = function (FixedAssetValuesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FixedAssetItemsService_GetAssetValuesList", sessionId, routeId, [FixedAssetValuesParams]);
        };
        // Return type: SAPB1.FixedAssetEndBalance
        FixedAssetItemsService.GetAssetEndBalance = function (FixedAssetValuesParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FixedAssetItemsService_GetAssetEndBalance", sessionId, routeId, [FixedAssetValuesParams]);
        };
        // Return type: void
        FixedAssetItemsService.UpdateAssetEndBalance = function (FixedAssetValuesParams, FixedAssetEndBalance, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "FixedAssetItemsService_UpdateAssetEndBalance", sessionId, routeId, [FixedAssetValuesParams, FixedAssetEndBalance]);
        };
        return FixedAssetItemsService;
    }());
    SAPB1.FixedAssetItemsService = FixedAssetItemsService;
    var CampaignsService = (function () {
        function CampaignsService() {
        }
        // Return type: SAPB1.CampaignParams[]
        CampaignsService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CampaignsService_GetList", sessionId, routeId, [null]);
        };
        return CampaignsService;
    }());
    SAPB1.CampaignsService = CampaignsService;
    var MessagesService = (function () {
        function MessagesService() {
        }
        // Return type: SAPB1.MessageHeader[]
        MessagesService.GetInbox = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MessagesService_GetInbox", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.MessageHeader[]
        MessagesService.GetOutbox = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MessagesService_GetOutbox", sessionId, routeId, [null]);
        };
        // Return type: SAPB1.MessageHeader[]
        MessagesService.GetSentMessages = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MessagesService_GetSentMessages", sessionId, routeId, [null]);
        };
        return MessagesService;
    }());
    SAPB1.MessagesService = MessagesService;
    var SalesOpportunityCompetitorsSetupService = (function () {
        function SalesOpportunityCompetitorsSetupService() {
        }
        // Return type: SAPB1.SalesOpportunityCompetitorSetupParams[]
        SalesOpportunityCompetitorsSetupService.GetSalesOpportunityCompetitorSetupList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SalesOpportunityCompetitorsSetupService_GetSalesOpportunityCompetitorSetupList", sessionId, routeId, [null]);
        };
        return SalesOpportunityCompetitorsSetupService;
    }());
    SAPB1.SalesOpportunityCompetitorsSetupService = SalesOpportunityCompetitorsSetupService;
    var AlternativeItemsService = (function () {
        function AlternativeItemsService() {
        }
        // Return type: SAPB1.OriginalItemParams
        AlternativeItemsService.AddItem = function (OriginalItem, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlternativeItemsService_AddItem", sessionId, routeId, [OriginalItem]);
        };
        // Return type: void
        AlternativeItemsService.UpdateItem = function (OriginalItem, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlternativeItemsService_UpdateItem", sessionId, routeId, [OriginalItem]);
        };
        // Return type: void
        AlternativeItemsService.DeleteItem = function (OriginalItemParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlternativeItemsService_DeleteItem", sessionId, routeId, [OriginalItemParams]);
        };
        // Return type: SAPB1.OriginalItem
        AlternativeItemsService.GetItem = function (OriginalItemParams, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlternativeItemsService_GetItem", sessionId, routeId, [OriginalItemParams]);
        };
        return AlternativeItemsService;
    }());
    SAPB1.AlternativeItemsService = AlternativeItemsService;
    var ServiceCallProblemSubTypesService = (function () {
        function ServiceCallProblemSubTypesService() {
        }
        // Return type: SAPB1.ServiceCallProblemSubTypeParams[]
        ServiceCallProblemSubTypesService.GetServiceCallProblemSubTypeList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCallProblemSubTypesService_GetServiceCallProblemSubTypeList", sessionId, routeId, [null]);
        };
        return ServiceCallProblemSubTypesService;
    }());
    SAPB1.ServiceCallProblemSubTypesService = ServiceCallProblemSubTypesService;
    var BinLocationAttributesService = (function () {
        function BinLocationAttributesService() {
        }
        // Return type: SAPB1.BinLocationAttributeParams[]
        BinLocationAttributesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BinLocationAttributesService_GetList", sessionId, routeId, [null]);
        };
        return BinLocationAttributesService;
    }());
    SAPB1.BinLocationAttributesService = BinLocationAttributesService;
    var TrackingNotesService = (function () {
        function TrackingNotesService() {
        }
        // Return type: SAPB1.TrackingNoteParams[]
        TrackingNotesService.GetList = function (sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TrackingNotesService_GetList", sessionId, routeId, [null]);
        };
        return TrackingNotesService;
    }());
    SAPB1.TrackingNotesService = TrackingNotesService;
    var ChartOfAccountsEntity = (function () {
        function ChartOfAccountsEntity() {
        }
        ChartOfAccountsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ChartOfAccounts", sessionId, routeId, [obj]);
        };
        ChartOfAccountsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ChartOfAccounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ChartOfAccountsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ChartOfAccounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ChartOfAccountsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ChartOfAccounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return ChartOfAccountsEntity;
    }());
    SAPB1.ChartOfAccountsEntity = ChartOfAccountsEntity;
    var BusinessPartnerGroupsEntity = (function () {
        function BusinessPartnerGroupsEntity() {
        }
        BusinessPartnerGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BusinessPartnerGroups", sessionId, routeId, [obj]);
        };
        BusinessPartnerGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BusinessPartnerGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        BusinessPartnerGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BusinessPartnerGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        BusinessPartnerGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BusinessPartnerGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return BusinessPartnerGroupsEntity;
    }());
    SAPB1.BusinessPartnerGroupsEntity = BusinessPartnerGroupsEntity;
    var SalesOpportunitySourcesSetupEntity = (function () {
        function SalesOpportunitySourcesSetupEntity() {
        }
        SalesOpportunitySourcesSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesOpportunitySourcesSetup", sessionId, routeId, [obj]);
        };
        SalesOpportunitySourcesSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesOpportunitySourcesSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunitySourcesSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesOpportunitySourcesSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunitySourcesSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesOpportunitySourcesSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        return SalesOpportunitySourcesSetupEntity;
    }());
    SAPB1.SalesOpportunitySourcesSetupEntity = SalesOpportunitySourcesSetupEntity;
    var BankStatementsEntity = (function () {
        function BankStatementsEntity() {
        }
        BankStatementsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BankStatements", sessionId, routeId, [obj]);
        };
        BankStatementsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BankStatements(" + obj.InternalNumber + ")", sessionId, routeId, [obj]);
        };
        BankStatementsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BankStatements(" + obj.InternalNumber + ")", sessionId, routeId, [obj]);
        };
        BankStatementsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BankStatements(" + obj.InternalNumber + ")", sessionId, routeId, [obj]);
        };
        return BankStatementsEntity;
    }());
    SAPB1.BankStatementsEntity = BankStatementsEntity;
    var BatchNumberDetailsEntity = (function () {
        function BatchNumberDetailsEntity() {
        }
        BatchNumberDetailsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BatchNumberDetails", sessionId, routeId, [obj]);
        };
        BatchNumberDetailsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BatchNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        BatchNumberDetailsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BatchNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        BatchNumberDetailsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BatchNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return BatchNumberDetailsEntity;
    }());
    SAPB1.BatchNumberDetailsEntity = BatchNumberDetailsEntity;
    var SerialNumberDetailsEntity = (function () {
        function SerialNumberDetailsEntity() {
        }
        SerialNumberDetailsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SerialNumberDetails", sessionId, routeId, [obj]);
        };
        SerialNumberDetailsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SerialNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        SerialNumberDetailsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SerialNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        SerialNumberDetailsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SerialNumberDetails(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return SerialNumberDetailsEntity;
    }());
    SAPB1.SerialNumberDetailsEntity = SerialNumberDetailsEntity;
    var InventoryPostingsEntity = (function () {
        function InventoryPostingsEntity() {
        }
        InventoryPostingsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryPostings", sessionId, routeId, [obj]);
        };
        InventoryPostingsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryPostings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryPostingsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryPostings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryPostingsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryPostings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        return InventoryPostingsEntity;
    }());
    SAPB1.InventoryPostingsEntity = InventoryPostingsEntity;
    var FinancialYearsEntity = (function () {
        function FinancialYearsEntity() {
        }
        FinancialYearsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FinancialYears", sessionId, routeId, [obj]);
        };
        FinancialYearsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FinancialYears(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        FinancialYearsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FinancialYears(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        FinancialYearsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FinancialYears(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return FinancialYearsEntity;
    }());
    SAPB1.FinancialYearsEntity = FinancialYearsEntity;
    var SectionsEntity = (function () {
        function SectionsEntity() {
        }
        SectionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Sections", sessionId, routeId, [obj]);
        };
        SectionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Sections(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        SectionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Sections(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        SectionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Sections(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return SectionsEntity;
    }());
    SAPB1.SectionsEntity = SectionsEntity;
    var CertificateSeriesEntity = (function () {
        function CertificateSeriesEntity() {
        }
        CertificateSeriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CertificateSeries", sessionId, routeId, [obj]);
        };
        CertificateSeriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CertificateSeries(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        CertificateSeriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CertificateSeries(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        CertificateSeriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CertificateSeries(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return CertificateSeriesEntity;
    }());
    SAPB1.CertificateSeriesEntity = CertificateSeriesEntity;
    var NatureOfAssesseesEntity = (function () {
        function NatureOfAssesseesEntity() {
        }
        NatureOfAssesseesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "NatureOfAssessees", sessionId, routeId, [obj]);
        };
        NatureOfAssesseesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "NatureOfAssessees(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        NatureOfAssesseesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "NatureOfAssessees(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        NatureOfAssesseesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "NatureOfAssessees(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return NatureOfAssesseesEntity;
    }());
    SAPB1.NatureOfAssesseesEntity = NatureOfAssesseesEntity;
    var ReportTypesEntity = (function () {
        function ReportTypesEntity() {
        }
        ReportTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ReportTypes", sessionId, routeId, [obj]);
        };
        ReportTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ReportTypes('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        ReportTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ReportTypes('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        ReportTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ReportTypes('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        return ReportTypesEntity;
    }());
    SAPB1.ReportTypesEntity = ReportTypesEntity;
    var UnitOfMeasurementGroupsEntity = (function () {
        function UnitOfMeasurementGroupsEntity() {
        }
        UnitOfMeasurementGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UnitOfMeasurementGroups", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UnitOfMeasurementGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UnitOfMeasurementGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UnitOfMeasurementGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return UnitOfMeasurementGroupsEntity;
    }());
    SAPB1.UnitOfMeasurementGroupsEntity = UnitOfMeasurementGroupsEntity;
    var UnitOfMeasurementsEntity = (function () {
        function UnitOfMeasurementsEntity() {
        }
        UnitOfMeasurementsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UnitOfMeasurements", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UnitOfMeasurements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UnitOfMeasurements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        UnitOfMeasurementsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UnitOfMeasurements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return UnitOfMeasurementsEntity;
    }());
    SAPB1.UnitOfMeasurementsEntity = UnitOfMeasurementsEntity;
    var BinLocationFieldsEntity = (function () {
        function BinLocationFieldsEntity() {
        }
        BinLocationFieldsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BinLocationFields", sessionId, routeId, [obj]);
        };
        BinLocationFieldsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BinLocationFields(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationFieldsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BinLocationFields(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationFieldsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BinLocationFields(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return BinLocationFieldsEntity;
    }());
    SAPB1.BinLocationFieldsEntity = BinLocationFieldsEntity;
    var BinLocationAttributesEntity = (function () {
        function BinLocationAttributesEntity() {
        }
        BinLocationAttributesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BinLocationAttributes", sessionId, routeId, [obj]);
        };
        BinLocationAttributesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BinLocationAttributes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationAttributesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BinLocationAttributes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationAttributesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BinLocationAttributes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return BinLocationAttributesEntity;
    }());
    SAPB1.BinLocationAttributesEntity = BinLocationAttributesEntity;
    var WarehouseSublevelCodesEntity = (function () {
        function WarehouseSublevelCodesEntity() {
        }
        WarehouseSublevelCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WarehouseSublevelCodes", sessionId, routeId, [obj]);
        };
        WarehouseSublevelCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WarehouseSublevelCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        WarehouseSublevelCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WarehouseSublevelCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        WarehouseSublevelCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WarehouseSublevelCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return WarehouseSublevelCodesEntity;
    }());
    SAPB1.WarehouseSublevelCodesEntity = WarehouseSublevelCodesEntity;
    var BinLocationsEntity = (function () {
        function BinLocationsEntity() {
        }
        BinLocationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BinLocations", sessionId, routeId, [obj]);
        };
        BinLocationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BinLocations(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BinLocations(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BinLocationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BinLocations(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return BinLocationsEntity;
    }());
    SAPB1.BinLocationsEntity = BinLocationsEntity;
    var ActivitiesEntity = (function () {
        function ActivitiesEntity() {
        }
        ActivitiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Activities", sessionId, routeId, [obj]);
        };
        ActivitiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Activities(" + obj.ActivityCode + ")", sessionId, routeId, [obj]);
        };
        ActivitiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Activities(" + obj.ActivityCode + ")", sessionId, routeId, [obj]);
        };
        ActivitiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Activities(" + obj.ActivityCode + ")", sessionId, routeId, [obj]);
        };
        return ActivitiesEntity;
    }());
    SAPB1.ActivitiesEntity = ActivitiesEntity;
    var SalesStagesEntity = (function () {
        function SalesStagesEntity() {
        }
        SalesStagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesStages", sessionId, routeId, [obj]);
        };
        SalesStagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesStages(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesStagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesStages(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesStagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesStages(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        return SalesStagesEntity;
    }());
    SAPB1.SalesStagesEntity = SalesStagesEntity;
    var SalesOpportunityReasonsSetupEntity = (function () {
        function SalesOpportunityReasonsSetupEntity() {
        }
        SalesOpportunityReasonsSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesOpportunityReasonsSetup", sessionId, routeId, [obj]);
        };
        SalesOpportunityReasonsSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesOpportunityReasonsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityReasonsSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesOpportunityReasonsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityReasonsSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesOpportunityReasonsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        return SalesOpportunityReasonsSetupEntity;
    }());
    SAPB1.SalesOpportunityReasonsSetupEntity = SalesOpportunityReasonsSetupEntity;
    var ActivityTypesEntity = (function () {
        function ActivityTypesEntity() {
        }
        ActivityTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ActivityTypes", sessionId, routeId, [obj]);
        };
        ActivityTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ActivityTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ActivityTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ActivityTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ActivityTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ActivityTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ActivityTypesEntity;
    }());
    SAPB1.ActivityTypesEntity = ActivityTypesEntity;
    var ActivityLocationsEntity = (function () {
        function ActivityLocationsEntity() {
        }
        ActivityLocationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ActivityLocations", sessionId, routeId, [obj]);
        };
        ActivityLocationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ActivityLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ActivityLocationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ActivityLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ActivityLocationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ActivityLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ActivityLocationsEntity;
    }());
    SAPB1.ActivityLocationsEntity = ActivityLocationsEntity;
    var PartnersSetupsEntity = (function () {
        function PartnersSetupsEntity() {
        }
        PartnersSetupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PartnersSetups", sessionId, routeId, [obj]);
        };
        PartnersSetupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PartnersSetups(" + obj.PartnerID + ")", sessionId, routeId, [obj]);
        };
        PartnersSetupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PartnersSetups(" + obj.PartnerID + ")", sessionId, routeId, [obj]);
        };
        PartnersSetupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PartnersSetups(" + obj.PartnerID + ")", sessionId, routeId, [obj]);
        };
        return PartnersSetupsEntity;
    }());
    SAPB1.PartnersSetupsEntity = PartnersSetupsEntity;
    var SalesOpportunityCompetitorsSetupEntity = (function () {
        function SalesOpportunityCompetitorsSetupEntity() {
        }
        SalesOpportunityCompetitorsSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesOpportunityCompetitorsSetup", sessionId, routeId, [obj]);
        };
        SalesOpportunityCompetitorsSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesOpportunityCompetitorsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityCompetitorsSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesOpportunityCompetitorsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityCompetitorsSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesOpportunityCompetitorsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        return SalesOpportunityCompetitorsSetupEntity;
    }());
    SAPB1.SalesOpportunityCompetitorsSetupEntity = SalesOpportunityCompetitorsSetupEntity;
    var DraftsEntity = (function () {
        function DraftsEntity() {
        }
        DraftsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Drafts", sessionId, routeId, [obj]);
        };
        DraftsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Drafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DraftsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Drafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DraftsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Drafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DraftsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Drafts(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        DraftsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Drafts(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        DraftsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Drafts(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        DraftsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Drafts(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        DraftsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Drafts(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return DraftsEntity;
    }());
    SAPB1.DraftsEntity = DraftsEntity;
    var DeductionTaxHierarchiesEntity = (function () {
        function DeductionTaxHierarchiesEntity() {
        }
        DeductionTaxHierarchiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DeductionTaxHierarchies", sessionId, routeId, [obj]);
        };
        DeductionTaxHierarchiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DeductionTaxHierarchies(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DeductionTaxHierarchiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DeductionTaxHierarchies(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DeductionTaxHierarchiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DeductionTaxHierarchies(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return DeductionTaxHierarchiesEntity;
    }());
    SAPB1.DeductionTaxHierarchiesEntity = DeductionTaxHierarchiesEntity;
    var TaxWebSitesEntity = (function () {
        function TaxWebSitesEntity() {
        }
        TaxWebSitesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TaxWebSites", sessionId, routeId, [obj]);
        };
        TaxWebSitesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TaxWebSites(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        TaxWebSitesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TaxWebSites(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        TaxWebSitesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TaxWebSites(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        TaxWebSitesEntity.SetAsDefault = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxWebSites(" + obj.AbsEntry + ")/SetAsDefault", sessionId, routeId, [obj]);
        };
        return TaxWebSitesEntity;
    }());
    SAPB1.TaxWebSitesEntity = TaxWebSitesEntity;
    var DeductionTaxGroupsEntity = (function () {
        function DeductionTaxGroupsEntity() {
        }
        DeductionTaxGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DeductionTaxGroups", sessionId, routeId, [obj]);
        };
        DeductionTaxGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DeductionTaxGroups(" + obj.GroupKey + ")", sessionId, routeId, [obj]);
        };
        DeductionTaxGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DeductionTaxGroups(" + obj.GroupKey + ")", sessionId, routeId, [obj]);
        };
        DeductionTaxGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DeductionTaxGroups(" + obj.GroupKey + ")", sessionId, routeId, [obj]);
        };
        return DeductionTaxGroupsEntity;
    }());
    SAPB1.DeductionTaxGroupsEntity = DeductionTaxGroupsEntity;
    var StockTransferDraftsEntity = (function () {
        function StockTransferDraftsEntity() {
        }
        StockTransferDraftsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "StockTransferDrafts", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "StockTransferDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "StockTransferDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "StockTransferDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferDrafts(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferDrafts(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        StockTransferDraftsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransferDrafts(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        return StockTransferDraftsEntity;
    }());
    SAPB1.StockTransferDraftsEntity = StockTransferDraftsEntity;
    var BranchesEntity = (function () {
        function BranchesEntity() {
        }
        BranchesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Branches", sessionId, routeId, [obj]);
        };
        BranchesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Branches(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        BranchesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Branches(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        BranchesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Branches(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return BranchesEntity;
    }());
    SAPB1.BranchesEntity = BranchesEntity;
    var DepartmentsEntity = (function () {
        function DepartmentsEntity() {
        }
        DepartmentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Departments", sessionId, routeId, [obj]);
        };
        DepartmentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Departments(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        DepartmentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Departments(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        DepartmentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Departments(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return DepartmentsEntity;
    }());
    SAPB1.DepartmentsEntity = DepartmentsEntity;
    var UsersEntity = (function () {
        function UsersEntity() {
        }
        UsersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Users", sessionId, routeId, [obj]);
        };
        UsersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Users(" + obj.InternalKey + ")", sessionId, routeId, [obj]);
        };
        UsersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Users(" + obj.InternalKey + ")", sessionId, routeId, [obj]);
        };
        UsersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Users(" + obj.InternalKey + ")", sessionId, routeId, [obj]);
        };
        UsersEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Users(" + obj.InternalKey + ")/Close", sessionId, routeId, [obj]);
        };
        return UsersEntity;
    }());
    SAPB1.UsersEntity = UsersEntity;
    var ApprovalStagesEntity = (function () {
        function ApprovalStagesEntity() {
        }
        ApprovalStagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ApprovalStages", sessionId, routeId, [obj]);
        };
        ApprovalStagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ApprovalStages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalStagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ApprovalStages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalStagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ApprovalStages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ApprovalStagesEntity;
    }());
    SAPB1.ApprovalStagesEntity = ApprovalStagesEntity;
    var ApprovalTemplatesEntity = (function () {
        function ApprovalTemplatesEntity() {
        }
        ApprovalTemplatesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ApprovalTemplates", sessionId, routeId, [obj]);
        };
        ApprovalTemplatesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ApprovalTemplates(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalTemplatesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ApprovalTemplates(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalTemplatesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ApprovalTemplates(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ApprovalTemplatesEntity;
    }());
    SAPB1.ApprovalTemplatesEntity = ApprovalTemplatesEntity;
    var CockpitsEntity = (function () {
        function CockpitsEntity() {
        }
        CockpitsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Cockpits", sessionId, routeId, [obj]);
        };
        CockpitsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Cockpits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        CockpitsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Cockpits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        CockpitsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Cockpits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return CockpitsEntity;
    }());
    SAPB1.CockpitsEntity = CockpitsEntity;
    var ApprovalRequestsEntity = (function () {
        function ApprovalRequestsEntity() {
        }
        ApprovalRequestsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ApprovalRequests", sessionId, routeId, [obj]);
        };
        ApprovalRequestsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ApprovalRequests(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalRequestsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ApprovalRequests(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ApprovalRequestsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ApprovalRequests(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ApprovalRequestsEntity;
    }());
    SAPB1.ApprovalRequestsEntity = ApprovalRequestsEntity;
    var AdditionalExpensesEntity = (function () {
        function AdditionalExpensesEntity() {
        }
        AdditionalExpensesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AdditionalExpenses", sessionId, routeId, [obj]);
        };
        AdditionalExpensesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AdditionalExpenses(" + obj.ExpensCode + ")", sessionId, routeId, [obj]);
        };
        AdditionalExpensesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AdditionalExpenses(" + obj.ExpensCode + ")", sessionId, routeId, [obj]);
        };
        AdditionalExpensesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AdditionalExpenses(" + obj.ExpensCode + ")", sessionId, routeId, [obj]);
        };
        return AdditionalExpensesEntity;
    }());
    SAPB1.AdditionalExpensesEntity = AdditionalExpensesEntity;
    var InventoryTransferRequestsEntity = (function () {
        function InventoryTransferRequestsEntity() {
        }
        InventoryTransferRequestsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryTransferRequests", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryTransferRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryTransferRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryTransferRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryTransferRequests(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryTransferRequests(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        InventoryTransferRequestsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryTransferRequests(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        return InventoryTransferRequestsEntity;
    }());
    SAPB1.InventoryTransferRequestsEntity = InventoryTransferRequestsEntity;
    var BlanketAgreementsEntity = (function () {
        function BlanketAgreementsEntity() {
        }
        BlanketAgreementsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BlanketAgreements", sessionId, routeId, [obj]);
        };
        BlanketAgreementsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BlanketAgreements(" + obj.AgreementNo + ")", sessionId, routeId, [obj]);
        };
        BlanketAgreementsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BlanketAgreements(" + obj.AgreementNo + ")", sessionId, routeId, [obj]);
        };
        BlanketAgreementsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BlanketAgreements(" + obj.AgreementNo + ")", sessionId, routeId, [obj]);
        };
        BlanketAgreementsEntity.CancelBlanketAgreement = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BlanketAgreements(" + obj.AgreementNo + ")/CancelBlanketAgreement", sessionId, routeId, [obj]);
        };
        BlanketAgreementsEntity.GetRelatedDocuments = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BlanketAgreements(" + obj.AgreementNo + ")/GetRelatedDocuments", sessionId, routeId, [obj]);
        };
        return BlanketAgreementsEntity;
    }());
    SAPB1.BlanketAgreementsEntity = BlanketAgreementsEntity;
    var SalesTaxAuthoritiesEntity = (function () {
        function SalesTaxAuthoritiesEntity() {
        }
        SalesTaxAuthoritiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesTaxAuthorities", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesTaxAuthorities(" + obj.Type + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesTaxAuthorities(" + obj.Type + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesTaxAuthorities(" + obj.Type + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return SalesTaxAuthoritiesEntity;
    }());
    SAPB1.SalesTaxAuthoritiesEntity = SalesTaxAuthoritiesEntity;
    var SalesTaxAuthoritiesTypesEntity = (function () {
        function SalesTaxAuthoritiesTypesEntity() {
        }
        SalesTaxAuthoritiesTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesTaxAuthoritiesTypes", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesTaxAuthoritiesTypes(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesTaxAuthoritiesTypes(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        SalesTaxAuthoritiesTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesTaxAuthoritiesTypes(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return SalesTaxAuthoritiesTypesEntity;
    }());
    SAPB1.SalesTaxAuthoritiesTypesEntity = SalesTaxAuthoritiesTypesEntity;
    var SalesTaxCodesEntity = (function () {
        function SalesTaxCodesEntity() {
        }
        SalesTaxCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesTaxCodes", sessionId, routeId, [obj]);
        };
        SalesTaxCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesTaxCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        SalesTaxCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesTaxCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        SalesTaxCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesTaxCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return SalesTaxCodesEntity;
    }());
    SAPB1.SalesTaxCodesEntity = SalesTaxCodesEntity;
    var CountriesEntity = (function () {
        function CountriesEntity() {
        }
        CountriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Countries", sessionId, routeId, [obj]);
        };
        CountriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Countries('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CountriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Countries('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CountriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Countries('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return CountriesEntity;
    }());
    SAPB1.CountriesEntity = CountriesEntity;
    var InvoicesEntity = (function () {
        function InvoicesEntity() {
        }
        InvoicesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Invoices", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Invoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Invoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Invoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Invoices(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Invoices(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        InvoicesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Invoices(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        InvoicesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Invoices(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        InvoicesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Invoices(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return InvoicesEntity;
    }());
    SAPB1.InvoicesEntity = InvoicesEntity;
    var StatesEntity = (function () {
        function StatesEntity() {
        }
        StatesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "States", sessionId, routeId, [obj]);
        };
        StatesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "States('" + obj.Code + "', '" + obj.Country + "')", sessionId, routeId, [obj]);
        };
        StatesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "States('" + obj.Code + "', '" + obj.Country + "')", sessionId, routeId, [obj]);
        };
        StatesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "States('" + obj.Code + "', '" + obj.Country + "')", sessionId, routeId, [obj]);
        };
        return StatesEntity;
    }());
    SAPB1.StatesEntity = StatesEntity;
    var KPIsEntity = (function () {
        function KPIsEntity() {
        }
        KPIsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "KPIs", sessionId, routeId, [obj]);
        };
        KPIsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "KPIs('" + obj.KPICode + "')", sessionId, routeId, [obj]);
        };
        KPIsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "KPIs('" + obj.KPICode + "')", sessionId, routeId, [obj]);
        };
        KPIsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "KPIs('" + obj.KPICode + "')", sessionId, routeId, [obj]);
        };
        return KPIsEntity;
    }());
    SAPB1.KPIsEntity = KPIsEntity;
    var TargetGroupsEntity = (function () {
        function TargetGroupsEntity() {
        }
        TargetGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TargetGroups", sessionId, routeId, [obj]);
        };
        TargetGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TargetGroups('" + obj.TargetGroupCode + "')", sessionId, routeId, [obj]);
        };
        TargetGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TargetGroups('" + obj.TargetGroupCode + "')", sessionId, routeId, [obj]);
        };
        TargetGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TargetGroups('" + obj.TargetGroupCode + "')", sessionId, routeId, [obj]);
        };
        return TargetGroupsEntity;
    }());
    SAPB1.TargetGroupsEntity = TargetGroupsEntity;
    var ExtendedTranslationsEntity = (function () {
        function ExtendedTranslationsEntity() {
        }
        ExtendedTranslationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ExtendedTranslations", sessionId, routeId, [obj]);
        };
        ExtendedTranslationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ExtendedTranslations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        ExtendedTranslationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ExtendedTranslations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        ExtendedTranslationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ExtendedTranslations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return ExtendedTranslationsEntity;
    }());
    SAPB1.ExtendedTranslationsEntity = ExtendedTranslationsEntity;
    var CampaignsEntity = (function () {
        function CampaignsEntity() {
        }
        CampaignsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Campaigns", sessionId, routeId, [obj]);
        };
        CampaignsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Campaigns(" + obj.CampaignNumber + ")", sessionId, routeId, [obj]);
        };
        CampaignsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Campaigns(" + obj.CampaignNumber + ")", sessionId, routeId, [obj]);
        };
        CampaignsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Campaigns(" + obj.CampaignNumber + ")", sessionId, routeId, [obj]);
        };
        CampaignsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Campaigns(" + obj.CampaignNumber + ")/Cancel", sessionId, routeId, [obj]);
        };
        return CampaignsEntity;
    }());
    SAPB1.CampaignsEntity = CampaignsEntity;
    var RetornoCodesEntity = (function () {
        function RetornoCodesEntity() {
        }
        RetornoCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "RetornoCodes", sessionId, routeId, [obj]);
        };
        RetornoCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "RetornoCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        RetornoCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "RetornoCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        RetornoCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "RetornoCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return RetornoCodesEntity;
    }());
    SAPB1.RetornoCodesEntity = RetornoCodesEntity;
    var OccurrenceCodesEntity = (function () {
        function OccurrenceCodesEntity() {
        }
        OccurrenceCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "OccurrenceCodes", sessionId, routeId, [obj]);
        };
        OccurrenceCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "OccurrenceCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        OccurrenceCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "OccurrenceCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        OccurrenceCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "OccurrenceCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return OccurrenceCodesEntity;
    }());
    SAPB1.OccurrenceCodesEntity = OccurrenceCodesEntity;
    var CashDiscountsEntity = (function () {
        function CashDiscountsEntity() {
        }
        CashDiscountsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CashDiscounts", sessionId, routeId, [obj]);
        };
        CashDiscountsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CashDiscounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CashDiscountsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CashDiscounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CashDiscountsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CashDiscounts('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return CashDiscountsEntity;
    }());
    SAPB1.CashDiscountsEntity = CashDiscountsEntity;
    var QueryCategoriesEntity = (function () {
        function QueryCategoriesEntity() {
        }
        QueryCategoriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "QueryCategories", sessionId, routeId, [obj]);
        };
        QueryCategoriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "QueryCategories(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        QueryCategoriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "QueryCategories(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        QueryCategoriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "QueryCategories(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return QueryCategoriesEntity;
    }());
    SAPB1.QueryCategoriesEntity = QueryCategoriesEntity;
    var ResourceCapacitiesEntity = (function () {
        function ResourceCapacitiesEntity() {
        }
        ResourceCapacitiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ResourceCapacities", sessionId, routeId, [obj]);
        };
        ResourceCapacitiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ResourceCapacities(" + obj.Id + ")", sessionId, routeId, [obj]);
        };
        ResourceCapacitiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ResourceCapacities(" + obj.Id + ")", sessionId, routeId, [obj]);
        };
        ResourceCapacitiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ResourceCapacities(" + obj.Id + ")", sessionId, routeId, [obj]);
        };
        return ResourceCapacitiesEntity;
    }());
    SAPB1.ResourceCapacitiesEntity = ResourceCapacitiesEntity;
    var FactoringIndicatorsEntity = (function () {
        function FactoringIndicatorsEntity() {
        }
        FactoringIndicatorsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FactoringIndicators", sessionId, routeId, [obj]);
        };
        FactoringIndicatorsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FactoringIndicators('" + obj.IndicatorCode + "')", sessionId, routeId, [obj]);
        };
        FactoringIndicatorsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FactoringIndicators('" + obj.IndicatorCode + "')", sessionId, routeId, [obj]);
        };
        FactoringIndicatorsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FactoringIndicators('" + obj.IndicatorCode + "')", sessionId, routeId, [obj]);
        };
        return FactoringIndicatorsEntity;
    }());
    SAPB1.FactoringIndicatorsEntity = FactoringIndicatorsEntity;
    var CreditNotesEntity = (function () {
        function CreditNotesEntity() {
        }
        CreditNotesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CreditNotes", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotes(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotes(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotes(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotes(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        CreditNotesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CreditNotes(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return CreditNotesEntity;
    }());
    SAPB1.CreditNotesEntity = CreditNotesEntity;
    var PaymentDraftsEntity = (function () {
        function PaymentDraftsEntity() {
        }
        PaymentDraftsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PaymentDrafts", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PaymentDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PaymentDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PaymentDrafts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentDrafts(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentDrafts(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.GetApprovalTemplates = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentDrafts(" + obj.DocEntry + ")/GetApprovalTemplates", sessionId, routeId, [obj]);
        };
        PaymentDraftsEntity.CancelbyCurrentSystemDate = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PaymentDrafts(" + obj.DocEntry + ")/CancelbyCurrentSystemDate", sessionId, routeId, [obj]);
        };
        return PaymentDraftsEntity;
    }());
    SAPB1.PaymentDraftsEntity = PaymentDraftsEntity;
    var DNFCodeSetupEntity = (function () {
        function DNFCodeSetupEntity() {
        }
        DNFCodeSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DNFCodeSetup", sessionId, routeId, [obj]);
        };
        DNFCodeSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DNFCodeSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DNFCodeSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DNFCodeSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DNFCodeSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DNFCodeSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return DNFCodeSetupEntity;
    }());
    SAPB1.DNFCodeSetupEntity = DNFCodeSetupEntity;
    var AccountSegmentationsEntity = (function () {
        function AccountSegmentationsEntity() {
        }
        AccountSegmentationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AccountSegmentations", sessionId, routeId, [obj]);
        };
        AccountSegmentationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AccountSegmentations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        AccountSegmentationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AccountSegmentations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        AccountSegmentationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AccountSegmentations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return AccountSegmentationsEntity;
    }());
    SAPB1.AccountSegmentationsEntity = AccountSegmentationsEntity;
    var AccountSegmentationCategoriesEntity = (function () {
        function AccountSegmentationCategoriesEntity() {
        }
        AccountSegmentationCategoriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AccountSegmentationCategories", sessionId, routeId, [obj]);
        };
        AccountSegmentationCategoriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AccountSegmentationCategories(" + obj.SegmentID + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AccountSegmentationCategoriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AccountSegmentationCategories(" + obj.SegmentID + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AccountSegmentationCategoriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AccountSegmentationCategories(" + obj.SegmentID + ", '" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return AccountSegmentationCategoriesEntity;
    }());
    SAPB1.AccountSegmentationCategoriesEntity = AccountSegmentationCategoriesEntity;
    var WarehouseLocationsEntity = (function () {
        function WarehouseLocationsEntity() {
        }
        WarehouseLocationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WarehouseLocations", sessionId, routeId, [obj]);
        };
        WarehouseLocationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WarehouseLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        WarehouseLocationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WarehouseLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        WarehouseLocationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WarehouseLocations(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return WarehouseLocationsEntity;
    }());
    SAPB1.WarehouseLocationsEntity = WarehouseLocationsEntity;
    var Forms1099Entity = (function () {
        function Forms1099Entity() {
        }
        Forms1099Entity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Forms1099", sessionId, routeId, [obj]);
        };
        Forms1099Entity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Forms1099(" + obj.FormCode + ")", sessionId, routeId, [obj]);
        };
        Forms1099Entity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Forms1099(" + obj.FormCode + ")", sessionId, routeId, [obj]);
        };
        Forms1099Entity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Forms1099(" + obj.FormCode + ")", sessionId, routeId, [obj]);
        };
        return Forms1099Entity;
    }());
    SAPB1.Forms1099Entity = Forms1099Entity;
    var InventoryCyclesEntity = (function () {
        function InventoryCyclesEntity() {
        }
        InventoryCyclesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryCycles", sessionId, routeId, [obj]);
        };
        InventoryCyclesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryCycles(" + obj.CycleCode + ")", sessionId, routeId, [obj]);
        };
        InventoryCyclesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryCycles(" + obj.CycleCode + ")", sessionId, routeId, [obj]);
        };
        InventoryCyclesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryCycles(" + obj.CycleCode + ")", sessionId, routeId, [obj]);
        };
        return InventoryCyclesEntity;
    }());
    SAPB1.InventoryCyclesEntity = InventoryCyclesEntity;
    var WizardPaymentMethodsEntity = (function () {
        function WizardPaymentMethodsEntity() {
        }
        WizardPaymentMethodsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WizardPaymentMethods", sessionId, routeId, [obj]);
        };
        WizardPaymentMethodsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WizardPaymentMethods('" + obj.PaymentMethodCode + "')", sessionId, routeId, [obj]);
        };
        WizardPaymentMethodsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WizardPaymentMethods('" + obj.PaymentMethodCode + "')", sessionId, routeId, [obj]);
        };
        WizardPaymentMethodsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WizardPaymentMethods('" + obj.PaymentMethodCode + "')", sessionId, routeId, [obj]);
        };
        return WizardPaymentMethodsEntity;
    }());
    SAPB1.WizardPaymentMethodsEntity = WizardPaymentMethodsEntity;
    var DepreciationTypesEntity = (function () {
        function DepreciationTypesEntity() {
        }
        DepreciationTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DepreciationTypes", sessionId, routeId, [obj]);
        };
        DepreciationTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DepreciationTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DepreciationTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DepreciationTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return DepreciationTypesEntity;
    }());
    SAPB1.DepreciationTypesEntity = DepreciationTypesEntity;
    var FAAccountDeterminationsEntity = (function () {
        function FAAccountDeterminationsEntity() {
        }
        FAAccountDeterminationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FAAccountDeterminations", sessionId, routeId, [obj]);
        };
        FAAccountDeterminationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FAAccountDeterminations('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        FAAccountDeterminationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FAAccountDeterminations('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        FAAccountDeterminationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FAAccountDeterminations('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return FAAccountDeterminationsEntity;
    }());
    SAPB1.FAAccountDeterminationsEntity = FAAccountDeterminationsEntity;
    var DepreciationAreasEntity = (function () {
        function DepreciationAreasEntity() {
        }
        DepreciationAreasEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DepreciationAreas", sessionId, routeId, [obj]);
        };
        DepreciationAreasEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DepreciationAreas('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationAreasEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DepreciationAreas('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationAreasEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DepreciationAreas('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return DepreciationAreasEntity;
    }());
    SAPB1.DepreciationAreasEntity = DepreciationAreasEntity;
    var DepreciationTypePoolsEntity = (function () {
        function DepreciationTypePoolsEntity() {
        }
        DepreciationTypePoolsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DepreciationTypePools", sessionId, routeId, [obj]);
        };
        DepreciationTypePoolsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DepreciationTypePools('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationTypePoolsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DepreciationTypePools('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DepreciationTypePoolsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DepreciationTypePools('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return DepreciationTypePoolsEntity;
    }());
    SAPB1.DepreciationTypePoolsEntity = DepreciationTypePoolsEntity;
    var AssetClassesEntity = (function () {
        function AssetClassesEntity() {
        }
        AssetClassesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetClasses", sessionId, routeId, [obj]);
        };
        AssetClassesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetClasses('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetClassesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetClasses('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetClassesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetClasses('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return AssetClassesEntity;
    }());
    SAPB1.AssetClassesEntity = AssetClassesEntity;
    var IntrastatConfigurationEntity = (function () {
        function IntrastatConfigurationEntity() {
        }
        IntrastatConfigurationEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "IntrastatConfiguration", sessionId, routeId, [obj]);
        };
        IntrastatConfigurationEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "IntrastatConfiguration(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        IntrastatConfigurationEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "IntrastatConfiguration(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        IntrastatConfigurationEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "IntrastatConfiguration(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return IntrastatConfigurationEntity;
    }());
    SAPB1.IntrastatConfigurationEntity = IntrastatConfigurationEntity;
    var AssetGroupsEntity = (function () {
        function AssetGroupsEntity() {
        }
        AssetGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetGroups", sessionId, routeId, [obj]);
        };
        AssetGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return AssetGroupsEntity;
    }());
    SAPB1.AssetGroupsEntity = AssetGroupsEntity;
    var DeterminationCriteriasEntity = (function () {
        function DeterminationCriteriasEntity() {
        }
        DeterminationCriteriasEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DeterminationCriterias", sessionId, routeId, [obj]);
        };
        DeterminationCriteriasEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DeterminationCriterias(" + obj.DmcId + ")", sessionId, routeId, [obj]);
        };
        DeterminationCriteriasEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DeterminationCriterias(" + obj.DmcId + ")", sessionId, routeId, [obj]);
        };
        DeterminationCriteriasEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DeterminationCriterias(" + obj.DmcId + ")", sessionId, routeId, [obj]);
        };
        return DeterminationCriteriasEntity;
    }());
    SAPB1.DeterminationCriteriasEntity = DeterminationCriteriasEntity;
    var AssetCapitalizationEntity = (function () {
        function AssetCapitalizationEntity() {
        }
        AssetCapitalizationEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetCapitalization", sessionId, routeId, [obj]);
        };
        AssetCapitalizationEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetCapitalization(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetCapitalizationEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetCapitalization(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetCapitalizationEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetCapitalization(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return AssetCapitalizationEntity;
    }());
    SAPB1.AssetCapitalizationEntity = AssetCapitalizationEntity;
    var GLAccountAdvancedRulesEntity = (function () {
        function GLAccountAdvancedRulesEntity() {
        }
        GLAccountAdvancedRulesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "GLAccountAdvancedRules", sessionId, routeId, [obj]);
        };
        GLAccountAdvancedRulesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "GLAccountAdvancedRules(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        GLAccountAdvancedRulesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "GLAccountAdvancedRules(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        GLAccountAdvancedRulesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "GLAccountAdvancedRules(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        return GLAccountAdvancedRulesEntity;
    }());
    SAPB1.GLAccountAdvancedRulesEntity = GLAccountAdvancedRulesEntity;
    var AssetCapitalizationCreditMemoEntity = (function () {
        function AssetCapitalizationCreditMemoEntity() {
        }
        AssetCapitalizationCreditMemoEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetCapitalizationCreditMemo", sessionId, routeId, [obj]);
        };
        AssetCapitalizationCreditMemoEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetCapitalizationCreditMemo(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetCapitalizationCreditMemoEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetCapitalizationCreditMemo(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetCapitalizationCreditMemoEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetCapitalizationCreditMemo(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return AssetCapitalizationCreditMemoEntity;
    }());
    SAPB1.AssetCapitalizationCreditMemoEntity = AssetCapitalizationCreditMemoEntity;
    var BarCodesEntity = (function () {
        function BarCodesEntity() {
        }
        BarCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BarCodes", sessionId, routeId, [obj]);
        };
        BarCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BarCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BarCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BarCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        BarCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BarCodes(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return BarCodesEntity;
    }());
    SAPB1.BarCodesEntity = BarCodesEntity;
    var InventoryCountingsEntity = (function () {
        function InventoryCountingsEntity() {
        }
        InventoryCountingsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryCountings", sessionId, routeId, [obj]);
        };
        InventoryCountingsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryCountings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryCountingsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryCountings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryCountingsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryCountings(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryCountingsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryCountings(" + obj.DocumentEntry + ")/Close", sessionId, routeId, [obj]);
        };
        return InventoryCountingsEntity;
    }());
    SAPB1.InventoryCountingsEntity = InventoryCountingsEntity;
    var AssetManualDepreciationEntity = (function () {
        function AssetManualDepreciationEntity() {
        }
        AssetManualDepreciationEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetManualDepreciation", sessionId, routeId, [obj]);
        };
        AssetManualDepreciationEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetManualDepreciation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetManualDepreciationEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetManualDepreciation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetManualDepreciationEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetManualDepreciation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return AssetManualDepreciationEntity;
    }());
    SAPB1.AssetManualDepreciationEntity = AssetManualDepreciationEntity;
    var EnhancedDiscountGroupsEntity = (function () {
        function EnhancedDiscountGroupsEntity() {
        }
        EnhancedDiscountGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EnhancedDiscountGroups", sessionId, routeId, [obj]);
        };
        EnhancedDiscountGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EnhancedDiscountGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        EnhancedDiscountGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EnhancedDiscountGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        EnhancedDiscountGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EnhancedDiscountGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return EnhancedDiscountGroupsEntity;
    }());
    SAPB1.EnhancedDiscountGroupsEntity = EnhancedDiscountGroupsEntity;
    var AssetTransferEntity = (function () {
        function AssetTransferEntity() {
        }
        AssetTransferEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetTransfer", sessionId, routeId, [obj]);
        };
        AssetTransferEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetTransfer(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetTransferEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetTransfer(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetTransferEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetTransfer(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return AssetTransferEntity;
    }());
    SAPB1.AssetTransferEntity = AssetTransferEntity;
    var CycleCountDeterminationsEntity = (function () {
        function CycleCountDeterminationsEntity() {
        }
        CycleCountDeterminationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CycleCountDeterminations", sessionId, routeId, [obj]);
        };
        CycleCountDeterminationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CycleCountDeterminations('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        CycleCountDeterminationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CycleCountDeterminations('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        CycleCountDeterminationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CycleCountDeterminations('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        return CycleCountDeterminationsEntity;
    }());
    SAPB1.CycleCountDeterminationsEntity = CycleCountDeterminationsEntity;
    var AssetRetirementEntity = (function () {
        function AssetRetirementEntity() {
        }
        AssetRetirementEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetRetirement", sessionId, routeId, [obj]);
        };
        AssetRetirementEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetRetirement(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetRetirementEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetRetirement(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        AssetRetirementEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetRetirement(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return AssetRetirementEntity;
    }());
    SAPB1.AssetRetirementEntity = AssetRetirementEntity;
    var PurchaseRequestsEntity = (function () {
        function PurchaseRequestsEntity() {
        }
        PurchaseRequestsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseRequests", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseRequests(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequests(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequests(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequests(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequests(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseRequestsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseRequests(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseRequestsEntity;
    }());
    SAPB1.PurchaseRequestsEntity = PurchaseRequestsEntity;
    var AssetDepreciationGroupsEntity = (function () {
        function AssetDepreciationGroupsEntity() {
        }
        AssetDepreciationGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AssetDepreciationGroups", sessionId, routeId, [obj]);
        };
        AssetDepreciationGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AssetDepreciationGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetDepreciationGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AssetDepreciationGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AssetDepreciationGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AssetDepreciationGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return AssetDepreciationGroupsEntity;
    }());
    SAPB1.AssetDepreciationGroupsEntity = AssetDepreciationGroupsEntity;
    var AttributeGroupsEntity = (function () {
        function AttributeGroupsEntity() {
        }
        AttributeGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AttributeGroups", sessionId, routeId, [obj]);
        };
        AttributeGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AttributeGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        AttributeGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AttributeGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        AttributeGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AttributeGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return AttributeGroupsEntity;
    }());
    SAPB1.AttributeGroupsEntity = AttributeGroupsEntity;
    var IntegrationPackagesConfigureEntity = (function () {
        function IntegrationPackagesConfigureEntity() {
        }
        IntegrationPackagesConfigureEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "IntegrationPackagesConfigure", sessionId, routeId, [obj]);
        };
        IntegrationPackagesConfigureEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "IntegrationPackagesConfigure(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        IntegrationPackagesConfigureEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "IntegrationPackagesConfigure(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        IntegrationPackagesConfigureEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "IntegrationPackagesConfigure(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return IntegrationPackagesConfigureEntity;
    }());
    SAPB1.IntegrationPackagesConfigureEntity = IntegrationPackagesConfigureEntity;
    var DeliveryNotesEntity = (function () {
        function DeliveryNotesEntity() {
        }
        DeliveryNotesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DeliveryNotes", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotes(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotes(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotes(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotes(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        DeliveryNotesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DeliveryNotes(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return DeliveryNotesEntity;
    }());
    SAPB1.DeliveryNotesEntity = DeliveryNotesEntity;
    var BPPrioritiesEntity = (function () {
        function BPPrioritiesEntity() {
        }
        BPPrioritiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BPPriorities", sessionId, routeId, [obj]);
        };
        BPPrioritiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BPPriorities(" + obj.Priority + ")", sessionId, routeId, [obj]);
        };
        BPPrioritiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BPPriorities(" + obj.Priority + ")", sessionId, routeId, [obj]);
        };
        BPPrioritiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BPPriorities(" + obj.Priority + ")", sessionId, routeId, [obj]);
        };
        return BPPrioritiesEntity;
    }());
    SAPB1.BPPrioritiesEntity = BPPrioritiesEntity;
    var DunningLettersEntity = (function () {
        function DunningLettersEntity() {
        }
        DunningLettersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DunningLetters", sessionId, routeId, [obj]);
        };
        DunningLettersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DunningLetters(" + obj.RowNumber + ")", sessionId, routeId, [obj]);
        };
        DunningLettersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DunningLetters(" + obj.RowNumber + ")", sessionId, routeId, [obj]);
        };
        DunningLettersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DunningLetters(" + obj.RowNumber + ")", sessionId, routeId, [obj]);
        };
        return DunningLettersEntity;
    }());
    SAPB1.DunningLettersEntity = DunningLettersEntity;
    var UserFieldsMDEntity = (function () {
        function UserFieldsMDEntity() {
        }
        UserFieldsMDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserFieldsMD", sessionId, routeId, [obj]);
        };
        UserFieldsMDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserFieldsMD('" + obj.TableName + "', " + obj.FieldID + ")", sessionId, routeId, [obj]);
        };
        UserFieldsMDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserFieldsMD('" + obj.TableName + "', " + obj.FieldID + ")", sessionId, routeId, [obj]);
        };
        UserFieldsMDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserFieldsMD('" + obj.TableName + "', " + obj.FieldID + ")", sessionId, routeId, [obj]);
        };
        return UserFieldsMDEntity;
    }());
    SAPB1.UserFieldsMDEntity = UserFieldsMDEntity;
    var UserTablesMDEntity = (function () {
        function UserTablesMDEntity() {
        }
        UserTablesMDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserTablesMD", sessionId, routeId, [obj]);
        };
        UserTablesMDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserTablesMD('" + obj.TableName + "')", sessionId, routeId, [obj]);
        };
        UserTablesMDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserTablesMD('" + obj.TableName + "')", sessionId, routeId, [obj]);
        };
        UserTablesMDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserTablesMD('" + obj.TableName + "')", sessionId, routeId, [obj]);
        };
        return UserTablesMDEntity;
    }());
    SAPB1.UserTablesMDEntity = UserTablesMDEntity;
    var PickListsEntity = (function () {
        function PickListsEntity() {
        }
        PickListsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PickLists", sessionId, routeId, [obj]);
        };
        PickListsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PickLists(" + obj.Absoluteentry + ")", sessionId, routeId, [obj]);
        };
        PickListsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PickLists(" + obj.Absoluteentry + ")", sessionId, routeId, [obj]);
        };
        PickListsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PickLists(" + obj.Absoluteentry + ")", sessionId, routeId, [obj]);
        };
        PickListsEntity.GetReleasedAllocation = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PickLists(" + obj.Absoluteentry + ")/GetReleasedAllocation", sessionId, routeId, [obj]);
        };
        return PickListsEntity;
    }());
    SAPB1.PickListsEntity = PickListsEntity;
    var EmployeeIDTypeEntity = (function () {
        function EmployeeIDTypeEntity() {
        }
        EmployeeIDTypeEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeeIDType", sessionId, routeId, [obj]);
        };
        EmployeeIDTypeEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeeIDType('" + obj.IDType + "')", sessionId, routeId, [obj]);
        };
        EmployeeIDTypeEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeeIDType('" + obj.IDType + "')", sessionId, routeId, [obj]);
        };
        EmployeeIDTypeEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeeIDType('" + obj.IDType + "')", sessionId, routeId, [obj]);
        };
        return EmployeeIDTypeEntity;
    }());
    SAPB1.EmployeeIDTypeEntity = EmployeeIDTypeEntity;
    var JournalEntryDocumentTypesEntity = (function () {
        function JournalEntryDocumentTypesEntity() {
        }
        JournalEntryDocumentTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "JournalEntryDocumentTypes", sessionId, routeId, [obj]);
        };
        JournalEntryDocumentTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "JournalEntryDocumentTypes('" + obj.JournalEntryType + "')", sessionId, routeId, [obj]);
        };
        JournalEntryDocumentTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "JournalEntryDocumentTypes('" + obj.JournalEntryType + "')", sessionId, routeId, [obj]);
        };
        JournalEntryDocumentTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "JournalEntryDocumentTypes('" + obj.JournalEntryType + "')", sessionId, routeId, [obj]);
        };
        return JournalEntryDocumentTypesEntity;
    }());
    SAPB1.JournalEntryDocumentTypesEntity = JournalEntryDocumentTypesEntity;
    var PaymentRunExportEntity = (function () {
        function PaymentRunExportEntity() {
        }
        PaymentRunExportEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PaymentRunExport", sessionId, routeId, [obj]);
        };
        PaymentRunExportEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PaymentRunExport(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentRunExportEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PaymentRunExport(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentRunExportEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PaymentRunExport(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        return PaymentRunExportEntity;
    }());
    SAPB1.PaymentRunExportEntity = PaymentRunExportEntity;
    var PaymentBlocksEntity = (function () {
        function PaymentBlocksEntity() {
        }
        PaymentBlocksEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PaymentBlocks", sessionId, routeId, [obj]);
        };
        PaymentBlocksEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PaymentBlocks(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentBlocksEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PaymentBlocks(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        PaymentBlocksEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PaymentBlocks(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return PaymentBlocksEntity;
    }());
    SAPB1.PaymentBlocksEntity = PaymentBlocksEntity;
    var ReturnsEntity = (function () {
        function ReturnsEntity() {
        }
        ReturnsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Returns", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Returns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Returns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Returns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Returns(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Returns(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        ReturnsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Returns(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        ReturnsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Returns(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        ReturnsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Returns(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return ReturnsEntity;
    }());
    SAPB1.ReturnsEntity = ReturnsEntity;
    var UserQueriesEntity = (function () {
        function UserQueriesEntity() {
        }
        UserQueriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserQueries", sessionId, routeId, [obj]);
        };
        UserQueriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserQueries(" + obj.InternalKey + ", " + obj.QueryCategory + ")", sessionId, routeId, [obj]);
        };
        UserQueriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserQueries(" + obj.InternalKey + ", " + obj.QueryCategory + ")", sessionId, routeId, [obj]);
        };
        UserQueriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserQueries(" + obj.InternalKey + ", " + obj.QueryCategory + ")", sessionId, routeId, [obj]);
        };
        return UserQueriesEntity;
    }());
    SAPB1.UserQueriesEntity = UserQueriesEntity;
    var MaterialRevaluationEntity = (function () {
        function MaterialRevaluationEntity() {
        }
        MaterialRevaluationEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "MaterialRevaluation", sessionId, routeId, [obj]);
        };
        MaterialRevaluationEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "MaterialRevaluation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        MaterialRevaluationEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "MaterialRevaluation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        MaterialRevaluationEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "MaterialRevaluation(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        MaterialRevaluationEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MaterialRevaluation(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        MaterialRevaluationEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "MaterialRevaluation(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        return MaterialRevaluationEntity;
    }());
    SAPB1.MaterialRevaluationEntity = MaterialRevaluationEntity;
    var CorrectionInvoiceEntity = (function () {
        function CorrectionInvoiceEntity() {
        }
        CorrectionInvoiceEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CorrectionInvoice", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CorrectionInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CorrectionInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CorrectionInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoice(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoice(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoice(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoice(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoice(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return CorrectionInvoiceEntity;
    }());
    SAPB1.CorrectionInvoiceEntity = CorrectionInvoiceEntity;
    var CorrectionInvoiceReversalEntity = (function () {
        function CorrectionInvoiceReversalEntity() {
        }
        CorrectionInvoiceReversalEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CorrectionInvoiceReversal", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CorrectionInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CorrectionInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CorrectionInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversal(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversal(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversal(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversal(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        CorrectionInvoiceReversalEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionInvoiceReversal(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return CorrectionInvoiceReversalEntity;
    }());
    SAPB1.CorrectionInvoiceReversalEntity = CorrectionInvoiceReversalEntity;
    var CorrectionPurchaseInvoiceEntity = (function () {
        function CorrectionPurchaseInvoiceEntity() {
        }
        CorrectionPurchaseInvoiceEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CorrectionPurchaseInvoice", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoice(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return CorrectionPurchaseInvoiceEntity;
    }());
    SAPB1.CorrectionPurchaseInvoiceEntity = CorrectionPurchaseInvoiceEntity;
    var CorrectionPurchaseInvoiceReversalEntity = (function () {
        function CorrectionPurchaseInvoiceReversalEntity() {
        }
        CorrectionPurchaseInvoiceReversalEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CorrectionPurchaseInvoiceReversal", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        CorrectionPurchaseInvoiceReversalEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "CorrectionPurchaseInvoiceReversal(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return CorrectionPurchaseInvoiceReversalEntity;
    }());
    SAPB1.CorrectionPurchaseInvoiceReversalEntity = CorrectionPurchaseInvoiceReversalEntity;
    var ServiceCallStatusEntity = (function () {
        function ServiceCallStatusEntity() {
        }
        ServiceCallStatusEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallStatus", sessionId, routeId, [obj]);
        };
        ServiceCallStatusEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ServiceCallStatusEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ServiceCallStatusEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallStatusEntity;
    }());
    SAPB1.ServiceCallStatusEntity = ServiceCallStatusEntity;
    var ServiceCallTypesEntity = (function () {
        function ServiceCallTypesEntity() {
        }
        ServiceCallTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallTypes", sessionId, routeId, [obj]);
        };
        ServiceCallTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallTypes(" + obj.CallTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallTypes(" + obj.CallTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallTypes(" + obj.CallTypeID + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallTypesEntity;
    }());
    SAPB1.ServiceCallTypesEntity = ServiceCallTypesEntity;
    var ServiceCallProblemTypesEntity = (function () {
        function ServiceCallProblemTypesEntity() {
        }
        ServiceCallProblemTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallProblemTypes", sessionId, routeId, [obj]);
        };
        ServiceCallProblemTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallProblemTypes(" + obj.ProblemTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallProblemTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallProblemTypes(" + obj.ProblemTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallProblemTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallProblemTypes(" + obj.ProblemTypeID + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallProblemTypesEntity;
    }());
    SAPB1.ServiceCallProblemTypesEntity = ServiceCallProblemTypesEntity;
    var OrdersEntity = (function () {
        function OrdersEntity() {
        }
        OrdersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Orders", sessionId, routeId, [obj]);
        };
        OrdersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Orders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        OrdersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Orders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        OrdersEntity.Get = function (obj, sessionId, routeId) {
            return callSL(B1ObjActionEnum.GET, "Orders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        OrdersEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Orders(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        OrdersEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Orders(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        OrdersEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Orders(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        OrdersEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Orders(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        OrdersEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Orders(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return OrdersEntity;
    }());
    SAPB1.OrdersEntity = OrdersEntity;
    var ContractTemplatesEntity = (function () {
        function ContractTemplatesEntity() {
        }
        ContractTemplatesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ContractTemplates", sessionId, routeId, [obj]);
        };
        ContractTemplatesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ContractTemplates('" + obj.TemplateName + "')", sessionId, routeId, [obj]);
        };
        ContractTemplatesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ContractTemplates('" + obj.TemplateName + "')", sessionId, routeId, [obj]);
        };
        ContractTemplatesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ContractTemplates('" + obj.TemplateName + "')", sessionId, routeId, [obj]);
        };
        return ContractTemplatesEntity;
    }());
    SAPB1.ContractTemplatesEntity = ContractTemplatesEntity;
    var EmployeesInfoEntity = (function () {
        function EmployeesInfoEntity() {
        }
        EmployeesInfoEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeesInfo", sessionId, routeId, [obj]);
        };
        EmployeesInfoEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeesInfo(" + obj.EmployeeID + ")", sessionId, routeId, [obj]);
        };
        EmployeesInfoEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeesInfo(" + obj.EmployeeID + ")", sessionId, routeId, [obj]);
        };
        EmployeesInfoEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeesInfo(" + obj.EmployeeID + ")", sessionId, routeId, [obj]);
        };
        EmployeesInfoEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeesInfo(" + obj.EmployeeID + ")/Cancel", sessionId, routeId, [obj]);
        };
        EmployeesInfoEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "EmployeesInfo(" + obj.EmployeeID + ")/Close", sessionId, routeId, [obj]);
        };
        return EmployeesInfoEntity;
    }());
    SAPB1.EmployeesInfoEntity = EmployeesInfoEntity;
    var EmployeeRolesSetupEntity = (function () {
        function EmployeeRolesSetupEntity() {
        }
        EmployeeRolesSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeeRolesSetup", sessionId, routeId, [obj]);
        };
        EmployeeRolesSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeeRolesSetup(" + obj.TypeID + ")", sessionId, routeId, [obj]);
        };
        EmployeeRolesSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeeRolesSetup(" + obj.TypeID + ")", sessionId, routeId, [obj]);
        };
        EmployeeRolesSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeeRolesSetup(" + obj.TypeID + ")", sessionId, routeId, [obj]);
        };
        return EmployeeRolesSetupEntity;
    }());
    SAPB1.EmployeeRolesSetupEntity = EmployeeRolesSetupEntity;
    var BrazilMultiIndexersEntity = (function () {
        function BrazilMultiIndexersEntity() {
        }
        BrazilMultiIndexersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BrazilMultiIndexers", sessionId, routeId, [obj]);
        };
        BrazilMultiIndexersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BrazilMultiIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilMultiIndexersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BrazilMultiIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilMultiIndexersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BrazilMultiIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilMultiIndexersEntity.GetIndexerTypeList = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BrazilMultiIndexers(" + obj.ID + ")/GetIndexerTypeList", sessionId, routeId, [obj]);
        };
        return BrazilMultiIndexersEntity;
    }());
    SAPB1.BrazilMultiIndexersEntity = BrazilMultiIndexersEntity;
    var EmployeeStatusEntity = (function () {
        function EmployeeStatusEntity() {
        }
        EmployeeStatusEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeeStatus", sessionId, routeId, [obj]);
        };
        EmployeeStatusEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeeStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        EmployeeStatusEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeeStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        EmployeeStatusEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeeStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        return EmployeeStatusEntity;
    }());
    SAPB1.EmployeeStatusEntity = EmployeeStatusEntity;
    var TerminationReasonEntity = (function () {
        function TerminationReasonEntity() {
        }
        TerminationReasonEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TerminationReason", sessionId, routeId, [obj]);
        };
        TerminationReasonEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TerminationReason(" + obj.ReasonID + ")", sessionId, routeId, [obj]);
        };
        TerminationReasonEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TerminationReason(" + obj.ReasonID + ")", sessionId, routeId, [obj]);
        };
        TerminationReasonEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TerminationReason(" + obj.ReasonID + ")", sessionId, routeId, [obj]);
        };
        return TerminationReasonEntity;
    }());
    SAPB1.TerminationReasonEntity = TerminationReasonEntity;
    var CustomerEquipmentCardsEntity = (function () {
        function CustomerEquipmentCardsEntity() {
        }
        CustomerEquipmentCardsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CustomerEquipmentCards", sessionId, routeId, [obj]);
        };
        CustomerEquipmentCardsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CustomerEquipmentCards(" + obj.EquipmentCardNum + ")", sessionId, routeId, [obj]);
        };
        CustomerEquipmentCardsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CustomerEquipmentCards(" + obj.EquipmentCardNum + ")", sessionId, routeId, [obj]);
        };
        CustomerEquipmentCardsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CustomerEquipmentCards(" + obj.EquipmentCardNum + ")", sessionId, routeId, [obj]);
        };
        return CustomerEquipmentCardsEntity;
    }());
    SAPB1.CustomerEquipmentCardsEntity = CustomerEquipmentCardsEntity;
    var WithholdingTaxCodesEntity = (function () {
        function WithholdingTaxCodesEntity() {
        }
        WithholdingTaxCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WithholdingTaxCodes", sessionId, routeId, [obj]);
        };
        WithholdingTaxCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WithholdingTaxCodes('" + obj.WTCode + "')", sessionId, routeId, [obj]);
        };
        WithholdingTaxCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WithholdingTaxCodes('" + obj.WTCode + "')", sessionId, routeId, [obj]);
        };
        WithholdingTaxCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WithholdingTaxCodes('" + obj.WTCode + "')", sessionId, routeId, [obj]);
        };
        return WithholdingTaxCodesEntity;
    }());
    SAPB1.WithholdingTaxCodesEntity = WithholdingTaxCodesEntity;
    var PurchaseInvoicesEntity = (function () {
        function PurchaseInvoicesEntity() {
        }
        PurchaseInvoicesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseInvoices", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoices(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoices(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoices(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoices(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseInvoicesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseInvoices(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseInvoicesEntity;
    }());
    SAPB1.PurchaseInvoicesEntity = PurchaseInvoicesEntity;
    var ReportFilterEntity = (function () {
        function ReportFilterEntity() {
        }
        ReportFilterEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ReportFilter", sessionId, routeId, [obj]);
        };
        ReportFilterEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ReportFilter(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ReportFilterEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ReportFilter(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ReportFilterEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ReportFilter(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ReportFilterEntity;
    }());
    SAPB1.ReportFilterEntity = ReportFilterEntity;
    var BillOfExchangeTransactionsEntity = (function () {
        function BillOfExchangeTransactionsEntity() {
        }
        BillOfExchangeTransactionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BillOfExchangeTransactions", sessionId, routeId, [obj]);
        };
        BillOfExchangeTransactionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BillOfExchangeTransactions(" + obj.BOETransactionkey + ")", sessionId, routeId, [obj]);
        };
        BillOfExchangeTransactionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BillOfExchangeTransactions(" + obj.BOETransactionkey + ")", sessionId, routeId, [obj]);
        };
        BillOfExchangeTransactionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BillOfExchangeTransactions(" + obj.BOETransactionkey + ")", sessionId, routeId, [obj]);
        };
        return BillOfExchangeTransactionsEntity;
    }());
    SAPB1.BillOfExchangeTransactionsEntity = BillOfExchangeTransactionsEntity;
    var ServiceCallSolutionStatusEntity = (function () {
        function ServiceCallSolutionStatusEntity() {
        }
        ServiceCallSolutionStatusEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallSolutionStatus", sessionId, routeId, [obj]);
        };
        ServiceCallSolutionStatusEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallSolutionStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ServiceCallSolutionStatusEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallSolutionStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ServiceCallSolutionStatusEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallSolutionStatus(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallSolutionStatusEntity;
    }());
    SAPB1.ServiceCallSolutionStatusEntity = ServiceCallSolutionStatusEntity;
    var KnowledgeBaseSolutionsEntity = (function () {
        function KnowledgeBaseSolutionsEntity() {
        }
        KnowledgeBaseSolutionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "KnowledgeBaseSolutions", sessionId, routeId, [obj]);
        };
        KnowledgeBaseSolutionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "KnowledgeBaseSolutions(" + obj.SolutionCode + ")", sessionId, routeId, [obj]);
        };
        KnowledgeBaseSolutionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "KnowledgeBaseSolutions(" + obj.SolutionCode + ")", sessionId, routeId, [obj]);
        };
        KnowledgeBaseSolutionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "KnowledgeBaseSolutions(" + obj.SolutionCode + ")", sessionId, routeId, [obj]);
        };
        return KnowledgeBaseSolutionsEntity;
    }());
    SAPB1.KnowledgeBaseSolutionsEntity = KnowledgeBaseSolutionsEntity;
    var PurchaseCreditNotesEntity = (function () {
        function PurchaseCreditNotesEntity() {
        }
        PurchaseCreditNotesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseCreditNotes", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseCreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseCreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseCreditNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotes(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotes(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotes(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotes(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseCreditNotesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseCreditNotes(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseCreditNotesEntity;
    }());
    SAPB1.PurchaseCreditNotesEntity = PurchaseCreditNotesEntity;
    var ServiceContractsEntity = (function () {
        function ServiceContractsEntity() {
        }
        ServiceContractsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceContracts", sessionId, routeId, [obj]);
        };
        ServiceContractsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceContracts(" + obj.ContractID + ")", sessionId, routeId, [obj]);
        };
        ServiceContractsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceContracts(" + obj.ContractID + ")", sessionId, routeId, [obj]);
        };
        ServiceContractsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceContracts(" + obj.ContractID + ")", sessionId, routeId, [obj]);
        };
        ServiceContractsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceContracts(" + obj.ContractID + ")/Cancel", sessionId, routeId, [obj]);
        };
        ServiceContractsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceContracts(" + obj.ContractID + ")/Close", sessionId, routeId, [obj]);
        };
        return ServiceContractsEntity;
    }());
    SAPB1.ServiceContractsEntity = ServiceContractsEntity;
    var ServiceCallsEntity = (function () {
        function ServiceCallsEntity() {
        }
        ServiceCallsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCalls", sessionId, routeId, [obj]);
        };
        ServiceCallsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCalls(" + obj.ServiceCallID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCalls(" + obj.ServiceCallID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCalls(" + obj.ServiceCallID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ServiceCalls(" + obj.ServiceCallID + ")/Close", sessionId, routeId, [obj]);
        };
        return ServiceCallsEntity;
    }());
    SAPB1.ServiceCallsEntity = ServiceCallsEntity;
    var ServiceCallOriginsEntity = (function () {
        function ServiceCallOriginsEntity() {
        }
        ServiceCallOriginsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallOrigins", sessionId, routeId, [obj]);
        };
        ServiceCallOriginsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallOrigins(" + obj.OriginID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallOriginsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallOrigins(" + obj.OriginID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallOriginsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallOrigins(" + obj.OriginID + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallOriginsEntity;
    }());
    SAPB1.ServiceCallOriginsEntity = ServiceCallOriginsEntity;
    var UserKeysMDEntity = (function () {
        function UserKeysMDEntity() {
        }
        UserKeysMDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserKeysMD", sessionId, routeId, [obj]);
        };
        UserKeysMDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserKeysMD('" + obj.TableName + "', " + obj.KeyIndex + ")", sessionId, routeId, [obj]);
        };
        UserKeysMDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserKeysMD('" + obj.TableName + "', " + obj.KeyIndex + ")", sessionId, routeId, [obj]);
        };
        UserKeysMDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserKeysMD('" + obj.TableName + "', " + obj.KeyIndex + ")", sessionId, routeId, [obj]);
        };
        return UserKeysMDEntity;
    }());
    SAPB1.UserKeysMDEntity = UserKeysMDEntity;
    var QueueEntity = (function () {
        function QueueEntity() {
        }
        QueueEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Queue", sessionId, routeId, [obj]);
        };
        QueueEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Queue('" + obj.QueueID + "')", sessionId, routeId, [obj]);
        };
        QueueEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Queue('" + obj.QueueID + "')", sessionId, routeId, [obj]);
        };
        QueueEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Queue('" + obj.QueueID + "')", sessionId, routeId, [obj]);
        };
        return QueueEntity;
    }());
    SAPB1.QueueEntity = QueueEntity;
    var DunningTermsEntity = (function () {
        function DunningTermsEntity() {
        }
        DunningTermsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DunningTerms", sessionId, routeId, [obj]);
        };
        DunningTermsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DunningTerms('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DunningTermsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DunningTerms('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        DunningTermsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DunningTerms('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return DunningTermsEntity;
    }());
    SAPB1.DunningTermsEntity = DunningTermsEntity;
    var SalesForecastEntity = (function () {
        function SalesForecastEntity() {
        }
        SalesForecastEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesForecast", sessionId, routeId, [obj]);
        };
        SalesForecastEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesForecast(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        SalesForecastEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesForecast(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        SalesForecastEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesForecast(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return SalesForecastEntity;
    }());
    SAPB1.SalesForecastEntity = SalesForecastEntity;
    var TrackingNotesEntity = (function () {
        function TrackingNotesEntity() {
        }
        TrackingNotesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TrackingNotes", sessionId, routeId, [obj]);
        };
        TrackingNotesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TrackingNotes(" + obj.TrackingNoteNumber + ")", sessionId, routeId, [obj]);
        };
        TrackingNotesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TrackingNotes(" + obj.TrackingNoteNumber + ")", sessionId, routeId, [obj]);
        };
        TrackingNotesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TrackingNotes(" + obj.TrackingNoteNumber + ")", sessionId, routeId, [obj]);
        };
        return TrackingNotesEntity;
    }());
    SAPB1.TrackingNotesEntity = TrackingNotesEntity;
    var BusinessPartnersEntity = (function () {
        function BusinessPartnersEntity() {
        }
        BusinessPartnersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BusinessPartners", sessionId, routeId, [obj]);
        };
        BusinessPartnersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BusinessPartners('" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        BusinessPartnersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BusinessPartners('" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        BusinessPartnersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BusinessPartners('" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        return BusinessPartnersEntity;
    }());
    SAPB1.BusinessPartnersEntity = BusinessPartnersEntity;
    var PurchaseDeliveryNotesEntity = (function () {
        function PurchaseDeliveryNotesEntity() {
        }
        PurchaseDeliveryNotesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseDeliveryNotes", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseDeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseDeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseDeliveryNotes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotes(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotes(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotes(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotes(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseDeliveryNotesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDeliveryNotes(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseDeliveryNotesEntity;
    }());
    SAPB1.PurchaseDeliveryNotesEntity = PurchaseDeliveryNotesEntity;
    var TerritoriesEntity = (function () {
        function TerritoriesEntity() {
        }
        TerritoriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Territories", sessionId, routeId, [obj]);
        };
        TerritoriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Territories(" + obj.TerritoryID + ")", sessionId, routeId, [obj]);
        };
        TerritoriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Territories(" + obj.TerritoryID + ")", sessionId, routeId, [obj]);
        };
        TerritoriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Territories(" + obj.TerritoryID + ")", sessionId, routeId, [obj]);
        };
        return TerritoriesEntity;
    }());
    SAPB1.TerritoriesEntity = TerritoriesEntity;
    var IndustriesEntity = (function () {
        function IndustriesEntity() {
        }
        IndustriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Industries", sessionId, routeId, [obj]);
        };
        IndustriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Industries(" + obj.IndustryCode + ")", sessionId, routeId, [obj]);
        };
        IndustriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Industries(" + obj.IndustryCode + ")", sessionId, routeId, [obj]);
        };
        IndustriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Industries(" + obj.IndustryCode + ")", sessionId, routeId, [obj]);
        };
        return IndustriesEntity;
    }());
    SAPB1.IndustriesEntity = IndustriesEntity;
    var ProductionOrdersEntity = (function () {
        function ProductionOrdersEntity() {
        }
        ProductionOrdersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ProductionOrders", sessionId, routeId, [obj]);
        };
        ProductionOrdersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ProductionOrders(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        ProductionOrdersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ProductionOrders(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        ProductionOrdersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ProductionOrders(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        ProductionOrdersEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProductionOrders(" + obj.AbsoluteEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        return ProductionOrdersEntity;
    }());
    SAPB1.ProductionOrdersEntity = ProductionOrdersEntity;
    var DownPaymentsEntity = (function () {
        function DownPaymentsEntity() {
        }
        DownPaymentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DownPayments", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPayments(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPayments(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPayments(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPayments(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        DownPaymentsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "DownPayments(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return DownPaymentsEntity;
    }());
    SAPB1.DownPaymentsEntity = DownPaymentsEntity;
    var PurchaseDownPaymentsEntity = (function () {
        function PurchaseDownPaymentsEntity() {
        }
        PurchaseDownPaymentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseDownPayments", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseDownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseDownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseDownPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPayments(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPayments(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPayments(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPayments(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseDownPaymentsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseDownPayments(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseDownPaymentsEntity;
    }());
    SAPB1.PurchaseDownPaymentsEntity = PurchaseDownPaymentsEntity;
    var PackagesTypesEntity = (function () {
        function PackagesTypesEntity() {
        }
        PackagesTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PackagesTypes", sessionId, routeId, [obj]);
        };
        PackagesTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PackagesTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        PackagesTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PackagesTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        PackagesTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PackagesTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return PackagesTypesEntity;
    }());
    SAPB1.PackagesTypesEntity = PackagesTypesEntity;
    var UserObjectsMDEntity = (function () {
        function UserObjectsMDEntity() {
        }
        UserObjectsMDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserObjectsMD", sessionId, routeId, [obj]);
        };
        UserObjectsMDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserObjectsMD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        UserObjectsMDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserObjectsMD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        UserObjectsMDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserObjectsMD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return UserObjectsMDEntity;
    }());
    SAPB1.UserObjectsMDEntity = UserObjectsMDEntity;
    var PurchaseReturnsEntity = (function () {
        function PurchaseReturnsEntity() {
        }
        PurchaseReturnsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseReturns", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseReturns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseReturns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseReturns(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturns(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturns(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturns(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturns(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseReturnsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseReturns(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseReturnsEntity;
    }());
    SAPB1.PurchaseReturnsEntity = PurchaseReturnsEntity;
    var EmployeePositionEntity = (function () {
        function EmployeePositionEntity() {
        }
        EmployeePositionEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeePosition", sessionId, routeId, [obj]);
        };
        EmployeePositionEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeePosition(" + obj.PositionID + ")", sessionId, routeId, [obj]);
        };
        EmployeePositionEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeePosition(" + obj.PositionID + ")", sessionId, routeId, [obj]);
        };
        EmployeePositionEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeePosition(" + obj.PositionID + ")", sessionId, routeId, [obj]);
        };
        return EmployeePositionEntity;
    }());
    SAPB1.EmployeePositionEntity = EmployeePositionEntity;
    var TeamsEntity = (function () {
        function TeamsEntity() {
        }
        TeamsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Teams", sessionId, routeId, [obj]);
        };
        TeamsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Teams(" + obj.TeamID + ")", sessionId, routeId, [obj]);
        };
        TeamsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Teams(" + obj.TeamID + ")", sessionId, routeId, [obj]);
        };
        TeamsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Teams(" + obj.TeamID + ")", sessionId, routeId, [obj]);
        };
        return TeamsEntity;
    }());
    SAPB1.TeamsEntity = TeamsEntity;
    var RelationshipsEntity = (function () {
        function RelationshipsEntity() {
        }
        RelationshipsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Relationships", sessionId, routeId, [obj]);
        };
        RelationshipsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Relationships(" + obj.RelationshipCode + ")", sessionId, routeId, [obj]);
        };
        RelationshipsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Relationships(" + obj.RelationshipCode + ")", sessionId, routeId, [obj]);
        };
        RelationshipsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Relationships(" + obj.RelationshipCode + ")", sessionId, routeId, [obj]);
        };
        return RelationshipsEntity;
    }());
    SAPB1.RelationshipsEntity = RelationshipsEntity;
    var UserPermissionTreeEntity = (function () {
        function UserPermissionTreeEntity() {
        }
        UserPermissionTreeEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserPermissionTree", sessionId, routeId, [obj]);
        };
        UserPermissionTreeEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserPermissionTree('" + obj.PermissionID + "')", sessionId, routeId, [obj]);
        };
        UserPermissionTreeEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserPermissionTree('" + obj.PermissionID + "')", sessionId, routeId, [obj]);
        };
        UserPermissionTreeEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserPermissionTree('" + obj.PermissionID + "')", sessionId, routeId, [obj]);
        };
        return UserPermissionTreeEntity;
    }());
    SAPB1.UserPermissionTreeEntity = UserPermissionTreeEntity;
    var PredefinedTextsEntity = (function () {
        function PredefinedTextsEntity() {
        }
        PredefinedTextsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PredefinedTexts", sessionId, routeId, [obj]);
        };
        PredefinedTextsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PredefinedTexts(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        PredefinedTextsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PredefinedTexts(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        PredefinedTextsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PredefinedTexts(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return PredefinedTextsEntity;
    }());
    SAPB1.PredefinedTextsEntity = PredefinedTextsEntity;
    var ActivityStatusesEntity = (function () {
        function ActivityStatusesEntity() {
        }
        ActivityStatusesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ActivityStatuses", sessionId, routeId, [obj]);
        };
        ActivityStatusesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ActivityStatuses(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ActivityStatusesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ActivityStatuses(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        ActivityStatusesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ActivityStatuses(" + obj.StatusId + ")", sessionId, routeId, [obj]);
        };
        return ActivityStatusesEntity;
    }());
    SAPB1.ActivityStatusesEntity = ActivityStatusesEntity;
    var ChooseFromListEntity = (function () {
        function ChooseFromListEntity() {
        }
        ChooseFromListEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ChooseFromList", sessionId, routeId, [obj]);
        };
        ChooseFromListEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ChooseFromList('" + obj.ObjectName + "')", sessionId, routeId, [obj]);
        };
        ChooseFromListEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ChooseFromList('" + obj.ObjectName + "')", sessionId, routeId, [obj]);
        };
        ChooseFromListEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ChooseFromList('" + obj.ObjectName + "')", sessionId, routeId, [obj]);
        };
        return ChooseFromListEntity;
    }());
    SAPB1.ChooseFromListEntity = ChooseFromListEntity;
    var FormattedSearchesEntity = (function () {
        function FormattedSearchesEntity() {
        }
        FormattedSearchesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FormattedSearches", sessionId, routeId, [obj]);
        };
        FormattedSearchesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FormattedSearches(" + obj.Index + ")", sessionId, routeId, [obj]);
        };
        FormattedSearchesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FormattedSearches(" + obj.Index + ")", sessionId, routeId, [obj]);
        };
        FormattedSearchesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FormattedSearches(" + obj.Index + ")", sessionId, routeId, [obj]);
        };
        return FormattedSearchesEntity;
    }());
    SAPB1.FormattedSearchesEntity = FormattedSearchesEntity;
    var PurchaseOrdersEntity = (function () {
        function PurchaseOrdersEntity() {
        }
        PurchaseOrdersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseOrders", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseOrders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseOrders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseOrders(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrders(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrders(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrders(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrders(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseOrdersEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseOrders(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseOrdersEntity;
    }());
    SAPB1.PurchaseOrdersEntity = PurchaseOrdersEntity;
    var Attachments2Entity = (function () {
        function Attachments2Entity() {
        }
        Attachments2Entity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Attachments2", sessionId, routeId, [obj]);
        };
        Attachments2Entity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Attachments2(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        Attachments2Entity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Attachments2(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        Attachments2Entity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Attachments2(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        return Attachments2Entity;
    }());
    SAPB1.Attachments2Entity = Attachments2Entity;
    var UserLanguagesEntity = (function () {
        function UserLanguagesEntity() {
        }
        UserLanguagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserLanguages", sessionId, routeId, [obj]);
        };
        UserLanguagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserLanguages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        UserLanguagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserLanguages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        UserLanguagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserLanguages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return UserLanguagesEntity;
    }());
    SAPB1.UserLanguagesEntity = UserLanguagesEntity;
    var MultiLanguageTranslationsEntity = (function () {
        function MultiLanguageTranslationsEntity() {
        }
        MultiLanguageTranslationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "MultiLanguageTranslations", sessionId, routeId, [obj]);
        };
        MultiLanguageTranslationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "MultiLanguageTranslations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        MultiLanguageTranslationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "MultiLanguageTranslations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        MultiLanguageTranslationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "MultiLanguageTranslations(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return MultiLanguageTranslationsEntity;
    }());
    SAPB1.MultiLanguageTranslationsEntity = MultiLanguageTranslationsEntity;
    var DynamicSystemStringsEntity = (function () {
        function DynamicSystemStringsEntity() {
        }
        DynamicSystemStringsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DynamicSystemStrings", sessionId, routeId, [obj]);
        };
        DynamicSystemStringsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DynamicSystemStrings('" + obj.FormID + "', '" + obj.ItemID + "', '" + obj.ColumnID + "')", sessionId, routeId, [obj]);
        };
        DynamicSystemStringsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DynamicSystemStrings('" + obj.FormID + "', '" + obj.ItemID + "', '" + obj.ColumnID + "')", sessionId, routeId, [obj]);
        };
        DynamicSystemStringsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DynamicSystemStrings('" + obj.FormID + "', '" + obj.ItemID + "', '" + obj.ColumnID + "')", sessionId, routeId, [obj]);
        };
        return DynamicSystemStringsEntity;
    }());
    SAPB1.DynamicSystemStringsEntity = DynamicSystemStringsEntity;
    var QuotationsEntity = (function () {
        function QuotationsEntity() {
        }
        QuotationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Quotations", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Quotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Quotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Quotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Quotations(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Quotations(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        QuotationsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Quotations(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        QuotationsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Quotations(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        QuotationsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Quotations(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return QuotationsEntity;
    }());
    SAPB1.QuotationsEntity = QuotationsEntity;
    var HouseBankAccountsEntity = (function () {
        function HouseBankAccountsEntity() {
        }
        HouseBankAccountsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "HouseBankAccounts", sessionId, routeId, [obj]);
        };
        HouseBankAccountsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "HouseBankAccounts(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        HouseBankAccountsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "HouseBankAccounts(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        HouseBankAccountsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "HouseBankAccounts(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        return HouseBankAccountsEntity;
    }());
    SAPB1.HouseBankAccountsEntity = HouseBankAccountsEntity;
    var POSDailySummaryEntity = (function () {
        function POSDailySummaryEntity() {
        }
        POSDailySummaryEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "POSDailySummary", sessionId, routeId, [obj]);
        };
        POSDailySummaryEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "POSDailySummary(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        POSDailySummaryEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "POSDailySummary(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        POSDailySummaryEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "POSDailySummary(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return POSDailySummaryEntity;
    }());
    SAPB1.POSDailySummaryEntity = POSDailySummaryEntity;
    var EmailGroupsEntity = (function () {
        function EmailGroupsEntity() {
        }
        EmailGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmailGroups", sessionId, routeId, [obj]);
        };
        EmailGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmailGroups('" + obj.EmailGroupCode + "')", sessionId, routeId, [obj]);
        };
        EmailGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmailGroups('" + obj.EmailGroupCode + "')", sessionId, routeId, [obj]);
        };
        EmailGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmailGroups('" + obj.EmailGroupCode + "')", sessionId, routeId, [obj]);
        };
        return EmailGroupsEntity;
    }());
    SAPB1.EmailGroupsEntity = EmailGroupsEntity;
    var ServiceCallProblemSubTypesEntity = (function () {
        function ServiceCallProblemSubTypesEntity() {
        }
        ServiceCallProblemSubTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceCallProblemSubTypes", sessionId, routeId, [obj]);
        };
        ServiceCallProblemSubTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceCallProblemSubTypes(" + obj.ProblemSubTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallProblemSubTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceCallProblemSubTypes(" + obj.ProblemSubTypeID + ")", sessionId, routeId, [obj]);
        };
        ServiceCallProblemSubTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceCallProblemSubTypes(" + obj.ProblemSubTypeID + ")", sessionId, routeId, [obj]);
        };
        return ServiceCallProblemSubTypesEntity;
    }());
    SAPB1.ServiceCallProblemSubTypesEntity = ServiceCallProblemSubTypesEntity;
    var WitholdingTaxDefinitionEntity = (function () {
        function WitholdingTaxDefinitionEntity() {
        }
        WitholdingTaxDefinitionEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WitholdingTaxDefinition", sessionId, routeId, [obj]);
        };
        WitholdingTaxDefinitionEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WitholdingTaxDefinition(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        WitholdingTaxDefinitionEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WitholdingTaxDefinition(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        WitholdingTaxDefinitionEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WitholdingTaxDefinition(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return WitholdingTaxDefinitionEntity;
    }());
    SAPB1.WitholdingTaxDefinitionEntity = WitholdingTaxDefinitionEntity;
    var ProjectManagementsEntity = (function () {
        function ProjectManagementsEntity() {
        }
        ProjectManagementsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ProjectManagements", sessionId, routeId, [obj]);
        };
        ProjectManagementsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ProjectManagements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ProjectManagementsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ProjectManagements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ProjectManagementsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ProjectManagements(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ProjectManagementsEntity.CancelProject = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "ProjectManagements(" + obj.AbsEntry + ")/CancelProject", sessionId, routeId, [obj]);
        };
        return ProjectManagementsEntity;
    }());
    SAPB1.ProjectManagementsEntity = ProjectManagementsEntity;
    var ProjectManagementTimeSheetEntity = (function () {
        function ProjectManagementTimeSheetEntity() {
        }
        ProjectManagementTimeSheetEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ProjectManagementTimeSheet", sessionId, routeId, [obj]);
        };
        ProjectManagementTimeSheetEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ProjectManagementTimeSheet(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ProjectManagementTimeSheetEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ProjectManagementTimeSheet(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ProjectManagementTimeSheetEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ProjectManagementTimeSheet(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return ProjectManagementTimeSheetEntity;
    }());
    SAPB1.ProjectManagementTimeSheetEntity = ProjectManagementTimeSheetEntity;
    var AccountCategoryEntity = (function () {
        function AccountCategoryEntity() {
        }
        AccountCategoryEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AccountCategory", sessionId, routeId, [obj]);
        };
        AccountCategoryEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AccountCategory(" + obj.CategoryCode + ")", sessionId, routeId, [obj]);
        };
        AccountCategoryEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AccountCategory(" + obj.CategoryCode + ")", sessionId, routeId, [obj]);
        };
        AccountCategoryEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AccountCategory(" + obj.CategoryCode + ")", sessionId, routeId, [obj]);
        };
        return AccountCategoryEntity;
    }());
    SAPB1.AccountCategoryEntity = AccountCategoryEntity;
    var BankChargesAllocationCodesEntity = (function () {
        function BankChargesAllocationCodesEntity() {
        }
        BankChargesAllocationCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BankChargesAllocationCodes", sessionId, routeId, [obj]);
        };
        BankChargesAllocationCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BankChargesAllocationCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        BankChargesAllocationCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BankChargesAllocationCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        BankChargesAllocationCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BankChargesAllocationCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        BankChargesAllocationCodesEntity.SetDefaultBankChargesAllocationCode = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BankChargesAllocationCodes('" + obj.Code + "')/SetDefaultBankChargesAllocationCode", sessionId, routeId, [obj]);
        };
        return BankChargesAllocationCodesEntity;
    }());
    SAPB1.BankChargesAllocationCodesEntity = BankChargesAllocationCodesEntity;
    var IncomingPaymentsEntity = (function () {
        function IncomingPaymentsEntity() {
        }
        IncomingPaymentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "IncomingPayments", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "IncomingPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "IncomingPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "IncomingPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IncomingPayments(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IncomingPayments(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.GetApprovalTemplates = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IncomingPayments(" + obj.DocEntry + ")/GetApprovalTemplates", sessionId, routeId, [obj]);
        };
        IncomingPaymentsEntity.CancelbyCurrentSystemDate = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "IncomingPayments(" + obj.DocEntry + ")/CancelbyCurrentSystemDate", sessionId, routeId, [obj]);
        };
        return IncomingPaymentsEntity;
    }());
    SAPB1.IncomingPaymentsEntity = IncomingPaymentsEntity;
    var CashFlowLineItemsEntity = (function () {
        function CashFlowLineItemsEntity() {
        }
        CashFlowLineItemsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CashFlowLineItems", sessionId, routeId, [obj]);
        };
        CashFlowLineItemsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CashFlowLineItems(" + obj.LineItemID + ")", sessionId, routeId, [obj]);
        };
        CashFlowLineItemsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CashFlowLineItems(" + obj.LineItemID + ")", sessionId, routeId, [obj]);
        };
        CashFlowLineItemsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CashFlowLineItems(" + obj.LineItemID + ")", sessionId, routeId, [obj]);
        };
        return CashFlowLineItemsEntity;
    }());
    SAPB1.CashFlowLineItemsEntity = CashFlowLineItemsEntity;
    var CampaignResponseTypeEntity = (function () {
        function CampaignResponseTypeEntity() {
        }
        CampaignResponseTypeEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CampaignResponseType", sessionId, routeId, [obj]);
        };
        CampaignResponseTypeEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CampaignResponseType('" + obj.ResponseType + "')", sessionId, routeId, [obj]);
        };
        CampaignResponseTypeEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CampaignResponseType('" + obj.ResponseType + "')", sessionId, routeId, [obj]);
        };
        CampaignResponseTypeEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CampaignResponseType('" + obj.ResponseType + "')", sessionId, routeId, [obj]);
        };
        return CampaignResponseTypeEntity;
    }());
    SAPB1.CampaignResponseTypeEntity = CampaignResponseTypeEntity;
    var GovPayCodesEntity = (function () {
        function GovPayCodesEntity() {
        }
        GovPayCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "GovPayCodes", sessionId, routeId, [obj]);
        };
        GovPayCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "GovPayCodes(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        GovPayCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "GovPayCodes(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        GovPayCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "GovPayCodes(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        return GovPayCodesEntity;
    }());
    SAPB1.GovPayCodesEntity = GovPayCodesEntity;
    var TaxInvoiceReportEntity = (function () {
        function TaxInvoiceReportEntity() {
        }
        TaxInvoiceReportEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TaxInvoiceReport", sessionId, routeId, [obj]);
        };
        TaxInvoiceReportEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TaxInvoiceReport('" + obj.TaxInvoiceReportNumber + "')", sessionId, routeId, [obj]);
        };
        TaxInvoiceReportEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TaxInvoiceReport('" + obj.TaxInvoiceReportNumber + "')", sessionId, routeId, [obj]);
        };
        TaxInvoiceReportEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TaxInvoiceReport('" + obj.TaxInvoiceReportNumber + "')", sessionId, routeId, [obj]);
        };
        TaxInvoiceReportEntity.CancelTaxInvoiceReport = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "TaxInvoiceReport('" + obj.TaxInvoiceReportNumber + "')/CancelTaxInvoiceReport", sessionId, routeId, [obj]);
        };
        return TaxInvoiceReportEntity;
    }());
    SAPB1.TaxInvoiceReportEntity = TaxInvoiceReportEntity;
    var BusinessPlacesEntity = (function () {
        function BusinessPlacesEntity() {
        }
        BusinessPlacesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BusinessPlaces", sessionId, routeId, [obj]);
        };
        BusinessPlacesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BusinessPlaces(" + obj.BPLID + ")", sessionId, routeId, [obj]);
        };
        BusinessPlacesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BusinessPlaces(" + obj.BPLID + ")", sessionId, routeId, [obj]);
        };
        BusinessPlacesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BusinessPlaces(" + obj.BPLID + ")", sessionId, routeId, [obj]);
        };
        return BusinessPlacesEntity;
    }());
    SAPB1.BusinessPlacesEntity = BusinessPlacesEntity;
    var DepositsEntity = (function () {
        function DepositsEntity() {
        }
        DepositsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Deposits", sessionId, routeId, [obj]);
        };
        DepositsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Deposits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DepositsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Deposits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DepositsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Deposits(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        DepositsEntity.CancelDeposit = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Deposits(" + obj.AbsEntry + ")/CancelDeposit", sessionId, routeId, [obj]);
        };
        DepositsEntity.CancelDepositbyCurrentSystemDate = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Deposits(" + obj.AbsEntry + ")/CancelDepositbyCurrentSystemDate", sessionId, routeId, [obj]);
        };
        return DepositsEntity;
    }());
    SAPB1.DepositsEntity = DepositsEntity;
    var LocalEraEntity = (function () {
        function LocalEraEntity() {
        }
        LocalEraEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "LocalEra", sessionId, routeId, [obj]);
        };
        LocalEraEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "LocalEra('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        LocalEraEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "LocalEra('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        LocalEraEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "LocalEra('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return LocalEraEntity;
    }());
    SAPB1.LocalEraEntity = LocalEraEntity;
    var DimensionsEntity = (function () {
        function DimensionsEntity() {
        }
        DimensionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Dimensions", sessionId, routeId, [obj]);
        };
        DimensionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Dimensions(" + obj.DimensionCode + ")", sessionId, routeId, [obj]);
        };
        DimensionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Dimensions(" + obj.DimensionCode + ")", sessionId, routeId, [obj]);
        };
        DimensionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Dimensions(" + obj.DimensionCode + ")", sessionId, routeId, [obj]);
        };
        return DimensionsEntity;
    }());
    SAPB1.DimensionsEntity = DimensionsEntity;
    var ServiceGroupsEntity = (function () {
        function ServiceGroupsEntity() {
        }
        ServiceGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ServiceGroups", sessionId, routeId, [obj]);
        };
        ServiceGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ServiceGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ServiceGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ServiceGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        ServiceGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ServiceGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return ServiceGroupsEntity;
    }());
    SAPB1.ServiceGroupsEntity = ServiceGroupsEntity;
    var MaterialGroupsEntity = (function () {
        function MaterialGroupsEntity() {
        }
        MaterialGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "MaterialGroups", sessionId, routeId, [obj]);
        };
        MaterialGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "MaterialGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        MaterialGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "MaterialGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        MaterialGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "MaterialGroups(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return MaterialGroupsEntity;
    }());
    SAPB1.MaterialGroupsEntity = MaterialGroupsEntity;
    var NCMCodesSetupEntity = (function () {
        function NCMCodesSetupEntity() {
        }
        NCMCodesSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "NCMCodesSetup", sessionId, routeId, [obj]);
        };
        NCMCodesSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "NCMCodesSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        NCMCodesSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "NCMCodesSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        NCMCodesSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "NCMCodesSetup(" + obj.AbsEntry + ")", sessionId, routeId, [obj]);
        };
        return NCMCodesSetupEntity;
    }());
    SAPB1.NCMCodesSetupEntity = NCMCodesSetupEntity;
    var NFTaxCategoriesEntity = (function () {
        function NFTaxCategoriesEntity() {
        }
        NFTaxCategoriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "NFTaxCategories", sessionId, routeId, [obj]);
        };
        NFTaxCategoriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "NFTaxCategories(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        NFTaxCategoriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "NFTaxCategories(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        NFTaxCategoriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "NFTaxCategories(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        return NFTaxCategoriesEntity;
    }());
    SAPB1.NFTaxCategoriesEntity = NFTaxCategoriesEntity;
    var TaxCodeDeterminationsTCDEntity = (function () {
        function TaxCodeDeterminationsTCDEntity() {
        }
        TaxCodeDeterminationsTCDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TaxCodeDeterminationsTCD", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsTCDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TaxCodeDeterminationsTCD(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsTCDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TaxCodeDeterminationsTCD(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsTCDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TaxCodeDeterminationsTCD(" + obj.AbsId + ")", sessionId, routeId, [obj]);
        };
        return TaxCodeDeterminationsTCDEntity;
    }());
    SAPB1.TaxCodeDeterminationsTCDEntity = TaxCodeDeterminationsTCDEntity;
    var BOEDocumentTypesEntity = (function () {
        function BOEDocumentTypesEntity() {
        }
        BOEDocumentTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BOEDocumentTypes", sessionId, routeId, [obj]);
        };
        BOEDocumentTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BOEDocumentTypes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        BOEDocumentTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BOEDocumentTypes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        BOEDocumentTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BOEDocumentTypes(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return BOEDocumentTypesEntity;
    }());
    SAPB1.BOEDocumentTypesEntity = BOEDocumentTypesEntity;
    var BOEPortfoliosEntity = (function () {
        function BOEPortfoliosEntity() {
        }
        BOEPortfoliosEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BOEPortfolios", sessionId, routeId, [obj]);
        };
        BOEPortfoliosEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BOEPortfolios(" + obj.PortfolioEntry + ")", sessionId, routeId, [obj]);
        };
        BOEPortfoliosEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BOEPortfolios(" + obj.PortfolioEntry + ")", sessionId, routeId, [obj]);
        };
        BOEPortfoliosEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BOEPortfolios(" + obj.PortfolioEntry + ")", sessionId, routeId, [obj]);
        };
        return BOEPortfoliosEntity;
    }());
    SAPB1.BOEPortfoliosEntity = BOEPortfoliosEntity;
    var BOEInstructionsEntity = (function () {
        function BOEInstructionsEntity() {
        }
        BOEInstructionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BOEInstructions", sessionId, routeId, [obj]);
        };
        BOEInstructionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BOEInstructions(" + obj.InstructionEntry + ")", sessionId, routeId, [obj]);
        };
        BOEInstructionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BOEInstructions(" + obj.InstructionEntry + ")", sessionId, routeId, [obj]);
        };
        BOEInstructionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BOEInstructions(" + obj.InstructionEntry + ")", sessionId, routeId, [obj]);
        };
        return BOEInstructionsEntity;
    }());
    SAPB1.BOEInstructionsEntity = BOEInstructionsEntity;
    var SalesTaxInvoicesEntity = (function () {
        function SalesTaxInvoicesEntity() {
        }
        SalesTaxInvoicesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesTaxInvoices", sessionId, routeId, [obj]);
        };
        SalesTaxInvoicesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        SalesTaxInvoicesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        SalesTaxInvoicesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return SalesTaxInvoicesEntity;
    }());
    SAPB1.SalesTaxInvoicesEntity = SalesTaxInvoicesEntity;
    var PurchaseTaxInvoicesEntity = (function () {
        function PurchaseTaxInvoicesEntity() {
        }
        PurchaseTaxInvoicesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseTaxInvoices", sessionId, routeId, [obj]);
        };
        PurchaseTaxInvoicesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseTaxInvoicesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseTaxInvoicesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseTaxInvoices(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return PurchaseTaxInvoicesEntity;
    }());
    SAPB1.PurchaseTaxInvoicesEntity = PurchaseTaxInvoicesEntity;
    var CustomsDeclarationEntity = (function () {
        function CustomsDeclarationEntity() {
        }
        CustomsDeclarationEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CustomsDeclaration", sessionId, routeId, [obj]);
        };
        CustomsDeclarationEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CustomsDeclaration('" + obj.CCDNum + "')", sessionId, routeId, [obj]);
        };
        CustomsDeclarationEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CustomsDeclaration('" + obj.CCDNum + "')", sessionId, routeId, [obj]);
        };
        CustomsDeclarationEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CustomsDeclaration('" + obj.CCDNum + "')", sessionId, routeId, [obj]);
        };
        return CustomsDeclarationEntity;
    }());
    SAPB1.CustomsDeclarationEntity = CustomsDeclarationEntity;
    var ResourcesEntity = (function () {
        function ResourcesEntity() {
        }
        ResourcesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Resources", sessionId, routeId, [obj]);
        };
        ResourcesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Resources('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ResourcesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Resources('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ResourcesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Resources('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ResourcesEntity.CreateLinkedItem = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Resources('" + obj.Code + "')/CreateLinkedItem", sessionId, routeId, [obj]);
        };
        return ResourcesEntity;
    }());
    SAPB1.ResourcesEntity = ResourcesEntity;
    var ResourcePropertiesEntity = (function () {
        function ResourcePropertiesEntity() {
        }
        ResourcePropertiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ResourceProperties", sessionId, routeId, [obj]);
        };
        ResourcePropertiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ResourceProperties(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ResourcePropertiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ResourceProperties(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ResourcePropertiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ResourceProperties(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ResourcePropertiesEntity;
    }());
    SAPB1.ResourcePropertiesEntity = ResourcePropertiesEntity;
    var ResourceGroupsEntity = (function () {
        function ResourceGroupsEntity() {
        }
        ResourceGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ResourceGroups", sessionId, routeId, [obj]);
        };
        ResourceGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ResourceGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ResourceGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ResourceGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ResourceGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ResourceGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ResourceGroupsEntity;
    }());
    SAPB1.ResourceGroupsEntity = ResourceGroupsEntity;
    var BanksEntity = (function () {
        function BanksEntity() {
        }
        BanksEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Banks", sessionId, routeId, [obj]);
        };
        BanksEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Banks(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        BanksEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Banks(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        BanksEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Banks(" + obj.AbsoluteEntry + ")", sessionId, routeId, [obj]);
        };
        return BanksEntity;
    }());
    SAPB1.BanksEntity = BanksEntity;
    var JournalEntriesEntity = (function () {
        function JournalEntriesEntity() {
        }
        JournalEntriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "JournalEntries", sessionId, routeId, [obj]);
        };
        JournalEntriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "JournalEntries(" + obj.JdtNum + ")", sessionId, routeId, [obj]);
        };
        JournalEntriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "JournalEntries(" + obj.JdtNum + ")", sessionId, routeId, [obj]);
        };
        JournalEntriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "JournalEntries(" + obj.JdtNum + ")", sessionId, routeId, [obj]);
        };
        JournalEntriesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "JournalEntries(" + obj.JdtNum + ")/Cancel", sessionId, routeId, [obj]);
        };
        return JournalEntriesEntity;
    }());
    SAPB1.JournalEntriesEntity = JournalEntriesEntity;
    var StockTakingsEntity = (function () {
        function StockTakingsEntity() {
        }
        StockTakingsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "StockTakings", sessionId, routeId, [obj]);
        };
        StockTakingsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "StockTakings('" + obj.ItemCode + "', '" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        StockTakingsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "StockTakings('" + obj.ItemCode + "', '" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        StockTakingsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "StockTakings('" + obj.ItemCode + "', '" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        return StockTakingsEntity;
    }());
    SAPB1.StockTakingsEntity = StockTakingsEntity;
    var InventoryOpeningBalancesEntity = (function () {
        function InventoryOpeningBalancesEntity() {
        }
        InventoryOpeningBalancesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryOpeningBalances", sessionId, routeId, [obj]);
        };
        InventoryOpeningBalancesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryOpeningBalances(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryOpeningBalancesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryOpeningBalances(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryOpeningBalancesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryOpeningBalances(" + obj.DocumentEntry + ")", sessionId, routeId, [obj]);
        };
        return InventoryOpeningBalancesEntity;
    }());
    SAPB1.InventoryOpeningBalancesEntity = InventoryOpeningBalancesEntity;
    var ContactsEntity = (function () {
        function ContactsEntity() {
        }
        ContactsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Contacts", sessionId, routeId, [obj]);
        };
        ContactsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Contacts(" + obj.ContactCode + ")", sessionId, routeId, [obj]);
        };
        ContactsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Contacts(" + obj.ContactCode + ")", sessionId, routeId, [obj]);
        };
        ContactsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Contacts(" + obj.ContactCode + ")", sessionId, routeId, [obj]);
        };
        return ContactsEntity;
    }());
    SAPB1.ContactsEntity = ContactsEntity;
    var CreditCardsEntity = (function () {
        function CreditCardsEntity() {
        }
        CreditCardsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CreditCards", sessionId, routeId, [obj]);
        };
        CreditCardsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CreditCards(" + obj.CreditCardCode + ")", sessionId, routeId, [obj]);
        };
        CreditCardsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CreditCards(" + obj.CreditCardCode + ")", sessionId, routeId, [obj]);
        };
        CreditCardsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CreditCards(" + obj.CreditCardCode + ")", sessionId, routeId, [obj]);
        };
        return CreditCardsEntity;
    }());
    SAPB1.CreditCardsEntity = CreditCardsEntity;
    var CurrenciesEntity = (function () {
        function CurrenciesEntity() {
        }
        CurrenciesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Currencies", sessionId, routeId, [obj]);
        };
        CurrenciesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Currencies('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CurrenciesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Currencies('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        CurrenciesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Currencies('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return CurrenciesEntity;
    }());
    SAPB1.CurrenciesEntity = CurrenciesEntity;
    var ItemsEntity = (function () {
        function ItemsEntity() {
        }
        ItemsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Items", sessionId, routeId, [obj]);
        };
        ItemsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Items('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        ItemsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Items('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        ItemsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Items('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        ItemsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "Items('" + obj.ItemCode + "')/Cancel", sessionId, routeId, [obj]);
        };
        return ItemsEntity;
    }());
    SAPB1.ItemsEntity = ItemsEntity;
    var PaymentTermsTypesEntity = (function () {
        function PaymentTermsTypesEntity() {
        }
        PaymentTermsTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PaymentTermsTypes", sessionId, routeId, [obj]);
        };
        PaymentTermsTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PaymentTermsTypes(" + obj.GroupNumber + ")", sessionId, routeId, [obj]);
        };
        PaymentTermsTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PaymentTermsTypes(" + obj.GroupNumber + ")", sessionId, routeId, [obj]);
        };
        PaymentTermsTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PaymentTermsTypes(" + obj.GroupNumber + ")", sessionId, routeId, [obj]);
        };
        return PaymentTermsTypesEntity;
    }());
    SAPB1.PaymentTermsTypesEntity = PaymentTermsTypesEntity;
    var FormPreferencesEntity = (function () {
        function FormPreferencesEntity() {
        }
        FormPreferencesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FormPreferences", sessionId, routeId, [obj]);
        };
        FormPreferencesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FormPreferences(" + obj.User + ", '" + obj.FormID + "', '" + obj.ItemNumber + "', '" + obj.Column + "')", sessionId, routeId, [obj]);
        };
        FormPreferencesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FormPreferences(" + obj.User + ", '" + obj.FormID + "', '" + obj.ItemNumber + "', '" + obj.Column + "')", sessionId, routeId, [obj]);
        };
        FormPreferencesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FormPreferences(" + obj.User + ", '" + obj.FormID + "', '" + obj.ItemNumber + "', '" + obj.Column + "')", sessionId, routeId, [obj]);
        };
        return FormPreferencesEntity;
    }());
    SAPB1.FormPreferencesEntity = FormPreferencesEntity;
    var ElectronicFileFormatsEntity = (function () {
        function ElectronicFileFormatsEntity() {
        }
        ElectronicFileFormatsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ElectronicFileFormats", sessionId, routeId, [obj]);
        };
        ElectronicFileFormatsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ElectronicFileFormats(" + obj.FormatID + ")", sessionId, routeId, [obj]);
        };
        ElectronicFileFormatsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ElectronicFileFormats(" + obj.FormatID + ")", sessionId, routeId, [obj]);
        };
        ElectronicFileFormatsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ElectronicFileFormats(" + obj.FormatID + ")", sessionId, routeId, [obj]);
        };
        return ElectronicFileFormatsEntity;
    }());
    SAPB1.ElectronicFileFormatsEntity = ElectronicFileFormatsEntity;
    var BankPagesEntity = (function () {
        function BankPagesEntity() {
        }
        BankPagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BankPages", sessionId, routeId, [obj]);
        };
        BankPagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BankPages('" + obj.AccountCode + "', " + obj.Sequence + ")", sessionId, routeId, [obj]);
        };
        BankPagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BankPages('" + obj.AccountCode + "', " + obj.Sequence + ")", sessionId, routeId, [obj]);
        };
        BankPagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BankPages('" + obj.AccountCode + "', " + obj.Sequence + ")", sessionId, routeId, [obj]);
        };
        return BankPagesEntity;
    }());
    SAPB1.BankPagesEntity = BankPagesEntity;
    var ManufacturersEntity = (function () {
        function ManufacturersEntity() {
        }
        ManufacturersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Manufacturers", sessionId, routeId, [obj]);
        };
        ManufacturersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Manufacturers(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ManufacturersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Manufacturers(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ManufacturersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Manufacturers(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ManufacturersEntity;
    }());
    SAPB1.ManufacturersEntity = ManufacturersEntity;
    var BusinessPartnerPropertiesEntity = (function () {
        function BusinessPartnerPropertiesEntity() {
        }
        BusinessPartnerPropertiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BusinessPartnerProperties", sessionId, routeId, [obj]);
        };
        BusinessPartnerPropertiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BusinessPartnerProperties(" + obj.PropertyCode + ")", sessionId, routeId, [obj]);
        };
        BusinessPartnerPropertiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BusinessPartnerProperties(" + obj.PropertyCode + ")", sessionId, routeId, [obj]);
        };
        BusinessPartnerPropertiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BusinessPartnerProperties(" + obj.PropertyCode + ")", sessionId, routeId, [obj]);
        };
        return BusinessPartnerPropertiesEntity;
    }());
    SAPB1.BusinessPartnerPropertiesEntity = BusinessPartnerPropertiesEntity;
    var TransactionCodesEntity = (function () {
        function TransactionCodesEntity() {
        }
        TransactionCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TransactionCodes", sessionId, routeId, [obj]);
        };
        TransactionCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TransactionCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        TransactionCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TransactionCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        TransactionCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TransactionCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return TransactionCodesEntity;
    }());
    SAPB1.TransactionCodesEntity = TransactionCodesEntity;
    var VendorPaymentsEntity = (function () {
        function VendorPaymentsEntity() {
        }
        VendorPaymentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "VendorPayments", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "VendorPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "VendorPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "VendorPayments(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "VendorPayments(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "VendorPayments(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.GetApprovalTemplates = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "VendorPayments(" + obj.DocEntry + ")/GetApprovalTemplates", sessionId, routeId, [obj]);
        };
        VendorPaymentsEntity.CancelbyCurrentSystemDate = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "VendorPayments(" + obj.DocEntry + ")/CancelbyCurrentSystemDate", sessionId, routeId, [obj]);
        };
        return VendorPaymentsEntity;
    }());
    SAPB1.VendorPaymentsEntity = VendorPaymentsEntity;
    var LandedCostsCodesEntity = (function () {
        function LandedCostsCodesEntity() {
        }
        LandedCostsCodesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "LandedCostsCodes", sessionId, routeId, [obj]);
        };
        LandedCostsCodesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "LandedCostsCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        LandedCostsCodesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "LandedCostsCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        LandedCostsCodesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "LandedCostsCodes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return LandedCostsCodesEntity;
    }());
    SAPB1.LandedCostsCodesEntity = LandedCostsCodesEntity;
    var EmployeeTransfersEntity = (function () {
        function EmployeeTransfersEntity() {
        }
        EmployeeTransfersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "EmployeeTransfers", sessionId, routeId, [obj]);
        };
        EmployeeTransfersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "EmployeeTransfers(" + obj.TransferID + ")", sessionId, routeId, [obj]);
        };
        EmployeeTransfersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "EmployeeTransfers(" + obj.TransferID + ")", sessionId, routeId, [obj]);
        };
        EmployeeTransfersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "EmployeeTransfers(" + obj.TransferID + ")", sessionId, routeId, [obj]);
        };
        return EmployeeTransfersEntity;
    }());
    SAPB1.EmployeeTransfersEntity = EmployeeTransfersEntity;
    var ShippingTypesEntity = (function () {
        function ShippingTypesEntity() {
        }
        ShippingTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ShippingTypes", sessionId, routeId, [obj]);
        };
        ShippingTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ShippingTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ShippingTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ShippingTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        ShippingTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ShippingTypes(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return ShippingTypesEntity;
    }());
    SAPB1.ShippingTypesEntity = ShippingTypesEntity;
    var VatGroupsEntity = (function () {
        function VatGroupsEntity() {
        }
        VatGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "VatGroups", sessionId, routeId, [obj]);
        };
        VatGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "VatGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        VatGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "VatGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        VatGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "VatGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return VatGroupsEntity;
    }());
    SAPB1.VatGroupsEntity = VatGroupsEntity;
    var LengthMeasuresEntity = (function () {
        function LengthMeasuresEntity() {
        }
        LengthMeasuresEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "LengthMeasures", sessionId, routeId, [obj]);
        };
        LengthMeasuresEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "LengthMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        LengthMeasuresEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "LengthMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        LengthMeasuresEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "LengthMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        return LengthMeasuresEntity;
    }());
    SAPB1.LengthMeasuresEntity = LengthMeasuresEntity;
    var WeightMeasuresEntity = (function () {
        function WeightMeasuresEntity() {
        }
        WeightMeasuresEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WeightMeasures", sessionId, routeId, [obj]);
        };
        WeightMeasuresEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WeightMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        WeightMeasuresEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WeightMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        WeightMeasuresEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WeightMeasures(" + obj.UnitCode + ")", sessionId, routeId, [obj]);
        };
        return WeightMeasuresEntity;
    }());
    SAPB1.WeightMeasuresEntity = WeightMeasuresEntity;
    var ItemGroupsEntity = (function () {
        function ItemGroupsEntity() {
        }
        ItemGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ItemGroups", sessionId, routeId, [obj]);
        };
        ItemGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ItemGroups(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        ItemGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ItemGroups(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        ItemGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ItemGroups(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        return ItemGroupsEntity;
    }());
    SAPB1.ItemGroupsEntity = ItemGroupsEntity;
    var SalesPersonsEntity = (function () {
        function SalesPersonsEntity() {
        }
        SalesPersonsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesPersons", sessionId, routeId, [obj]);
        };
        SalesPersonsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesPersons(" + obj.SalesEmployeeCode + ")", sessionId, routeId, [obj]);
        };
        SalesPersonsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesPersons(" + obj.SalesEmployeeCode + ")", sessionId, routeId, [obj]);
        };
        SalesPersonsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesPersons(" + obj.SalesEmployeeCode + ")", sessionId, routeId, [obj]);
        };
        return SalesPersonsEntity;
    }());
    SAPB1.SalesPersonsEntity = SalesPersonsEntity;
    var DeductionTaxSubGroupsEntity = (function () {
        function DeductionTaxSubGroupsEntity() {
        }
        DeductionTaxSubGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DeductionTaxSubGroups", sessionId, routeId, [obj]);
        };
        DeductionTaxSubGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DeductionTaxSubGroups('" + obj.GroupCode + "')", sessionId, routeId, [obj]);
        };
        DeductionTaxSubGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DeductionTaxSubGroups('" + obj.GroupCode + "')", sessionId, routeId, [obj]);
        };
        DeductionTaxSubGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DeductionTaxSubGroups('" + obj.GroupCode + "')", sessionId, routeId, [obj]);
        };
        return DeductionTaxSubGroupsEntity;
    }());
    SAPB1.DeductionTaxSubGroupsEntity = DeductionTaxSubGroupsEntity;
    var TaxCodeDeterminationsEntity = (function () {
        function TaxCodeDeterminationsEntity() {
        }
        TaxCodeDeterminationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "TaxCodeDeterminations", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "TaxCodeDeterminations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "TaxCodeDeterminations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        TaxCodeDeterminationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "TaxCodeDeterminations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return TaxCodeDeterminationsEntity;
    }());
    SAPB1.TaxCodeDeterminationsEntity = TaxCodeDeterminationsEntity;
    var PurchaseQuotationsEntity = (function () {
        function PurchaseQuotationsEntity() {
        }
        PurchaseQuotationsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PurchaseQuotations", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PurchaseQuotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PurchaseQuotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PurchaseQuotations(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotations(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotations(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotations(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotations(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        PurchaseQuotationsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "PurchaseQuotations(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return PurchaseQuotationsEntity;
    }());
    SAPB1.PurchaseQuotationsEntity = PurchaseQuotationsEntity;
    var CostCenterTypesEntity = (function () {
        function CostCenterTypesEntity() {
        }
        CostCenterTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CostCenterTypes", sessionId, routeId, [obj]);
        };
        CostCenterTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CostCenterTypes('" + obj.CostCenterTypeCode + "')", sessionId, routeId, [obj]);
        };
        CostCenterTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CostCenterTypes('" + obj.CostCenterTypeCode + "')", sessionId, routeId, [obj]);
        };
        CostCenterTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CostCenterTypes('" + obj.CostCenterTypeCode + "')", sessionId, routeId, [obj]);
        };
        return CostCenterTypesEntity;
    }());
    SAPB1.CostCenterTypesEntity = CostCenterTypesEntity;
    var RecurringTransactionEntity = (function () {
        function RecurringTransactionEntity() {
        }
        RecurringTransactionEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "RecurringTransaction", sessionId, routeId, [obj]);
        };
        RecurringTransactionEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "RecurringTransaction(" + obj.TransactionID + ")", sessionId, routeId, [obj]);
        };
        RecurringTransactionEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "RecurringTransaction(" + obj.TransactionID + ")", sessionId, routeId, [obj]);
        };
        RecurringTransactionEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "RecurringTransaction(" + obj.TransactionID + ")", sessionId, routeId, [obj]);
        };
        return RecurringTransactionEntity;
    }());
    SAPB1.RecurringTransactionEntity = RecurringTransactionEntity;
    var AccrualTypesEntity = (function () {
        function AccrualTypesEntity() {
        }
        AccrualTypesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AccrualTypes", sessionId, routeId, [obj]);
        };
        AccrualTypesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AccrualTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AccrualTypesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AccrualTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        AccrualTypesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AccrualTypes('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return AccrualTypesEntity;
    }());
    SAPB1.AccrualTypesEntity = AccrualTypesEntity;
    var NFModelsEntity = (function () {
        function NFModelsEntity() {
        }
        NFModelsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "NFModels", sessionId, routeId, [obj]);
        };
        NFModelsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "NFModels('" + obj.AbsEntry + "')", sessionId, routeId, [obj]);
        };
        NFModelsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "NFModels('" + obj.AbsEntry + "')", sessionId, routeId, [obj]);
        };
        NFModelsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "NFModels('" + obj.AbsEntry + "')", sessionId, routeId, [obj]);
        };
        return NFModelsEntity;
    }());
    SAPB1.NFModelsEntity = NFModelsEntity;
    var BrazilStringIndexersEntity = (function () {
        function BrazilStringIndexersEntity() {
        }
        BrazilStringIndexersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BrazilStringIndexers", sessionId, routeId, [obj]);
        };
        BrazilStringIndexersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BrazilStringIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilStringIndexersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BrazilStringIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilStringIndexersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BrazilStringIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilStringIndexersEntity.GetIndexerTypeList = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BrazilStringIndexers(" + obj.ID + ")/GetIndexerTypeList", sessionId, routeId, [obj]);
        };
        return BrazilStringIndexersEntity;
    }());
    SAPB1.BrazilStringIndexersEntity = BrazilStringIndexersEntity;
    var BrazilNumericIndexersEntity = (function () {
        function BrazilNumericIndexersEntity() {
        }
        BrazilNumericIndexersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BrazilNumericIndexers", sessionId, routeId, [obj]);
        };
        BrazilNumericIndexersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BrazilNumericIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilNumericIndexersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BrazilNumericIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilNumericIndexersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BrazilNumericIndexers(" + obj.ID + ")", sessionId, routeId, [obj]);
        };
        BrazilNumericIndexersEntity.GetIndexerTypeList = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "BrazilNumericIndexers(" + obj.ID + ")/GetIndexerTypeList", sessionId, routeId, [obj]);
        };
        return BrazilNumericIndexersEntity;
    }());
    SAPB1.BrazilNumericIndexersEntity = BrazilNumericIndexersEntity;
    var BrazilFuelIndexersEntity = (function () {
        function BrazilFuelIndexersEntity() {
        }
        BrazilFuelIndexersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BrazilFuelIndexers", sessionId, routeId, [obj]);
        };
        BrazilFuelIndexersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BrazilFuelIndexers(" + obj.FuelID + ")", sessionId, routeId, [obj]);
        };
        BrazilFuelIndexersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BrazilFuelIndexers(" + obj.FuelID + ")", sessionId, routeId, [obj]);
        };
        BrazilFuelIndexersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BrazilFuelIndexers(" + obj.FuelID + ")", sessionId, routeId, [obj]);
        };
        return BrazilFuelIndexersEntity;
    }());
    SAPB1.BrazilFuelIndexersEntity = BrazilFuelIndexersEntity;
    var BrazilBeverageIndexersEntity = (function () {
        function BrazilBeverageIndexersEntity() {
        }
        BrazilBeverageIndexersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BrazilBeverageIndexers", sessionId, routeId, [obj]);
        };
        BrazilBeverageIndexersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BrazilBeverageIndexers(" + obj.BeverageID + ")", sessionId, routeId, [obj]);
        };
        BrazilBeverageIndexersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BrazilBeverageIndexers(" + obj.BeverageID + ")", sessionId, routeId, [obj]);
        };
        BrazilBeverageIndexersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BrazilBeverageIndexers(" + obj.BeverageID + ")", sessionId, routeId, [obj]);
        };
        return BrazilBeverageIndexersEntity;
    }());
    SAPB1.BrazilBeverageIndexersEntity = BrazilBeverageIndexersEntity;
    var LegalDataEntity = (function () {
        function LegalDataEntity() {
        }
        LegalDataEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "LegalData", sessionId, routeId, [obj]);
        };
        LegalDataEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "LegalData(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        LegalDataEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "LegalData(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        LegalDataEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "LegalData(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        return LegalDataEntity;
    }());
    SAPB1.LegalDataEntity = LegalDataEntity;
    var FiscalPrinterEntity = (function () {
        function FiscalPrinterEntity() {
        }
        FiscalPrinterEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "FiscalPrinter", sessionId, routeId, [obj]);
        };
        FiscalPrinterEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "FiscalPrinter('" + obj.EquipmentNo + "')", sessionId, routeId, [obj]);
        };
        FiscalPrinterEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "FiscalPrinter('" + obj.EquipmentNo + "')", sessionId, routeId, [obj]);
        };
        FiscalPrinterEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "FiscalPrinter('" + obj.EquipmentNo + "')", sessionId, routeId, [obj]);
        };
        return FiscalPrinterEntity;
    }());
    SAPB1.FiscalPrinterEntity = FiscalPrinterEntity;
    var CustomsGroupsEntity = (function () {
        function CustomsGroupsEntity() {
        }
        CustomsGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CustomsGroups", sessionId, routeId, [obj]);
        };
        CustomsGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CustomsGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        CustomsGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CustomsGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        CustomsGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CustomsGroups(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return CustomsGroupsEntity;
    }());
    SAPB1.CustomsGroupsEntity = CustomsGroupsEntity;
    var ChecksforPaymentEntity = (function () {
        function ChecksforPaymentEntity() {
        }
        ChecksforPaymentEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ChecksforPayment", sessionId, routeId, [obj]);
        };
        ChecksforPaymentEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ChecksforPayment(" + obj.CheckKey + ")", sessionId, routeId, [obj]);
        };
        ChecksforPaymentEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ChecksforPayment(" + obj.CheckKey + ")", sessionId, routeId, [obj]);
        };
        ChecksforPaymentEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ChecksforPayment(" + obj.CheckKey + ")", sessionId, routeId, [obj]);
        };
        return ChecksforPaymentEntity;
    }());
    SAPB1.ChecksforPaymentEntity = ChecksforPaymentEntity;
    var InventoryGenEntriesEntity = (function () {
        function InventoryGenEntriesEntity() {
        }
        InventoryGenEntriesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryGenEntries", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryGenEntries(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryGenEntries(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryGenEntries(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntries(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntries(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntries(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntries(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        InventoryGenEntriesEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenEntries(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return InventoryGenEntriesEntity;
    }());
    SAPB1.InventoryGenEntriesEntity = InventoryGenEntriesEntity;
    var PriceListsEntity = (function () {
        function PriceListsEntity() {
        }
        PriceListsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "PriceLists", sessionId, routeId, [obj]);
        };
        PriceListsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "PriceLists(" + obj.PriceListNo + ")", sessionId, routeId, [obj]);
        };
        PriceListsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "PriceLists(" + obj.PriceListNo + ")", sessionId, routeId, [obj]);
        };
        PriceListsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "PriceLists(" + obj.PriceListNo + ")", sessionId, routeId, [obj]);
        };
        return PriceListsEntity;
    }());
    SAPB1.PriceListsEntity = PriceListsEntity;
    var InventoryGenExitsEntity = (function () {
        function InventoryGenExitsEntity() {
        }
        InventoryGenExitsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "InventoryGenExits", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "InventoryGenExits(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "InventoryGenExits(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "InventoryGenExits(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExits(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExits(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.Reopen = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExits(" + obj.DocEntry + ")/Reopen", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExits(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        InventoryGenExitsEntity.CreateCancellationDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "InventoryGenExits(" + obj.DocEntry + ")/CreateCancellationDocument", sessionId, routeId, [obj]);
        };
        return InventoryGenExitsEntity;
    }());
    SAPB1.InventoryGenExitsEntity = InventoryGenExitsEntity;
    var ProfitCentersEntity = (function () {
        function ProfitCentersEntity() {
        }
        ProfitCentersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ProfitCenters", sessionId, routeId, [obj]);
        };
        ProfitCentersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ProfitCenters('" + obj.CenterCode + "')", sessionId, routeId, [obj]);
        };
        ProfitCentersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ProfitCenters('" + obj.CenterCode + "')", sessionId, routeId, [obj]);
        };
        ProfitCentersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ProfitCenters('" + obj.CenterCode + "')", sessionId, routeId, [obj]);
        };
        return ProfitCentersEntity;
    }());
    SAPB1.ProfitCentersEntity = ProfitCentersEntity;
    var DistributionRulesEntity = (function () {
        function DistributionRulesEntity() {
        }
        DistributionRulesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "DistributionRules", sessionId, routeId, [obj]);
        };
        DistributionRulesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "DistributionRules('" + obj.FactorCode + "')", sessionId, routeId, [obj]);
        };
        DistributionRulesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "DistributionRules('" + obj.FactorCode + "')", sessionId, routeId, [obj]);
        };
        DistributionRulesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "DistributionRules('" + obj.FactorCode + "')", sessionId, routeId, [obj]);
        };
        return DistributionRulesEntity;
    }());
    SAPB1.DistributionRulesEntity = DistributionRulesEntity;
    var ProjectsEntity = (function () {
        function ProjectsEntity() {
        }
        ProjectsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Projects", sessionId, routeId, [obj]);
        };
        ProjectsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Projects('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ProjectsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Projects('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        ProjectsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Projects('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return ProjectsEntity;
    }());
    SAPB1.ProjectsEntity = ProjectsEntity;
    var WarehousesEntity = (function () {
        function WarehousesEntity() {
        }
        WarehousesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Warehouses", sessionId, routeId, [obj]);
        };
        WarehousesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Warehouses('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        WarehousesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Warehouses('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        WarehousesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Warehouses('" + obj.WarehouseCode + "')", sessionId, routeId, [obj]);
        };
        return WarehousesEntity;
    }());
    SAPB1.WarehousesEntity = WarehousesEntity;
    var CommissionGroupsEntity = (function () {
        function CommissionGroupsEntity() {
        }
        CommissionGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CommissionGroups", sessionId, routeId, [obj]);
        };
        CommissionGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CommissionGroups(" + obj.CommissionGroupCode + ")", sessionId, routeId, [obj]);
        };
        CommissionGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CommissionGroups(" + obj.CommissionGroupCode + ")", sessionId, routeId, [obj]);
        };
        CommissionGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CommissionGroups(" + obj.CommissionGroupCode + ")", sessionId, routeId, [obj]);
        };
        return CommissionGroupsEntity;
    }());
    SAPB1.CommissionGroupsEntity = CommissionGroupsEntity;
    var ProductTreesEntity = (function () {
        function ProductTreesEntity() {
        }
        ProductTreesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ProductTrees", sessionId, routeId, [obj]);
        };
        ProductTreesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ProductTrees('" + obj.TreeCode + "')", sessionId, routeId, [obj]);
        };
        ProductTreesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ProductTrees('" + obj.TreeCode + "')", sessionId, routeId, [obj]);
        };
        ProductTreesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ProductTrees('" + obj.TreeCode + "')", sessionId, routeId, [obj]);
        };
        return ProductTreesEntity;
    }());
    SAPB1.ProductTreesEntity = ProductTreesEntity;
    var StockTransfersEntity = (function () {
        function StockTransfersEntity() {
        }
        StockTransfersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "StockTransfers", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "StockTransfers(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "StockTransfers(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "StockTransfers(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.Cancel = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransfers(" + obj.DocEntry + ")/Cancel", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransfers(" + obj.DocEntry + ")/Close", sessionId, routeId, [obj]);
        };
        StockTransfersEntity.SaveDraftToDocument = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "StockTransfers(" + obj.DocEntry + ")/SaveDraftToDocument", sessionId, routeId, [obj]);
        };
        return StockTransfersEntity;
    }());
    SAPB1.StockTransfersEntity = StockTransfersEntity;
    var WorkOrdersEntity = (function () {
        function WorkOrdersEntity() {
        }
        WorkOrdersEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "WorkOrders", sessionId, routeId, [obj]);
        };
        WorkOrdersEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "WorkOrders(" + obj.OrderNum + ")", sessionId, routeId, [obj]);
        };
        WorkOrdersEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "WorkOrders(" + obj.OrderNum + ")", sessionId, routeId, [obj]);
        };
        WorkOrdersEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "WorkOrders(" + obj.OrderNum + ")", sessionId, routeId, [obj]);
        };
        return WorkOrdersEntity;
    }());
    SAPB1.WorkOrdersEntity = WorkOrdersEntity;
    var LandedCostsEntity = (function () {
        function LandedCostsEntity() {
        }
        LandedCostsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "LandedCosts", sessionId, routeId, [obj]);
        };
        LandedCostsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "LandedCosts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        LandedCostsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "LandedCosts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        LandedCostsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "LandedCosts(" + obj.DocEntry + ")", sessionId, routeId, [obj]);
        };
        LandedCostsEntity.CloseLandedCost = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "LandedCosts(" + obj.DocEntry + ")/CloseLandedCost", sessionId, routeId, [obj]);
        };
        LandedCostsEntity.CancelLandedCost = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "LandedCosts(" + obj.DocEntry + ")/CancelLandedCost", sessionId, routeId, [obj]);
        };
        return LandedCostsEntity;
    }());
    SAPB1.LandedCostsEntity = LandedCostsEntity;
    var SpecialPricesEntity = (function () {
        function SpecialPricesEntity() {
        }
        SpecialPricesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SpecialPrices", sessionId, routeId, [obj]);
        };
        SpecialPricesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SpecialPrices('" + obj.ItemCode + "', '" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        SpecialPricesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SpecialPrices('" + obj.ItemCode + "', '" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        SpecialPricesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SpecialPrices('" + obj.ItemCode + "', '" + obj.CardCode + "')", sessionId, routeId, [obj]);
        };
        return SpecialPricesEntity;
    }());
    SAPB1.SpecialPricesEntity = SpecialPricesEntity;
    var CreditPaymentMethodsEntity = (function () {
        function CreditPaymentMethodsEntity() {
        }
        CreditPaymentMethodsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CreditPaymentMethods", sessionId, routeId, [obj]);
        };
        CreditPaymentMethodsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CreditPaymentMethods(" + obj.PaymentMethodCode + ")", sessionId, routeId, [obj]);
        };
        CreditPaymentMethodsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CreditPaymentMethods(" + obj.PaymentMethodCode + ")", sessionId, routeId, [obj]);
        };
        CreditPaymentMethodsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CreditPaymentMethods(" + obj.PaymentMethodCode + ")", sessionId, routeId, [obj]);
        };
        return CreditPaymentMethodsEntity;
    }());
    SAPB1.CreditPaymentMethodsEntity = CreditPaymentMethodsEntity;
    var CreditCardPaymentsEntity = (function () {
        function CreditCardPaymentsEntity() {
        }
        CreditCardPaymentsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "CreditCardPayments", sessionId, routeId, [obj]);
        };
        CreditCardPaymentsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "CreditCardPayments('" + obj.DueDateCode + "')", sessionId, routeId, [obj]);
        };
        CreditCardPaymentsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "CreditCardPayments('" + obj.DueDateCode + "')", sessionId, routeId, [obj]);
        };
        CreditCardPaymentsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "CreditCardPayments('" + obj.DueDateCode + "')", sessionId, routeId, [obj]);
        };
        return CreditCardPaymentsEntity;
    }());
    SAPB1.CreditCardPaymentsEntity = CreditCardPaymentsEntity;
    var AlternateCatNumEntity = (function () {
        function AlternateCatNumEntity() {
        }
        AlternateCatNumEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AlternateCatNum", sessionId, routeId, [obj]);
        };
        AlternateCatNumEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AlternateCatNum('" + obj.ItemCode + "', '" + obj.CardCode + "', '" + obj.Substitute + "')", sessionId, routeId, [obj]);
        };
        AlternateCatNumEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AlternateCatNum('" + obj.ItemCode + "', '" + obj.CardCode + "', '" + obj.Substitute + "')", sessionId, routeId, [obj]);
        };
        AlternateCatNumEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AlternateCatNum('" + obj.ItemCode + "', '" + obj.CardCode + "', '" + obj.Substitute + "')", sessionId, routeId, [obj]);
        };
        return AlternateCatNumEntity;
    }());
    SAPB1.AlternateCatNumEntity = AlternateCatNumEntity;
    var BudgetsEntity = (function () {
        function BudgetsEntity() {
        }
        BudgetsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Budgets", sessionId, routeId, [obj]);
        };
        BudgetsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Budgets(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        BudgetsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Budgets(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        BudgetsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Budgets(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return BudgetsEntity;
    }());
    SAPB1.BudgetsEntity = BudgetsEntity;
    var BudgetDistributionsEntity = (function () {
        function BudgetDistributionsEntity() {
        }
        BudgetDistributionsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BudgetDistributions", sessionId, routeId, [obj]);
        };
        BudgetDistributionsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BudgetDistributions(" + obj.DivisionCode + ")", sessionId, routeId, [obj]);
        };
        BudgetDistributionsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BudgetDistributions(" + obj.DivisionCode + ")", sessionId, routeId, [obj]);
        };
        BudgetDistributionsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BudgetDistributions(" + obj.DivisionCode + ")", sessionId, routeId, [obj]);
        };
        return BudgetDistributionsEntity;
    }());
    SAPB1.BudgetDistributionsEntity = BudgetDistributionsEntity;
    var ItemPropertiesEntity = (function () {
        function ItemPropertiesEntity() {
        }
        ItemPropertiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ItemProperties", sessionId, routeId, [obj]);
        };
        ItemPropertiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ItemProperties(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        ItemPropertiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ItemProperties(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        ItemPropertiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ItemProperties(" + obj.Number + ")", sessionId, routeId, [obj]);
        };
        return ItemPropertiesEntity;
    }());
    SAPB1.ItemPropertiesEntity = ItemPropertiesEntity;
    var AlertManagementsEntity = (function () {
        function AlertManagementsEntity() {
        }
        AlertManagementsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "AlertManagements", sessionId, routeId, [obj]);
        };
        AlertManagementsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "AlertManagements(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        AlertManagementsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "AlertManagements(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        AlertManagementsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "AlertManagements(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        AlertManagementsEntity.GetAlertManagementList = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "AlertManagements(" + obj.Code + ")/GetAlertManagementList", sessionId, routeId, [obj]);
        };
        return AlertManagementsEntity;
    }());
    SAPB1.AlertManagementsEntity = AlertManagementsEntity;
    var MessagesEntity = (function () {
        function MessagesEntity() {
        }
        MessagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "Messages", sessionId, routeId, [obj]);
        };
        MessagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "Messages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        MessagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "Messages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        MessagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "Messages(" + obj.Code + ")", sessionId, routeId, [obj]);
        };
        return MessagesEntity;
    }());
    SAPB1.MessagesEntity = MessagesEntity;
    var BudgetScenariosEntity = (function () {
        function BudgetScenariosEntity() {
        }
        BudgetScenariosEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "BudgetScenarios", sessionId, routeId, [obj]);
        };
        BudgetScenariosEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "BudgetScenarios(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        BudgetScenariosEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "BudgetScenarios(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        BudgetScenariosEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "BudgetScenarios(" + obj.Numerator + ")", sessionId, routeId, [obj]);
        };
        return BudgetScenariosEntity;
    }());
    SAPB1.BudgetScenariosEntity = BudgetScenariosEntity;
    var UserDefaultGroupsEntity = (function () {
        function UserDefaultGroupsEntity() {
        }
        UserDefaultGroupsEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "UserDefaultGroups", sessionId, routeId, [obj]);
        };
        UserDefaultGroupsEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "UserDefaultGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        UserDefaultGroupsEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "UserDefaultGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        UserDefaultGroupsEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "UserDefaultGroups('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return UserDefaultGroupsEntity;
    }());
    SAPB1.UserDefaultGroupsEntity = UserDefaultGroupsEntity;
    var SalesOpportunitiesEntity = (function () {
        function SalesOpportunitiesEntity() {
        }
        SalesOpportunitiesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesOpportunities", sessionId, routeId, [obj]);
        };
        SalesOpportunitiesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesOpportunities(" + obj.SequentialNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunitiesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesOpportunities(" + obj.SequentialNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunitiesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesOpportunities(" + obj.SequentialNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunitiesEntity.Close = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ACTION, "SalesOpportunities(" + obj.SequentialNo + ")/Close", sessionId, routeId, [obj]);
        };
        return SalesOpportunitiesEntity;
    }());
    SAPB1.SalesOpportunitiesEntity = SalesOpportunitiesEntity;
    var SalesOpportunityInterestsSetupEntity = (function () {
        function SalesOpportunityInterestsSetupEntity() {
        }
        SalesOpportunityInterestsSetupEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "SalesOpportunityInterestsSetup", sessionId, routeId, [obj]);
        };
        SalesOpportunityInterestsSetupEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "SalesOpportunityInterestsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityInterestsSetupEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "SalesOpportunityInterestsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        SalesOpportunityInterestsSetupEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "SalesOpportunityInterestsSetup(" + obj.SequenceNo + ")", sessionId, routeId, [obj]);
        };
        return SalesOpportunityInterestsSetupEntity;
    }());
    SAPB1.SalesOpportunityInterestsSetupEntity = SalesOpportunityInterestsSetupEntity;
    var U_ATTACHMENTSEntity = (function () {
        function U_ATTACHMENTSEntity() {
        }
        U_ATTACHMENTSEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_ATTACHMENTS", sessionId, routeId, [obj]);
        };
        U_ATTACHMENTSEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_ATTACHMENTS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_ATTACHMENTSEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_ATTACHMENTS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_ATTACHMENTSEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_ATTACHMENTS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_ATTACHMENTSEntity;
    }());
    SAPB1.U_ATTACHMENTSEntity = U_ATTACHMENTSEntity;
    var U_BXPAUDITEntity = (function () {
        function U_BXPAUDITEntity() {
        }
        U_BXPAUDITEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPAUDIT", sessionId, routeId, [obj]);
        };
        U_BXPAUDITEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPAUDIT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPAUDITEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPAUDIT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPAUDITEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPAUDIT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPAUDITEntity;
    }());
    SAPB1.U_BXPAUDITEntity = U_BXPAUDITEntity;
    var U_BXPCONFIGEntity = (function () {
        function U_BXPCONFIGEntity() {
        }
        U_BXPCONFIGEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPCONFIG", sessionId, routeId, [obj]);
        };
        U_BXPCONFIGEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPCONFIG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCONFIGEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPCONFIG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCONFIGEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPCONFIG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPCONFIGEntity;
    }());
    SAPB1.U_BXPCONFIGEntity = U_BXPCONFIGEntity;
    var U_BXPCTRLPREFSEntity = (function () {
        function U_BXPCTRLPREFSEntity() {
        }
        U_BXPCTRLPREFSEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPCTRLPREFS", sessionId, routeId, [obj]);
        };
        U_BXPCTRLPREFSEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPCTRLPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCTRLPREFSEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPCTRLPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCTRLPREFSEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPCTRLPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPCTRLPREFSEntity;
    }());
    SAPB1.U_BXPCTRLPREFSEntity = U_BXPCTRLPREFSEntity;
    var U_BXPCUSTFDEntity = (function () {
        function U_BXPCUSTFDEntity() {
        }
        U_BXPCUSTFDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPCUSTFD", sessionId, routeId, [obj]);
        };
        U_BXPCUSTFDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPCUSTFD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCUSTFDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPCUSTFD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCUSTFDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPCUSTFD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPCUSTFDEntity;
    }());
    SAPB1.U_BXPCUSTFDEntity = U_BXPCUSTFDEntity;
    var U_BXPCUSTSORTDEFEntity = (function () {
        function U_BXPCUSTSORTDEFEntity() {
        }
        U_BXPCUSTSORTDEFEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPCUSTSORTDEF", sessionId, routeId, [obj]);
        };
        U_BXPCUSTSORTDEFEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPCUSTSORTDEF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCUSTSORTDEFEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPCUSTSORTDEF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPCUSTSORTDEFEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPCUSTSORTDEF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPCUSTSORTDEFEntity;
    }());
    SAPB1.U_BXPCUSTSORTDEFEntity = U_BXPCUSTSORTDEFEntity;
    var U_BXPFORMPREFSEntity = (function () {
        function U_BXPFORMPREFSEntity() {
        }
        U_BXPFORMPREFSEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPFORMPREFS", sessionId, routeId, [obj]);
        };
        U_BXPFORMPREFSEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPFORMPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPFORMPREFSEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPFORMPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPFORMPREFSEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPFORMPREFS('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPFORMPREFSEntity;
    }());
    SAPB1.U_BXPFORMPREFSEntity = U_BXPFORMPREFSEntity;
    var U_BXPLICFEATEntity = (function () {
        function U_BXPLICFEATEntity() {
        }
        U_BXPLICFEATEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLICFEAT", sessionId, routeId, [obj]);
        };
        U_BXPLICFEATEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLICFEAT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICFEATEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLICFEAT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICFEATEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLICFEAT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLICFEATEntity;
    }());
    SAPB1.U_BXPLICFEATEntity = U_BXPLICFEATEntity;
    var U_BXPLICIPEntity = (function () {
        function U_BXPLICIPEntity() {
        }
        U_BXPLICIPEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLICIP", sessionId, routeId, [obj]);
        };
        U_BXPLICIPEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLICIP('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICIPEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLICIP('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICIPEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLICIP('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLICIPEntity;
    }());
    SAPB1.U_BXPLICIPEntity = U_BXPLICIPEntity;
    var U_BXPLICSETEntity = (function () {
        function U_BXPLICSETEntity() {
        }
        U_BXPLICSETEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLICSET", sessionId, routeId, [obj]);
        };
        U_BXPLICSETEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLICSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICSETEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLICSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICSETEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLICSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLICSETEntity;
    }());
    SAPB1.U_BXPLICSETEntity = U_BXPLICSETEntity;
    var U_BXPLICTEREntity = (function () {
        function U_BXPLICTEREntity() {
        }
        U_BXPLICTEREntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLICTER", sessionId, routeId, [obj]);
        };
        U_BXPLICTEREntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLICTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICTEREntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLICTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLICTEREntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLICTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLICTEREntity;
    }());
    SAPB1.U_BXPLICTEREntity = U_BXPLICTEREntity;
    var U_BXPLMSEMPPRINTEREntity = (function () {
        function U_BXPLMSEMPPRINTEREntity() {
        }
        U_BXPLMSEMPPRINTEREntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSEMPPRINTER", sessionId, routeId, [obj]);
        };
        U_BXPLMSEMPPRINTEREntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSEMPPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSEMPPRINTEREntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSEMPPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSEMPPRINTEREntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSEMPPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSEMPPRINTEREntity;
    }());
    SAPB1.U_BXPLMSEMPPRINTEREntity = U_BXPLMSEMPPRINTEREntity;
    var U_BXPLMSMOBINVCOUNTEntity = (function () {
        function U_BXPLMSMOBINVCOUNTEntity() {
        }
        U_BXPLMSMOBINVCOUNTEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBINVCOUNT", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBINVCOUNTEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBINVCOUNT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBINVCOUNTEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBINVCOUNT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBINVCOUNTEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBINVCOUNT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBINVCOUNTEntity;
    }());
    SAPB1.U_BXPLMSMOBINVCOUNTEntity = U_BXPLMSMOBINVCOUNTEntity;
    var U_BXPLMSMOBLOGEntity = (function () {
        function U_BXPLMSMOBLOGEntity() {
        }
        U_BXPLMSMOBLOGEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBLOG", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBLOGEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBLOGEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBLOGEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBLOGEntity;
    }());
    SAPB1.U_BXPLMSMOBLOGEntity = U_BXPLMSMOBLOGEntity;
    var U_BXPLMSMOBPICKEntity = (function () {
        function U_BXPLMSMOBPICKEntity() {
        }
        U_BXPLMSMOBPICKEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBPICK", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBPICKEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBPICK('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBPICKEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBPICK('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBPICKEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBPICK('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBPICKEntity;
    }());
    SAPB1.U_BXPLMSMOBPICKEntity = U_BXPLMSMOBPICKEntity;
    var U_BXPLMSMOBTENEntity = (function () {
        function U_BXPLMSMOBTENEntity() {
        }
        U_BXPLMSMOBTENEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBTEN", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTENEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBTEN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTENEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBTEN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTENEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBTEN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBTENEntity;
    }());
    SAPB1.U_BXPLMSMOBTENEntity = U_BXPLMSMOBTENEntity;
    var U_BXPLMSMOBTHDEntity = (function () {
        function U_BXPLMSMOBTHDEntity() {
        }
        U_BXPLMSMOBTHDEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBTHD", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTHDEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBTHD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTHDEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBTHD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTHDEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBTHD('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBTHDEntity;
    }());
    SAPB1.U_BXPLMSMOBTHDEntity = U_BXPLMSMOBTHDEntity;
    var U_BXPLMSMOBTLNEntity = (function () {
        function U_BXPLMSMOBTLNEntity() {
        }
        U_BXPLMSMOBTLNEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSMOBTLN", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTLNEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSMOBTLN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTLNEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSMOBTLN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSMOBTLNEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSMOBTLN('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSMOBTLNEntity;
    }());
    SAPB1.U_BXPLMSMOBTLNEntity = U_BXPLMSMOBTLNEntity;
    var U_BXPLMSPRINTEREntity = (function () {
        function U_BXPLMSPRINTEREntity() {
        }
        U_BXPLMSPRINTEREntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSPRINTER", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTEREntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTEREntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTEREntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSPRINTER('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSPRINTEREntity;
    }());
    SAPB1.U_BXPLMSPRINTEREntity = U_BXPLMSPRINTEREntity;
    var U_BXPLMSPRINTLAYOUTEntity = (function () {
        function U_BXPLMSPRINTLAYOUTEntity() {
        }
        U_BXPLMSPRINTLAYOUTEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSPRINTLAYOUT", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYOUTEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSPRINTLAYOUT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYOUTEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSPRINTLAYOUT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYOUTEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSPRINTLAYOUT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSPRINTLAYOUTEntity;
    }());
    SAPB1.U_BXPLMSPRINTLAYOUTEntity = U_BXPLMSPRINTLAYOUTEntity;
    var U_BXPLMSPRINTLAYSETEntity = (function () {
        function U_BXPLMSPRINTLAYSETEntity() {
        }
        U_BXPLMSPRINTLAYSETEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSPRINTLAYSET", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYSETEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSPRINTLAYSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYSETEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSPRINTLAYSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSPRINTLAYSETEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSPRINTLAYSET('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSPRINTLAYSETEntity;
    }());
    SAPB1.U_BXPLMSPRINTLAYSETEntity = U_BXPLMSPRINTLAYSETEntity;
    var U_BXPLMSUSRPREFEntity = (function () {
        function U_BXPLMSUSRPREFEntity() {
        }
        U_BXPLMSUSRPREFEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLMSUSRPREF", sessionId, routeId, [obj]);
        };
        U_BXPLMSUSRPREFEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLMSUSRPREF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSUSRPREFEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLMSUSRPREF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLMSUSRPREFEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLMSUSRPREF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLMSUSRPREFEntity;
    }());
    SAPB1.U_BXPLMSUSRPREFEntity = U_BXPLMSUSRPREFEntity;
    var U_BXPLOGEntity = (function () {
        function U_BXPLOGEntity() {
        }
        U_BXPLOGEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPLOG", sessionId, routeId, [obj]);
        };
        U_BXPLOGEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLOGEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPLOGEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPLOG('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPLOGEntity;
    }());
    SAPB1.U_BXPLOGEntity = U_BXPLOGEntity;
    var U_BXPREPORTEntity = (function () {
        function U_BXPREPORTEntity() {
        }
        U_BXPREPORTEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPREPORT", sessionId, routeId, [obj]);
        };
        U_BXPREPORTEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPREPORT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPREPORTEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPREPORT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPREPORTEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPREPORT('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPREPORTEntity;
    }());
    SAPB1.U_BXPREPORTEntity = U_BXPREPORTEntity;
    var U_BXPRPTPFEntity = (function () {
        function U_BXPRPTPFEntity() {
        }
        U_BXPRPTPFEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPRPTPF", sessionId, routeId, [obj]);
        };
        U_BXPRPTPFEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPRPTPF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPRPTPFEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPRPTPF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPRPTPFEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPRPTPF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPRPTPFEntity;
    }());
    SAPB1.U_BXPRPTPFEntity = U_BXPRPTPFEntity;
    var U_BXPRPTTPEntity = (function () {
        function U_BXPRPTTPEntity() {
        }
        U_BXPRPTTPEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPRPTTP", sessionId, routeId, [obj]);
        };
        U_BXPRPTTPEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPRPTTP('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        U_BXPRPTTPEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPRPTTP('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        U_BXPRPTTPEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPRPTTP('" + obj.TypeCode + "')", sessionId, routeId, [obj]);
        };
        return U_BXPRPTTPEntity;
    }());
    SAPB1.U_BXPRPTTPEntity = U_BXPRPTTPEntity;
    var U_BXPSEQUENCEEntity = (function () {
        function U_BXPSEQUENCEEntity() {
        }
        U_BXPSEQUENCEEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPSEQUENCE", sessionId, routeId, [obj]);
        };
        U_BXPSEQUENCEEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPSEQUENCE('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSEQUENCEEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPSEQUENCE('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSEQUENCEEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPSEQUENCE('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPSEQUENCEEntity;
    }());
    SAPB1.U_BXPSEQUENCEEntity = U_BXPSEQUENCEEntity;
    var U_BXPSYNCOBJCEntity = (function () {
        function U_BXPSYNCOBJCEntity() {
        }
        U_BXPSYNCOBJCEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPSYNCOBJC", sessionId, routeId, [obj]);
        };
        U_BXPSYNCOBJCEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPSYNCOBJC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSYNCOBJCEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPSYNCOBJC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSYNCOBJCEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPSYNCOBJC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPSYNCOBJCEntity;
    }());
    SAPB1.U_BXPSYNCOBJCEntity = U_BXPSYNCOBJCEntity;
    var U_BXPSYNCQEntity = (function () {
        function U_BXPSYNCQEntity() {
        }
        U_BXPSYNCQEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPSYNCQ", sessionId, routeId, [obj]);
        };
        U_BXPSYNCQEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPSYNCQ('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSYNCQEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPSYNCQ('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPSYNCQEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPSYNCQ('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPSYNCQEntity;
    }());
    SAPB1.U_BXPSYNCQEntity = U_BXPSYNCQEntity;
    var U_BXPTCCONFEntity = (function () {
        function U_BXPTCCONFEntity() {
        }
        U_BXPTCCONFEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPTCCONF", sessionId, routeId, [obj]);
        };
        U_BXPTCCONFEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPTCCONF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPTCCONFEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPTCCONF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPTCCONFEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPTCCONF('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPTCCONFEntity;
    }());
    SAPB1.U_BXPTCCONFEntity = U_BXPTCCONFEntity;
    var U_BXPTRANCUSTEntity = (function () {
        function U_BXPTRANCUSTEntity() {
        }
        U_BXPTRANCUSTEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPTRANCUST", sessionId, routeId, [obj]);
        };
        U_BXPTRANCUSTEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPTRANCUST('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPTRANCUSTEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPTRANCUST('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPTRANCUSTEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPTRANCUST('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPTRANCUSTEntity;
    }());
    SAPB1.U_BXPTRANCUSTEntity = U_BXPTRANCUSTEntity;
    var U_BXPUSRLCEntity = (function () {
        function U_BXPUSRLCEntity() {
        }
        U_BXPUSRLCEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "U_BXPUSRLC", sessionId, routeId, [obj]);
        };
        U_BXPUSRLCEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "U_BXPUSRLC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPUSRLCEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "U_BXPUSRLC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        U_BXPUSRLCEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "U_BXPUSRLC('" + obj.Code + "')", sessionId, routeId, [obj]);
        };
        return U_BXPUSRLCEntity;
    }());
    SAPB1.U_BXPUSRLCEntity = U_BXPUSRLCEntity;
    var ItemImagesEntity = (function () {
        function ItemImagesEntity() {
        }
        ItemImagesEntity.Add = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.ADD, "ItemImages", sessionId, routeId, [obj]);
        };
        ItemImagesEntity.Update = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.UPDATE, "ItemImages('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        ItemImagesEntity.Delete = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.DELETE, "ItemImages('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        ItemImagesEntity.Get = function (obj, sessionId, routeId) {
            callSL(B1ObjActionEnum.GET, "ItemImages('" + obj.ItemCode + "')", sessionId, routeId, [obj]);
        };
        return ItemImagesEntity;
    }());
    SAPB1.ItemImagesEntity = ItemImagesEntity;
})(SAPB1 || (SAPB1 = {}));
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/B1SLReference.js.map

/***/ },

/***/ 265:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rxjs_operators__ = __webpack_require__(693);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__rxjs_operators___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__rxjs_operators__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__B1SLReference__ = __webpack_require__(264);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return B1SLSessionService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var B1SLSessionService = (function () {
    function B1SLSessionService(http, sessionSt) {
        this.http = http;
        this.sessionSt = sessionSt;
        this._B1SLurl = 'https://hanab1.consensusintl.net:50000';
    }
    B1SLSessionService.prototype.doLogin = function (LoginInfo) {
        console.log('Calling B1SL Login');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.post(this._B1SLurl + '/b1s/v1/Login', LoginInfo, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.doLogout = function (sessionID) {
        console.log('Calling B1SL Logout');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.post(this._B1SLurl + '/b1s/v1/Logout', null, options)
            .map(function (response) { return response.json(); })
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getOrders = function (paramObject) {
        console.log('Calling B1SL getOrders');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.get(this._B1SLurl + '/b1s/v1/Orders?$select=DocEntry,DocNum,DocDate,DocTotal,NumAtCard,Address2,CardCode,CardName,BusinessPartner/Phone1&$expand=BusinessPartner&$orderby=DocEntry desc&$inlinecount=allpages', options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getNextOrders = function (nextLink) {
        console.log('Calling B1SL getOrders');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.get(this._B1SLurl + nextLink, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getPrevOrders = function (prevLink) {
        console.log('Calling B1SL getOrders');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.get(this._B1SLurl + prevLink, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getOrderDetail = function (docEntry) {
        console.log('Calling B1SL getOrderDetail');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        var orderEntry = new __WEBPACK_IMPORTED_MODULE_5__B1SLReference__["a" /* SAPB1 */].DocumentKey();
        orderEntry.DocEntry = docEntry;
        var slcall;
        slcall = __WEBPACK_IMPORTED_MODULE_5__B1SLReference__["a" /* SAPB1 */].OrdersEntity.Get(orderEntry, '', '');
        return this.http.get(this._B1SLurl + '/b1s/v1/' + slcall._endpoint + "?$select=DocNum,DocTotal,DocumentLines,EmployeeInfo/FirstName,EmployeeInfo/OfficePhone,EmployeeInfo/eMail,EmployeeInfo/Picture&$expand=EmployeeInfo", options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getOrdersByBP = function (BPFilter) {
        console.log('Calling B1SL getOrders');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        return this.http.get(this._B1SLurl + "/b1s/v1/BusinessPartners('" + BPFilter + "')/Orders?$select=DocEntry,DocNum,DocDate,DocTotal,NumAtCard,Address2,CardCode,CardName,BusinessPartner/Phone1&$expand=BusinessPartner&$orderby=DocEntry desc", options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.getBPs = function (paramObject) {
        console.log('Calling B1SL getBPs');
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/x-www-form-urlencoded' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        options.withCredentials = true;
        var qString = '';
        qString = paramObject === '' ? '/b1s/v1/BusinessPartners?$select=CardCode,CardName&$orderby=CardName asc&$inlinecount=allpages' : paramObject;
        return this.http.get(this._B1SLurl + qString, options)
            .map(this.extractData)
            .catch(this.handleError);
    };
    B1SLSessionService.prototype.extractData = function (res) {
        var body = res.json();
        return body || {};
    };
    B1SLSessionService.prototype.handleError = function (error) {
        // In a real world app, we might use a remote logging infrastructure
        var errMsg;
        console.error(errMsg);
        if (error instanceof __WEBPACK_IMPORTED_MODULE_1__angular_http__["d" /* Response */]) {
            var body = error.json() || '';
            var err = body.error || JSON.stringify(body);
            errMsg = error.status + " - " + (error.statusText || '') + " " + err;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(errMsg);
        return __WEBPACK_IMPORTED_MODULE_2_rxjs__["Observable"].throw(errMsg);
    };
    B1SLSessionService = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */]) === 'function' && _a) || Object, (typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorageService"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorageService"]) === 'function' && _b) || Object])
    ], B1SLSessionService);
    return B1SLSessionService;
    var _a, _b;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/B1SLSessionService.js.map

/***/ },

/***/ 406:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_helpers__ = __webpack_require__(407);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return AppComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var AppComponent = (function () {
    function AppComponent() {
    }
    AppComponent.prototype.ngAfterViewInit = function () {
        // Run correctHeight function on load and resize window event
        jQuery(window).bind('load resize', function () {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__app_helpers__["a" /* correctHeight */])();
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__app_helpers__["b" /* detectBody */])();
        });
        // Correct height of wrapper after metisMenu animation.
        jQuery('.metismenu a').click(function () {
            setTimeout(function () {
                __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__app_helpers__["a" /* correctHeight */])();
            }, 300);
        });
    };
    AppComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(930),
            styles: [__webpack_require__(922)]
        }), 
        __metadata('design:paramtypes', [])
    ], AppComponent);
    return AppComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/app.component.js.map

/***/ },

/***/ 407:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ exports["a"] = correctHeight;
/* harmony export (immutable) */ exports["b"] = detectBody;
/* harmony export (immutable) */ exports["c"] = smoothlyMenu;
/*
 * Inspinia js helpers:
 *
 * correctHeight() - fix the height of main wrapper
 * detectBody() - detect windows size
 * smoothlyMenu() - add smooth fade in/out on navigation show/ide
 *
 */
function correctHeight() {
    /*
      var pageWrapper = jQuery('#page-wrapper');
      var navbarHeigh = jQuery('nav.navbar-default').height();
      var wrapperHeigh = pageWrapper.height();
    
      if (navbarHeigh > wrapperHeigh) {
        pageWrapper.css("min-height", navbarHeigh + "px");
      }
    
      if (navbarHeigh < wrapperHeigh) {
        if (navbarHeigh < jQuery(window).height()) {
          pageWrapper.css("min-height", jQuery(window).height() + "px");
        } else {
          pageWrapper.css("min-height", navbarHeigh + "px");
        }
      }
    
      if (jQuery('body').hasClass('fixed-nav')) {
        if (navbarHeigh > wrapperHeigh) {
          pageWrapper.css("min-height", navbarHeigh + "px");
        } else {
          pageWrapper.css("min-height", jQuery(window).height() - 60 + "px");
        }
      }
      */
}
function detectBody() {
    if (jQuery(document).width() < 769) {
        jQuery('body').addClass('body-small');
    }
    else {
        jQuery('body').removeClass('body-small');
    }
}
function smoothlyMenu() {
    if (!jQuery('body').hasClass('mini-navbar') || jQuery('body').hasClass('body-small')) {
        // Hide menu in order to smoothly turn on when maximize menu
        jQuery('#side-menu').hide();
        // For smoothly turn on menu
        setTimeout(function () {
            jQuery('#side-menu').fadeIn(400);
        }, 200);
    }
    else if (jQuery('body').hasClass('fixed-sidebar')) {
        jQuery('#side-menu').hide();
        setTimeout(function () {
            jQuery('#side-menu').fadeIn(400);
        }, 100);
    }
    else {
        // Remove all inline style from jquery fadeIn function to reset menu state
        jQuery('#side-menu').removeAttr('style');
    }
}
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/app.helpers.js.map

/***/ },

/***/ 408:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__crud_component__ = __webpack_require__(680);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pipes_keyValues__ = __webpack_require__(692);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return CrudModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var CrudModule = (function () {
    function CrudModule() {
    }
    CrudModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__crud_component__["a" /* CrudComponent */], __WEBPACK_IMPORTED_MODULE_3__pipes_keyValues__["a" /* KeysPipe */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            exports: [__WEBPACK_IMPORTED_MODULE_2__crud_component__["a" /* CrudComponent */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }]
        }), 
        __metadata('design:paramtypes', [])
    ], CrudModule);
    return CrudModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/crud.module.js.map

/***/ },

/***/ 409:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return AbilityService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var AbilityService = (function () {
    function AbilityService(http) {
        this.http = http;
        this.endpoint_url = "http://localhost:3000/api/ability";
        this.http = http;
    }
    AbilityService.prototype.listAbility = function () {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    AbilityService = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */]) === 'function' && _a) || Object])
    ], AbilityService);
    return AbilityService;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/ability.service.js.map

/***/ },

/***/ 410:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_map__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return LoginService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var LoginService = (function () {
    function LoginService(http) {
        this.http = http;
        this.endpoint_url = "http://localhost:3000/api/login";
        this.http = http;
    }
    LoginService.prototype.login = function (email, password) {
        return this.http.get(this.endpoint_url + "?email=" + email + "&password=" + password).map(function (res) { return res.json(); });
    };
    LoginService = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */]) === 'function' && _a) || Object])
    ], LoginService);
    return LoginService;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/login.service.js.map

/***/ },

/***/ 411:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__ = __webpack_require__(201);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_map__);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProjectService; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var ProjectService = (function () {
    function ProjectService(http) {
        this.http = http;
        this.endpoint_url = "http://localhost:3000/api/";
        this.http = http;
    }
    ProjectService.prototype.createProject = function (ProjectForm) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.post(this.endpoint_url + "project/createProject", ProjectForm, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService.prototype.createEpic = function (id_project, nameEpic) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.post(this.endpoint_url + "epic", { idProject: id_project, name: nameEpic }, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService.prototype.createFeature = function (id_epic, nameFeature) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.post(this.endpoint_url + "feature", { idEpic: id_epic, name: nameFeature }, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService.prototype.listProjects = function () {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url + "project", options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService.prototype.getProject = function (id) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url + "project" + "/" + id, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService.prototype.getCompleteProject = function (id) {
        var headers = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["a" /* Headers */]({ 'Content-Type': 'application/json' });
        var options = new __WEBPACK_IMPORTED_MODULE_1__angular_http__["b" /* RequestOptions */]({ headers: headers });
        return this.http.get(this.endpoint_url + "project" + "/getCompleteProject?idProject=" + id, options)
            .map(function (res) { return res.json(); })
            .catch(function (error) { return __WEBPACK_IMPORTED_MODULE_2_rxjs_Rx__["Observable"].throw(error.json().error || 'Server error'); });
    };
    ProjectService = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Injectable"])(), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_http__["c" /* Http */]) === 'function' && _a) || Object])
    ], ProjectService);
    return ProjectService;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/project.service.js.map

/***/ },

/***/ 412:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_user_service__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_ability_service__ = __webpack_require__(409);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return AbilityComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};




var AbilityComponent = (function () {
    function AbilityComponent(fb, _userService, _abilityService) {
        this._userService = _userService;
        this._abilityService = _abilityService;
        this.projectForm = fb.group({});
        this.users = [];
        this.abilities = [];
        this.updateList();
    }
    AbilityComponent.prototype.updateList = function () {
        var _this = this;
        this._userService.listUsers().subscribe(function (data) {
            _this.users = data;
        }, function (error) {
            toastr.error(error, 'Error');
        });
        this._abilityService.listAbility().subscribe(function (data) {
            _this.abilities = data;
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    AbilityComponent.prototype.assignAbility = function () {
        this._userService.assignAbility(this.user, this.ability).subscribe(function (data) {
            toastr.success("Asignado correctamente", 'OK');
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    AbilityComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'abilityView',
            template: __webpack_require__(935),
            providers: [__WEBPACK_IMPORTED_MODULE_2__services_user_service__["a" /* UserService */]]
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object, (typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2__services_user_service__["a" /* UserService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__services_user_service__["a" /* UserService */]) === 'function' && _b) || Object, (typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__services_ability_service__["a" /* AbilityService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__services_ability_service__["a" /* AbilityService */]) === 'function' && _c) || Object])
    ], AbilityComponent);
    return AbilityComponent;
    var _a, _b, _c;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/ability.component.js.map

/***/ },

/***/ 413:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return CostreportComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var CostreportComponent = (function () {
    function CostreportComponent() {
        this.options = {
            chart: {
                type: 'pie',
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: null
            },
            title: { text: 'Reporte de Avances' },
            subtitle: { text: 'Proyectos creados hasta la fecha' },
            tooltip: {
                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: false
                    },
                    showInLegend: true
                }
            },
            series: [{
                    name: 'Proyectos',
                    colorByPoint: true,
                    data: [{
                            name: 'Presice Estimate',
                            y: 56.33
                        }, {
                            name: 'Test',
                            y: 24.03,
                            sliced: true,
                            selected: true
                        }, {
                            name: 'Test1',
                            y: 10.38,
                            sliced: true,
                        }, {
                            name: 'Poli Booking',
                            y: 4.77,
                            sliced: true,
                        }, {
                            name: 'Bibliogame',
                            y: 0.91,
                            sliced: true,
                        }, {
                            name: 'Gimnasio y bibliotecas',
                            y: 0.2,
                            sliced: true,
                        }]
                }]
        };
    }
    CostreportComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'costreports',
            styles: ["\n      chart {\n        display: block;\n      }\n    "],
            template: '<chart [options]="options"></chart>'
        }), 
        __metadata('design:paramtypes', [])
    ], CostreportComponent);
    return CostreportComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/costreport.component.js.map

/***/ },

/***/ 414:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DomainsComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var DomainsComponent = (function () {
    function DomainsComponent() {
        this.selected = "";
        this.options = [];
        this.dataDomain = [];
        this.schema = [];
        this.domain = {};
        this.key = "";
        this.options = ["Dominio 1", "Dominio 2"];
    }
    DomainsComponent.prototype.onChangeDomain = function () {
        switch (this.selected) {
            case "Dominio 1":
                this.dataDomain = [
                    { id: 1, name: "Tipo1", value: "10" },
                    { id: 2, name: "Tipo2", value: "15" }
                ];
                this.schema = {
                    "properties": {
                        "id": {
                            "type": "number",
                            "description": "ID",
                            "readOnly": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Nombre"
                        },
                        "value": {
                            "type": "string",
                            "description": "Valor"
                        }
                    },
                    "required": ["name", "value"],
                };
                this.key = "id";
                break;
            case "Dominio 2":
                this.dataDomain = [];
                this.schema = [];
                break;
        }
    };
    DomainsComponent.prototype.saveDomain = function (data) {
        switch (this.selected) {
            case "Dominio 1":
                if (data.id > 0) {
                    console.log("Actualizar", data);
                }
                else {
                    console.log("Crear", data);
                }
                break;
        }
    };
    DomainsComponent.prototype.removeDomain = function (id) {
        switch (this.selected) {
            case "Dominio 1":
                if (id > 0) {
                    console.log("eliminar", id);
                }
                break;
        }
    };
    DomainsComponent.prototype.findDomain = function (id) {
        switch (this.selected) {
            case "Dominio 1":
                if (id > 0) {
                    this.domain = { id: 2, name: "Tipo2", value: "16" };
                }
                break;
        }
    };
    DomainsComponent.prototype.reloadDomain = function () {
        switch (this.selected) {
            case "Dominio 1":
                this.dataDomain = [
                    { id: 1, name: "Tipo1", value: "10" },
                    { id: 2, name: "Tipo2", value: "15" },
                    { id: 3, name: "Tipo4", value: "20" }
                ];
                break;
        }
    };
    DomainsComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'domainsView',
            template: __webpack_require__(936),
            providers: []
        }), 
        __metadata('design:paramtypes', [])
    ], DomainsComponent);
    return DomainsComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/domains.component.js.map

/***/ },

/***/ 415:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return HabilitiesComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var HabilitiesComponent = (function () {
    function HabilitiesComponent(fb) {
        this.form = fb.group({});
    }
    HabilitiesComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'habilitiesView',
            template: __webpack_require__(937),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], HabilitiesComponent);
    return HabilitiesComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/habilities.component.js.map

/***/ },

/***/ 416:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_login_service__ = __webpack_require__(410);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__ = __webpack_require__(264);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return loginComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var loginComponent = (function () {
    function loginComponent(sessionSt, router, b1SLService, _loginService) {
        this.sessionSt = sessionSt;
        this.router = router;
        this.b1SLService = b1SLService;
        this._loginService = _loginService;
        this._loginInfo = {
            user: "",
            password: ""
        };
        this._companies = ['SBODEMOANDRES', 'APATLANTIC', 'SBODEMOUS_NEW'];
        this.$ = jQuery;
    }
    loginComponent.prototype.ngOnInit = function () {
        this._loginInfo = new __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__["a" /* SAPB1 */].LoginInfo();
    };
    loginComponent.prototype.login = function () {
        var _this = this;
        this._loginService.login(this._loginInfo.user, this._loginInfo.password)
            .subscribe(function (data) {
            console.log(data);
            if (data.st == "ok") {
                toastr.success(_this._loginInfo.user + ' inició sesión', 'Bienvenido');
                _this.sessionSt.store('loggedIn', 'true');
                _this.sessionSt.store('LoggedInUser', _this._loginInfo.UserName);
                _this.sessionSt.store('B1Session', _this.B1Session);
                _this.router.navigate(['mainView']);
            }
            else {
                toastr.error(data.data, 'Error');
            }
        }, function (error) {
            console.log('Login Failure: ' + error);
            toastr.error('Incorrect Credentials', 'Logon Failed');
        });
    };
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', Boolean)
    ], loginComponent.prototype, "loggedIn", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', String)
    ], loginComponent.prototype, "LoggedInUser", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', (typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__["a" /* SAPB1 */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__["a" /* SAPB1 */].B1Session) === 'function' && _a) || Object)
    ], loginComponent.prototype, "B1Session", void 0);
    loginComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'login',
            template: __webpack_require__(938),
            providers: [__WEBPACK_IMPORTED_MODULE_2__services_login_service__["a" /* LoginService */]]
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorageService"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3_ng2_webstorage__["SessionStorageService"]) === 'function' && _b) || Object, (typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* Router */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* Router */]) === 'function' && _c) || Object, (typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__["a" /* B1SLSessionService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__["a" /* B1SLSessionService */]) === 'function' && _d) || Object, (typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_2__services_login_service__["a" /* LoginService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__services_login_service__["a" /* LoginService */]) === 'function' && _e) || Object])
    ], loginComponent);
    return loginComponent;
    var _a, _b, _c, _d, _e;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/login.component.js.map

/***/ },

/***/ 417:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_user_service__ = __webpack_require__(189);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return mainViewComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var mainViewComponent = (function () {
    function mainViewComponent() {
        this.model = {};
        this.mySchema = {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "email",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "description": "Password",
                    "buttons": [{
                            "id": "reset",
                            "label": "Reset"
                        }]
                },
                "rememberMe": {
                    "type": "boolean",
                    "default": false,
                    "description": "Remember me"
                }
            },
            "required": ["email", "password", "rememberMe"],
            "buttons": [{
                    "id": "alert",
                    "label": "Alert !" // the text inside the button
                }]
        };
        this.myActions = {
            "alert": function (property) { alert(JSON.stringify(property.value)); },
            "reset": function (property) { property.reset(); }
        };
    }
    mainViewComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'mianView',
            template: __webpack_require__(939),
            providers: [__WEBPACK_IMPORTED_MODULE_1__services_user_service__["a" /* UserService */]]
        }), 
        __metadata('design:paramtypes', [])
    ], mainViewComponent);
    return mainViewComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/main-view.component.js.map

/***/ },

/***/ 418:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return PermissionsComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var PermissionsComponent = (function () {
    function PermissionsComponent(fb) {
        this.form = fb.group({});
    }
    PermissionsComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'permissionsView',
            template: __webpack_require__(940),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], PermissionsComponent);
    return PermissionsComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/permissions.component.js.map

/***/ },

/***/ 419:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProfilesComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var ProfilesComponent = (function () {
    function ProfilesComponent(fb) {
        this.form = fb.group({});
    }
    ProfilesComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'profilesView',
            template: __webpack_require__(941),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], ProfilesComponent);
    return ProfilesComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/profiles.component.js.map

/***/ },

/***/ 420:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProgressreportComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ProgressreportComponent = (function () {
    function ProgressreportComponent() {
        this.options = {
            chart: { type: 'column' },
            title: { text: 'Reporte de Avances' },
            subtitle: { text: 'Proyecto: Precise Estimate' },
            yAxis: { min: 0,
                title: { text: 'Actividades Cerradas' }
            },
            series: [{
                    name: 'Sprint 1',
                    data: [1, 2, 3, 10, 5, 8, 4, 12, 9, 15],
                },
                {
                    name: 'Sprint 2',
                    data: [6, 5, 2, 8, 15, 21, 3, 6, 1, -2],
                }
            ]
        };
    }
    ProgressreportComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'progressreport',
            styles: ["\n      chart {\n        display: block;\n      }\n    "],
            template: '<chart [options]="options"></chart>'
        }), 
        __metadata('design:paramtypes', [])
    ], ProgressreportComponent);
    return ProgressreportComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/progressreport.component.js.map

/***/ },

/***/ 421:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_project_service__ = __webpack_require__(411);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_modal__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_modal_plugins_bootstrap__ = __webpack_require__(438);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProjectComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};





var ProjectComponent = (function () {
    function ProjectComponent(fb, _projectService, overlay, vcRef, modal) {
        this._projectService = _projectService;
        this.modal = modal;
        this.showForm = false;
        this.types = [
            "Basados en Web",
            "Dispositivos Móviles",
            "Escritorio",
            "Mixto"
        ];
        this.status = [
            { id_status: 1, status: "Iniciado" },
            { id_status: 1, status: "Finalizado" },
            { id_status: 1, status: "Activo" },
            { id_status: 1, status: "En Desarrollo" }
        ];
        this.epic = {};
        this.epics = {};
        this.release = [
            {
                id_release: 1,
                release: "Release 1",
                sprints: [
                    {
                        id_sprint: 1,
                        sprint: "S1"
                    },
                    {
                        id_sprint: 2,
                        sprint: "S2"
                    },
                    {
                        id_sprint: 3,
                        sprint: "S3"
                    }
                ]
            },
            {
                id_release: 2,
                release: "Release 2",
                sprints: [
                    {
                        id_sprint: 4,
                        sprint: "S4"
                    },
                    {
                        id_sprint: 5,
                        sprint: "S5"
                    },
                    {
                        id_sprint: 6,
                        sprint: "S6"
                    }
                ]
            }
        ];
        overlay.defaultViewContainer = vcRef;
        this.projectForm = fb.group({
            name: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            typep: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            date_start: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            date_end: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            value_estimate_total: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            time_estimate_total: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
            status: ['', __WEBPACK_IMPORTED_MODULE_2__angular_forms__["a" /* Validators */].required],
        });
        this.projects = [];
        this.updateProjectList();
    }
    ProjectComponent.prototype.updateProjectList = function () {
        var _this = this;
        this._projectService.listProjects().subscribe(function (data) {
            _this.projects = data;
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    ProjectComponent.prototype.editProject = function (id_project) {
        var _this = this;
        this.loadCompleteProject(id_project);
        this.showForm = true;
        this.idProject = id_project;
        this._projectService.getProject(id_project).subscribe(function (data) {
            _this.projectForm.patchValue({
                name: data.name,
                typep: data.type,
                date_start: data.date_start,
                date_end: data.date_end,
                value_estimate_total: data.value_estimate_total,
                time_estimate_total: data.time_estimate_total,
                status: data.status
            });
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    ProjectComponent.prototype.loadCompleteProject = function (id_project) {
        var _this = this;
        this._projectService.getCompleteProject(id_project).subscribe(function (data) {
            _this.epics = data;
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    ProjectComponent.prototype.showProjectForm = function () {
        this.showForm = true;
    };
    ProjectComponent.prototype.submit = function () {
        var _this = this;
        var p = {};
        p["name"] = this.projectForm.value.name;
        p["type"] = this.projectForm.value.typep;
        p["dateStart"] = this.projectForm.value.date_start;
        p["dateEnd"] = this.projectForm.value.date_end;
        p["valueEstimate"] = this.projectForm.value.value_estimate_total;
        p["timeEstimate"] = this.projectForm.value.time_estimate_total;
        p["idStatus"] = this.projectForm.value.status;
        this._projectService.createProject(p).subscribe(function (data) {
            console.log(data);
            _this.showForm = false;
            _this.updateProjectList();
            _this.projectForm.reset();
        }, function (error) {
            console.log('Error creando : ' + error);
        });
    };
    ProjectComponent.prototype.saveEpic = function () {
        var _this = this;
        this._projectService.createEpic(this.idProject, this.epicName).subscribe(function (data) {
            _this.hideModal('epic');
        }, function (error) {
            console.log('Error creando : ' + error);
        });
    };
    ProjectComponent.prototype.editEpic = function (id) {
        //this.showFormEpic({});
    };
    ProjectComponent.prototype.saveFeature = function () {
        var _this = this;
        this._projectService.createFeature(this.idEpic, this.featureName).subscribe(function (data) {
            _this.hideModal('feature');
        }, function (error) {
            console.log('Error creando : ' + error);
        });
    };
    ProjectComponent.prototype.showModal = function (mtype, id) {
        switch (mtype) {
            case "epic":
                this.idEpic = id;
                this.epicmodal.nativeElement.style.display = "block";
                break;
            case "feature":
                this.idFeature = id;
                this.featuremodal.nativeElement.style.display = "block";
                break;
        }
    };
    ProjectComponent.prototype.hideModal = function (mtype) {
        switch (mtype) {
            case "epic":
                this.idEpic = 0;
                this.epicmodal.nativeElement.style.display = "none";
                break;
            case "feature":
                this.idFeature = 0;
                this.featuremodal.nativeElement.style.display = "none";
                break;
        }
    };
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('epicmodal'), 
        __metadata('design:type', (typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _a) || Object)
    ], ProjectComponent.prototype, "epicmodal", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewChild"])('featuremodal'), 
        __metadata('design:type', (typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ElementRef"]) === 'function' && _b) || Object)
    ], ProjectComponent.prototype, "featuremodal", void 0);
    ProjectComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'project',
            template: __webpack_require__(942),
            providers: [__WEBPACK_IMPORTED_MODULE_1__services_project_service__["a" /* ProjectService */]]
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_2__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_2__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2__angular_forms__["b" /* FormBuilder */]) === 'function' && _c) || Object, (typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_1__services_project_service__["a" /* ProjectService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__services_project_service__["a" /* ProjectService */]) === 'function' && _d) || Object, (typeof (_e = typeof __WEBPACK_IMPORTED_MODULE_3_angular2_modal__["l" /* Overlay */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3_angular2_modal__["l" /* Overlay */]) === 'function' && _e) || Object, (typeof (_f = typeof __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_0__angular_core__["ViewContainerRef"]) === 'function' && _f) || Object, (typeof (_g = typeof __WEBPACK_IMPORTED_MODULE_4_angular2_modal_plugins_bootstrap__["a" /* Modal */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4_angular2_modal_plugins_bootstrap__["a" /* Modal */]) === 'function' && _g) || Object])
    ], ProjectComponent);
    return ProjectComponent;
    var _a, _b, _c, _d, _e, _f, _g;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/project.component.js.map

/***/ },

/***/ 422:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return registerComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var registerComponent = (function () {
    function registerComponent() {
    }
    registerComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'register',
            template: __webpack_require__(943)
        }), 
        __metadata('design:paramtypes', [])
    ], registerComponent);
    return registerComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/register.component.js.map

/***/ },

/***/ 423:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ResourcereportComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ResourcereportComponent = (function () {
    function ResourcereportComponent() {
        this.options = {
            title: { text: 'Reporte de Recursos' },
            series: [{
                    data: [29.9, 71.5, 106.4, 129.2],
                }]
        };
    }
    ResourcereportComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'resourcereport',
            styles: ["\n      chart {\n        display: block;\n      }\n    "],
            template: '<chart [options]="options"></chart>'
        }), 
        __metadata('design:paramtypes', [])
    ], ResourcereportComponent);
    return ResourcereportComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/resourcereport.component.js.map

/***/ },

/***/ 424:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return RoleassignmentComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var RoleassignmentComponent = (function () {
    function RoleassignmentComponent(fb) {
        this.form = fb.group({});
    }
    RoleassignmentComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'roleassignmentView',
            template: __webpack_require__(944),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], RoleassignmentComponent);
    return RoleassignmentComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/roleassignment.component.js.map

/***/ },

/***/ 425:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return RolesComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var RolesComponent = (function () {
    function RolesComponent(fb) {
        this.form = fb.group({});
    }
    RolesComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'rolesView',
            template: __webpack_require__(945),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], RolesComponent);
    return RolesComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/roles.component.js.map

/***/ },

/***/ 426:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return TrackingComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};


var TrackingComponent = (function () {
    function TrackingComponent(fb) {
        this.form = fb.group({});
    }
    TrackingComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'trackingView',
            template: __webpack_require__(946),
            providers: []
        }),
        __param(0, __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Inject"])(__WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */])), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_forms__["b" /* FormBuilder */]) === 'function' && _a) || Object])
    ], TrackingComponent);
    return TrackingComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/tracking.component.js.map

/***/ },

/***/ 427:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_user_service__ = __webpack_require__(189);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return UserComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var UserComponent = (function () {
    function UserComponent(_userService) {
        this._userService = _userService;
        this.schema = [];
        this.user = {};
        this.key = "";
        this.users = [];
        this.schema = {
            "properties": {
                "id_user": {
                    "type": "number",
                    "description": "ID",
                    "readOnly": true
                },
                "name": {
                    "type": "string",
                    "description": "Nombre"
                },
                "email": {
                    "type": "string",
                    "description": "Email",
                    "format": "email"
                },
                "password": {
                    "type": "string",
                    "description": "Contraseña",
                    "visible": false,
                    "widget": "password"
                },
                "recovery": {
                    "type": "string",
                    "description": "recovery",
                    "visible": false,
                    "visibleIf": { id_user: [false] }
                },
                "id_profile": {
                    "type": "string",
                    "description": "Perfil"
                }
            },
            "required": ["name", "email", "id_profile"],
        };
        this.key = "id_user";
        this.reload();
    }
    UserComponent.prototype.save = function (data) {
        var _this = this;
        var savePromise;
        if (data.id_user > 0) {
            savePromise = this._userService.updateUser(data);
        }
        else {
            savePromise = this._userService.createUser(data);
        }
        savePromise.subscribe(function (data) {
            _this.reload();
            _this.user = {};
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    UserComponent.prototype.remove = function (id_user) {
        if (id_user > 0) {
            console.log("eliminar", id_user);
        }
    };
    UserComponent.prototype.find = function (id_user) {
        var _this = this;
        if (id_user > 0) {
            this._userService.getUser(id_user).subscribe(function (data) {
                _this.user = data;
            }, function (error) {
                toastr.error(error, 'Error');
            });
        }
    };
    UserComponent.prototype.reload = function () {
        var _this = this;
        this._userService.listUsers().subscribe(function (data) {
            _this.users = data;
        }, function (error) {
            toastr.error(error, 'Error');
        });
    };
    UserComponent.prototype.isValidMailFormat = function (control) {
        var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        if (control != "" && (control.length <= 5 || !EMAIL_REGEXP.test(control))) {
            return { "Please provide a valid email": true };
        }
        return null;
    };
    UserComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'userView',
            template: __webpack_require__(947),
            providers: [__WEBPACK_IMPORTED_MODULE_1__services_user_service__["a" /* UserService */]]
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__services_user_service__["a" /* UserService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__services_user_service__["a" /* UserService */]) === 'function' && _a) || Object])
    ], UserComponent);
    return UserComponent;
    var _a;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/user.component.js.map

/***/ },

/***/ 547:
/***/ function(module, exports) {

function webpackEmptyContext(req) {
	throw new Error("Cannot find module '" + req + "'.");
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
module.exports = webpackEmptyContext;
webpackEmptyContext.id = 547;


/***/ },

/***/ 548:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfills_ts__ = __webpack_require__(711);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__polyfills_ts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__polyfills_ts__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser_dynamic__ = __webpack_require__(648);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__environments_environment__ = __webpack_require__(710);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__app___ = __webpack_require__(687);





if (__WEBPACK_IMPORTED_MODULE_3__environments_environment__["a" /* environment */].production) {
    __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_core__["enableProdMode"])();
}
__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser_dynamic__["a" /* platformBrowserDynamic */])().bootstrapModule(__WEBPACK_IMPORTED_MODULE_4__app___["a" /* AppModule */]);
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/main.js.map

/***/ },

/***/ 678:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_http__ = __webpack_require__(102);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_common__ = __webpack_require__(77);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__app_routes__ = __webpack_require__(679);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_component__ = __webpack_require__(406);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_ng2_webstorage__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__services_B1SLSessionService__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__services_login_service__ = __webpack_require__(410);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__services_user_service__ = __webpack_require__(189);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__services_project_service__ = __webpack_require__(411);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__services_ability_service__ = __webpack_require__(409);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__views_main_view_main_view_module__ = __webpack_require__(699);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__views_projects_project_module__ = __webpack_require__(703);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__views_tracking_tracking_module__ = __webpack_require__(708);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__views_ability_ability_module__ = __webpack_require__(694);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__views_roleassignment_roleassignment_module__ = __webpack_require__(706);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__views_costreport_costreport_module__ = __webpack_require__(695);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__views_progressreport_progressreport_module__ = __webpack_require__(702);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__views_resourcereport_resourcereport_module__ = __webpack_require__(705);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__views_user_user_module__ = __webpack_require__(709);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__views_profiles_profiles_module__ = __webpack_require__(701);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__views_permissions_permissions_module__ = __webpack_require__(700);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__views_habilities_habilities_module__ = __webpack_require__(697);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__views_roles_roles_module__ = __webpack_require__(707);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__views_domains_domains_module__ = __webpack_require__(696);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__views_login_login_module__ = __webpack_require__(698);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__views_register_register_module__ = __webpack_require__(704);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__app_components_common_navigation_navigation_module__ = __webpack_require__(684);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_30__app_components_common_topnavbar_topnavbar_module__ = __webpack_require__(686);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_31__app_components_common_footer_footer_module__ = __webpack_require__(682);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_32__angular_forms__ = __webpack_require__(12);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return AppModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

































var AppModule = (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__angular_core__["NgModule"])({
            declarations: [
                __WEBPACK_IMPORTED_MODULE_6__app_component__["a" /* AppComponent */]
            ],
            imports: [
                // Angular modules
                __WEBPACK_IMPORTED_MODULE_0__angular_platform_browser__["c" /* BrowserModule */],
                __WEBPACK_IMPORTED_MODULE_32__angular_forms__["d" /* FormsModule */],
                __WEBPACK_IMPORTED_MODULE_32__angular_forms__["e" /* ReactiveFormsModule */],
                __WEBPACK_IMPORTED_MODULE_2__angular_http__["e" /* HttpModule */],
                // Views
                __WEBPACK_IMPORTED_MODULE_13__views_main_view_main_view_module__["a" /* MainViewModule */],
                __WEBPACK_IMPORTED_MODULE_14__views_projects_project_module__["a" /* ProjectModule */],
                __WEBPACK_IMPORTED_MODULE_15__views_tracking_tracking_module__["a" /* TrackingModule */],
                __WEBPACK_IMPORTED_MODULE_16__views_ability_ability_module__["a" /* AbilityModule */],
                __WEBPACK_IMPORTED_MODULE_17__views_roleassignment_roleassignment_module__["a" /* RoleassignmentModule */],
                __WEBPACK_IMPORTED_MODULE_18__views_costreport_costreport_module__["a" /* CostreportModule */],
                __WEBPACK_IMPORTED_MODULE_19__views_progressreport_progressreport_module__["a" /* ProgressreportModule */],
                __WEBPACK_IMPORTED_MODULE_20__views_resourcereport_resourcereport_module__["a" /* ResourcereportModule */],
                __WEBPACK_IMPORTED_MODULE_21__views_user_user_module__["a" /* UserModule */],
                __WEBPACK_IMPORTED_MODULE_22__views_profiles_profiles_module__["a" /* ProfilesModule */],
                __WEBPACK_IMPORTED_MODULE_23__views_permissions_permissions_module__["a" /* PermissionsModule */],
                __WEBPACK_IMPORTED_MODULE_24__views_habilities_habilities_module__["a" /* HabilitiesModule */],
                __WEBPACK_IMPORTED_MODULE_25__views_roles_roles_module__["a" /* RolesModule */],
                __WEBPACK_IMPORTED_MODULE_26__views_domains_domains_module__["a" /* DomainsModule */],
                __WEBPACK_IMPORTED_MODULE_27__views_login_login_module__["a" /* LoginModule */],
                __WEBPACK_IMPORTED_MODULE_28__views_register_register_module__["a" /* RegisterModule */],
                // App modules
                __WEBPACK_IMPORTED_MODULE_29__app_components_common_navigation_navigation_module__["a" /* NavigationModule */],
                __WEBPACK_IMPORTED_MODULE_30__app_components_common_topnavbar_topnavbar_module__["a" /* TopnavbarModule */],
                __WEBPACK_IMPORTED_MODULE_31__app_components_common_footer_footer_module__["a" /* FooterModule */],
                // Vendor stuff
                __WEBPACK_IMPORTED_MODULE_3__angular_router__["b" /* RouterModule */].forRoot(__WEBPACK_IMPORTED_MODULE_5__app_routes__["a" /* ROUTES */])
            ],
            providers: [
                { provide: __WEBPACK_IMPORTED_MODULE_4__angular_common__["c" /* LocationStrategy */], useClass: __WEBPACK_IMPORTED_MODULE_4__angular_common__["f" /* HashLocationStrategy */] },
                __WEBPACK_IMPORTED_MODULE_7_ng2_webstorage__["SessionStorageService"],
                __WEBPACK_IMPORTED_MODULE_8__services_B1SLSessionService__["a" /* B1SLSessionService */],
                __WEBPACK_IMPORTED_MODULE_9__services_login_service__["a" /* LoginService */],
                __WEBPACK_IMPORTED_MODULE_10__services_user_service__["a" /* UserService */],
                __WEBPACK_IMPORTED_MODULE_11__services_project_service__["a" /* ProjectService */],
                __WEBPACK_IMPORTED_MODULE_12__services_ability_service__["a" /* AbilityService */],
            ],
            bootstrap: [__WEBPACK_IMPORTED_MODULE_6__app_component__["a" /* AppComponent */]]
        }), 
        __metadata('design:paramtypes', [])
    ], AppModule);
    return AppModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/app.module.js.map

/***/ },

/***/ 679:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__views_main_view_main_view_component__ = __webpack_require__(417);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__views_projects_project_component__ = __webpack_require__(421);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__views_tracking_tracking_component__ = __webpack_require__(426);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__views_ability_ability_component__ = __webpack_require__(412);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__views_roleassignment_roleassignment_component__ = __webpack_require__(424);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__views_costreport_costreport_component__ = __webpack_require__(413);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__views_progressreport_progressreport_component__ = __webpack_require__(420);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__views_resourcereport_resourcereport_component__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__views_user_user_component__ = __webpack_require__(427);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__views_profiles_profiles_component__ = __webpack_require__(419);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__views_permissions_permissions_component__ = __webpack_require__(418);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__views_habilities_habilities_component__ = __webpack_require__(415);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__views_roles_roles_component__ = __webpack_require__(425);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__views_domains_domains_component__ = __webpack_require__(414);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__views_login_login_component__ = __webpack_require__(416);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__views_register_register_component__ = __webpack_require__(422);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ROUTES; });
















var ROUTES = [
    // Main redirect
    { path: '', redirectTo: 'login', pathMatch: 'full' },
    { path: 'mainView', component: __WEBPACK_IMPORTED_MODULE_0__views_main_view_main_view_component__["a" /* mainViewComponent */] },
    { path: 'projects', component: __WEBPACK_IMPORTED_MODULE_1__views_projects_project_component__["a" /* ProjectComponent */] },
    { path: 'tracking', component: __WEBPACK_IMPORTED_MODULE_2__views_tracking_tracking_component__["a" /* TrackingComponent */] },
    { path: 'ability', component: __WEBPACK_IMPORTED_MODULE_3__views_ability_ability_component__["a" /* AbilityComponent */] },
    { path: 'roleassignment', component: __WEBPACK_IMPORTED_MODULE_4__views_roleassignment_roleassignment_component__["a" /* RoleassignmentComponent */] },
    { path: 'costreport', component: __WEBPACK_IMPORTED_MODULE_5__views_costreport_costreport_component__["a" /* CostreportComponent */] },
    { path: 'progressreport', component: __WEBPACK_IMPORTED_MODULE_6__views_progressreport_progressreport_component__["a" /* ProgressreportComponent */] },
    { path: 'resourcereport', component: __WEBPACK_IMPORTED_MODULE_7__views_resourcereport_resourcereport_component__["a" /* ResourcereportComponent */] },
    { path: 'user', component: __WEBPACK_IMPORTED_MODULE_8__views_user_user_component__["a" /* UserComponent */] },
    { path: 'profiles', component: __WEBPACK_IMPORTED_MODULE_9__views_profiles_profiles_component__["a" /* ProfilesComponent */] },
    { path: 'permissions', component: __WEBPACK_IMPORTED_MODULE_10__views_permissions_permissions_component__["a" /* PermissionsComponent */] },
    { path: 'habilities', component: __WEBPACK_IMPORTED_MODULE_11__views_habilities_habilities_component__["a" /* HabilitiesComponent */] },
    { path: 'roles', component: __WEBPACK_IMPORTED_MODULE_12__views_roles_roles_component__["a" /* RolesComponent */] },
    { path: 'domains', component: __WEBPACK_IMPORTED_MODULE_13__views_domains_domains_component__["a" /* DomainsComponent */] },
    { path: 'login', component: __WEBPACK_IMPORTED_MODULE_14__views_login_login_component__["a" /* loginComponent */] },
    { path: 'register', component: __WEBPACK_IMPORTED_MODULE_15__views_register_register_component__["a" /* registerComponent */] },
    // Handle all other routes
    { path: '**', component: __WEBPACK_IMPORTED_MODULE_0__views_main_view_main_view_component__["a" /* mainViewComponent */] }
];
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/app.routes.js.map

/***/ },

/***/ 680:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return CrudComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var CrudComponent = (function () {
    function CrudComponent() {
        this.schema = { properties: {} };
        this.actions = {};
        this.key = "";
        this.save = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.remove = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.find = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.reload = new __WEBPACK_IMPORTED_MODULE_0__angular_core__["EventEmitter"]();
        this.dataForm = {}; // Default values
        this.action = "Listar";
    }
    CrudComponent.prototype.newItem = function () {
        this.dataForm = {};
        this.action = "Crear";
    };
    CrudComponent.prototype.editItem = function (id) {
        this.find.emit(id);
        this.action = "Editar";
    };
    CrudComponent.prototype.saveItem = function () {
        this.save.emit(this.model);
        this.action = "Listar";
        this.reload.emit();
    };
    CrudComponent.prototype.removeItem = function (id) {
        this.remove.emit(id);
        this.reload.emit();
    };
    CrudComponent.prototype.ngOnChanges = function (changes) {
        if ('model' in changes) {
            this.dataForm = this.model;
        }
    };
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "title", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "data", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "model", void 0);
    __decorate([
        // Data to save
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "schema", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "actions", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Input"])(), 
        __metadata('design:type', String)
    ], CrudComponent.prototype, "key", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "save", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "remove", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "find", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Output"])(), 
        __metadata('design:type', Object)
    ], CrudComponent.prototype, "reload", void 0);
    CrudComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'crud',
            template: __webpack_require__(931)
        }), 
        __metadata('design:paramtypes', [])
    ], CrudComponent);
    return CrudComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/crud.component.js.map

/***/ },

/***/ 681:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FooterComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var FooterComponent = (function () {
    function FooterComponent() {
    }
    FooterComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'footer',
            template: __webpack_require__(932)
        }), 
        __metadata('design:paramtypes', [])
    ], FooterComponent);
    return FooterComponent;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/footer.component.js.map

/***/ },

/***/ 682:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__footer_component__ = __webpack_require__(681);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FooterModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var FooterModule = (function () {
    function FooterModule() {
    }
    FooterModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__footer_component__["a" /* FooterComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */]],
            exports: [__WEBPACK_IMPORTED_MODULE_2__footer_component__["a" /* FooterComponent */]],
        }), 
        __metadata('design:paramtypes', [])
    ], FooterModule);
    return FooterModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/footer.module.js.map

/***/ },

/***/ 683:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__ = __webpack_require__(62);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return NavigationComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var NavigationComponent = (function () {
    function NavigationComponent(router, sessionSt) {
        this.router = router;
        this.sessionSt = sessionSt;
    }
    NavigationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._LoggedInUser = this.sessionSt.retrieve('LoggedInUser');
        this._loggedIn = this.sessionSt.retrieve('loggedIn');
        this._sessionID = this.sessionSt.retrieve('sessionID');
        this.sessionSt.observe('sessionID')
            .subscribe(function (value) { return _this._sessionID = value; });
        this.sessionSt.observe('loggedIn')
            .subscribe(function (value) { return _this._loggedIn = value; });
        this.sessionSt.observe('LoggedInUser')
            .subscribe(function (value) { return _this._LoggedInUser = value; });
    };
    NavigationComponent.prototype.ngAfterViewInit = function () {
        jQuery('#side-menu').metisMenu();
    };
    NavigationComponent.prototype.activeRoute = function (routename) {
        return this.router.url.indexOf(routename) > -1;
    };
    NavigationComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'navigation',
            template: __webpack_require__(933)
        }), 
        __metadata('design:paramtypes', [(typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* Router */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_1__angular_router__["a" /* Router */]) === 'function' && _a) || Object, (typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorageService"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorageService"]) === 'function' && _b) || Object])
    ], NavigationComponent);
    return NavigationComponent;
    var _a, _b;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/navigation.component.js.map

/***/ },

/***/ 684:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__navigation_component__ = __webpack_require__(683);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return NavigationModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var NavigationModule = (function () {
    function NavigationModule() {
    }
    NavigationModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_3__navigation_component__["a" /* NavigationComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_2__angular_router__["b" /* RouterModule */]],
            exports: [__WEBPACK_IMPORTED_MODULE_3__navigation_component__["a" /* NavigationComponent */]],
        }), 
        __metadata('design:paramtypes', [])
    ], NavigationModule);
    return NavigationModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/navigation.module.js.map

/***/ },

/***/ 685:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_helpers__ = __webpack_require__(407);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__ = __webpack_require__(62);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__ = __webpack_require__(265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__ = __webpack_require__(264);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return TopnavbarComponent; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var TopnavbarComponent = (function () {
    function TopnavbarComponent(sessionSt, router, _b1SLService) {
        this.sessionSt = sessionSt;
        this._b1SLService = _b1SLService;
        this._router = router;
    }
    TopnavbarComponent.prototype.ngOnInit = function () {
    };
    TopnavbarComponent.prototype.toggleNavigation = function () {
        jQuery('body').toggleClass('mini-navbar');
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__app_helpers__["c" /* smoothlyMenu */])();
    };
    TopnavbarComponent.prototype.Logout = function () {
        console.log('Attempting to log out from session: ');
        toastr.info(this.LoggedInUser + ' logged out', 'Goodbye');
        this.sessionSt.store('loggedIn', false);
        this.sessionSt.store('LoggedInUser', null);
        this.sessionSt.clear('B1Session');
        this._router.navigate(['login']);
    };
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', Boolean)
    ], TopnavbarComponent.prototype, "loggedIn", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', String)
    ], TopnavbarComponent.prototype, "LoggedInUser", void 0);
    __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorage"])(), 
        __metadata('design:type', (typeof (_a = typeof __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__["a" /* SAPB1 */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_5__services_B1SLReference__["a" /* SAPB1 */].B1Session) === 'function' && _a) || Object)
    ], TopnavbarComponent.prototype, "B1Session", void 0);
    TopnavbarComponent = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Component"])({
            selector: 'topnavbar',
            template: __webpack_require__(934)
        }), 
        __metadata('design:paramtypes', [(typeof (_b = typeof __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorageService"] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_2_ng2_webstorage__["SessionStorageService"]) === 'function' && _b) || Object, (typeof (_c = typeof __WEBPACK_IMPORTED_MODULE_3__angular_router__["a" /* Router */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_3__angular_router__["a" /* Router */]) === 'function' && _c) || Object, (typeof (_d = typeof __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__["a" /* B1SLSessionService */] !== 'undefined' && __WEBPACK_IMPORTED_MODULE_4__services_B1SLSessionService__["a" /* B1SLSessionService */]) === 'function' && _d) || Object])
    ], TopnavbarComponent);
    return TopnavbarComponent;
    var _a, _b, _c, _d;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/topnavbar.component.js.map

/***/ },

/***/ 686:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__topnavbar_component__ = __webpack_require__(685);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_router__ = __webpack_require__(104);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ng2_webstorage__ = __webpack_require__(62);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return TopnavbarModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var TopnavbarModule = (function () {
    function TopnavbarModule() {
    }
    TopnavbarModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__topnavbar_component__["a" /* TopnavbarComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_4_ng2_webstorage__["Ng2Webstorage"], __WEBPACK_IMPORTED_MODULE_3__angular_router__["b" /* RouterModule */]],
            exports: [__WEBPACK_IMPORTED_MODULE_2__topnavbar_component__["a" /* TopnavbarComponent */]],
            providers: [__WEBPACK_IMPORTED_MODULE_4_ng2_webstorage__["SessionStorageService"]]
        }), 
        __metadata('design:paramtypes', [])
    ], TopnavbarModule);
    return TopnavbarModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/topnavbar.module.js.map

/***/ },

/***/ 687:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__app_component__ = __webpack_require__(406);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_module__ = __webpack_require__(678);
/* unused harmony namespace reexport */
/* harmony namespace reexport (by used) */ __webpack_require__.d(exports, "a", function() { return __WEBPACK_IMPORTED_MODULE_1__app_module__["a"]; });


//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/index.js.map

/***/ },

/***/ 688:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FilterEpic; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var FilterEpic = (function () {
    function FilterEpic() {
    }
    FilterEpic.prototype.transform = function (value, args) {
        var keys = [];
        for (var key in value) {
            var nofeature = true;
            for (var f in value[key].features) {
                keys.push({ key: value[key].epic, value: value[key].features[f] });
                nofeature = false;
            }
            if (nofeature) {
                keys.push({ key: value[key].epic, value: {} });
            }
        }
        return keys;
    };
    FilterEpic = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'filterEpic' }), 
        __metadata('design:paramtypes', [])
    ], FilterEpic);
    return FilterEpic;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/filterEpic.js.map

/***/ },

/***/ 689:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FilterRelease; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var FilterRelease = (function () {
    function FilterRelease() {
    }
    FilterRelease.prototype.transform = function (value, args) {
        var keys = [];
        for (var key in value) {
            keys.push({ key: value[key].release, value: value[key].sprints.length, id: value[key].id_release });
        }
        return keys;
    };
    FilterRelease = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'filterRelease' }), 
        __metadata('design:paramtypes', [])
    ], FilterRelease);
    return FilterRelease;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/filterRelease.js.map

/***/ },

/***/ 690:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FilterSprint; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var FilterSprint = (function () {
    function FilterSprint() {
    }
    FilterSprint.prototype.transform = function (value, args) {
        var keys = [];
        for (var key in value) {
            for (var f in value[key].sprints) {
                keys.push({ key: value[key].release, value: value[key].sprints[f], id: value[key].id_release });
            }
        }
        return keys;
    };
    FilterSprint = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'filterSprint' }), 
        __metadata('design:paramtypes', [])
    ], FilterSprint);
    return FilterSprint;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/filterSprint.js.map

/***/ },

/***/ 691:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return FilterStory; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var FilterStory = (function () {
    function FilterStory() {
    }
    FilterStory.prototype.transform = function (value, id_feature, id_sprint) {
        var keys = [];
        for (var key in value) {
            for (var f in value[key].features) {
                if (value[key].features[f].id_feature == id_feature) {
                    for (var s in value[key].features[f].stories) {
                        if (value[key].features[f].stories[s].id_sprint == id_sprint) {
                            keys.push({ key: value[key].features[f].stories[s].story, value: value[key].features[f].stories[s] });
                        }
                    }
                }
            }
        }
        return keys;
    };
    FilterStory = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'filterStory' }), 
        __metadata('design:paramtypes', [])
    ], FilterStory);
    return FilterStory;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/filterStory.js.map

/***/ },

/***/ 692:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return KeysPipe; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var KeysPipe = (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (value, args) {
        var keys = [];
        for (var key in value) {
            if (('visible' in value[key] && value[key].visible) || !('visible' in value[key])) {
                keys.push({ key: key, value: value[key] });
            }
        }
        return keys;
    };
    KeysPipe = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["Pipe"])({ name: 'keyValues' }), 
        __metadata('design:paramtypes', [])
    ], KeysPipe);
    return KeysPipe;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/keyValues.js.map

/***/ },

/***/ 693:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_add_observable_throw__ = __webpack_require__(496);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_rxjs_add_observable_throw___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_rxjs_add_observable_throw__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_add_operator_catch__ = __webpack_require__(497);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_add_operator_catch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_add_operator_catch__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_debounceTime__ = __webpack_require__(499);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_debounceTime___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_add_operator_debounceTime__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_distinctUntilChanged__ = __webpack_require__(303);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_distinctUntilChanged___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_rxjs_add_operator_distinctUntilChanged__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map__ = __webpack_require__(93);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_rxjs_add_operator_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_do__ = __webpack_require__(304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_do___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_rxjs_add_operator_do__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_switchMap__ = __webpack_require__(501);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_switchMap___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_rxjs_add_operator_switchMap__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_toPromise__ = __webpack_require__(502);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_toPromise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_rxjs_add_operator_toPromise__);
// import 'rxjs/Rx'; // adds ALL RxJS statics & operators to Observable








//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/rxjs-operators.js.map

/***/ },

/***/ 694:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ability_component__ = __webpack_require__(412);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return AbilityModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var AbilityModule = (function () {
    function AbilityModule() {
    }
    AbilityModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__ability_component__["a" /* AbilityComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], AbilityModule);
    return AbilityModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/ability.module.js.map

/***/ },

/***/ 695:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__ = __webpack_require__(266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__costreport_component__ = __webpack_require__(413);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__ = __webpack_require__(35);
/* unused harmony export highchartsFactory */
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return CostreportModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * Function to generate a Factory Method to use a highcharts library
 */
function highchartsFactory() {
    return __webpack_require__(296);
}
var CostreportModule = (function () {
    function CostreportModule() {
    }
    CostreportModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_4__costreport_component__["a" /* CostreportComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["a" /* SchemaFormModule */], __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__["ChartModule"]],
            providers: [
                { provide: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["b" /* WidgetRegistry */],
                    useClass: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["c" /* DefaultWidgetRegistry */] },
                { provide: __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__["HighchartsStatic"],
                    useFactory: highchartsFactory }],
        }), 
        __metadata('design:paramtypes', [])
    ], CostreportModule);
    return CostreportModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/costreport.module.js.map

/***/ },

/***/ 696:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__domains_component__ = __webpack_require__(414);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_common_crud_crud_module__ = __webpack_require__(408);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return DomainsModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var DomainsModule = (function () {
    function DomainsModule() {
    }
    DomainsModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__domains_component__["a" /* DomainsComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4__components_common_crud_crud_module__["a" /* CrudModule */]],
        }), 
        __metadata('design:paramtypes', [])
    ], DomainsModule);
    return DomainsModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/domains.module.js.map

/***/ },

/***/ 697:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__habilities_component__ = __webpack_require__(415);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return HabilitiesModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var HabilitiesModule = (function () {
    function HabilitiesModule() {
    }
    HabilitiesModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__habilities_component__["a" /* HabilitiesComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], HabilitiesModule);
    return HabilitiesModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/habilities.module.js.map

/***/ },

/***/ 698:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__login_component__ = __webpack_require__(416);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_ng2_webstorage__ = __webpack_require__(62);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return LoginModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var LoginModule = (function () {
    function LoginModule() {
    }
    LoginModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_3__login_component__["a" /* loginComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_2__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_4_ng2_webstorage__["Ng2Webstorage"]]
        }), 
        __metadata('design:paramtypes', [])
    ], LoginModule);
    return LoginModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/login.module.js.map

/***/ },

/***/ 699:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__main_view_component__ = __webpack_require__(417);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return MainViewModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var MainViewModule = (function () {
    function MainViewModule() {
    }
    MainViewModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__main_view_component__["a" /* mainViewComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], MainViewModule);
    return MainViewModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/main-view.module.js.map

/***/ },

/***/ 700:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__permissions_component__ = __webpack_require__(418);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return PermissionsModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var PermissionsModule = (function () {
    function PermissionsModule() {
    }
    PermissionsModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__permissions_component__["a" /* PermissionsComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], PermissionsModule);
    return PermissionsModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/permissions.module.js.map

/***/ },

/***/ 701:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__profiles_component__ = __webpack_require__(419);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProfilesModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ProfilesModule = (function () {
    function ProfilesModule() {
    }
    ProfilesModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__profiles_component__["a" /* ProfilesComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], ProfilesModule);
    return ProfilesModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/profiles.module.js.map

/***/ },

/***/ 702:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__ = __webpack_require__(266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__progressreport_component__ = __webpack_require__(420);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__ = __webpack_require__(35);
/* unused harmony export highchartsFactory */
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProgressreportModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * Function to generate a Factory Method to use a highcharts library
 */
function highchartsFactory() {
    return __webpack_require__(296);
}
var ProgressreportModule = (function () {
    function ProgressreportModule() {
    }
    ProgressreportModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_4__progressreport_component__["a" /* ProgressreportComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["a" /* SchemaFormModule */], __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__["ChartModule"]],
            providers: [
                { provide: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["b" /* WidgetRegistry */],
                    useClass: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["c" /* DefaultWidgetRegistry */] },
                { provide: __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__["HighchartsStatic"],
                    useFactory: highchartsFactory }],
        }), 
        __metadata('design:paramtypes', [])
    ], ProgressreportModule);
    return ProgressreportModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/progressreport.module.js.map

/***/ },

/***/ 703:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__pipes_filterEpic__ = __webpack_require__(688);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__pipes_filterRelease__ = __webpack_require__(689);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__pipes_filterSprint__ = __webpack_require__(690);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__pipes_filterStory__ = __webpack_require__(691);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_angular2_modal__ = __webpack_require__(40);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_angular2_modal_plugins_bootstrap__ = __webpack_require__(438);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__project_component__ = __webpack_require__(421);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_ng2_webstorage__ = __webpack_require__(62);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ProjectModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var ProjectModule = (function () {
    function ProjectModule() {
    }
    ProjectModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_9__project_component__["a" /* ProjectComponent */], __WEBPACK_IMPORTED_MODULE_3__pipes_filterEpic__["a" /* FilterEpic */], __WEBPACK_IMPORTED_MODULE_4__pipes_filterRelease__["a" /* FilterRelease */], __WEBPACK_IMPORTED_MODULE_5__pipes_filterSprint__["a" /* FilterSprint */], __WEBPACK_IMPORTED_MODULE_6__pipes_filterStory__["a" /* FilterStory */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_2__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_10_ng2_webstorage__["Ng2Webstorage"], __WEBPACK_IMPORTED_MODULE_2__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_7_angular2_modal__["m" /* ModalModule */].forRoot(), __WEBPACK_IMPORTED_MODULE_8_angular2_modal_plugins_bootstrap__["b" /* BootstrapModalModule */]]
        }), 
        __metadata('design:paramtypes', [])
    ], ProjectModule);
    return ProjectModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/project.module.js.map

/***/ },

/***/ 704:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__register_component__ = __webpack_require__(422);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return RegisterModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var RegisterModule = (function () {
    function RegisterModule() {
    }
    RegisterModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__register_component__["a" /* registerComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */]],
        }), 
        __metadata('design:paramtypes', [])
    ], RegisterModule);
    return RegisterModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/register.module.js.map

/***/ },

/***/ 705:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__ = __webpack_require__(266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__ = __webpack_require__(136);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__resourcereport_component__ = __webpack_require__(423);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__ = __webpack_require__(35);
/* unused harmony export highchartsFactory */
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return ResourcereportModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * Function to generate a Factory Method to use a highcharts library
 */
function highchartsFactory() {
    return __webpack_require__(296);
}
var ResourcereportModule = (function () {
    function ResourcereportModule() {
    }
    ResourcereportModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_4__resourcereport_component__["a" /* ResourcereportComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_5__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["a" /* SchemaFormModule */], __WEBPACK_IMPORTED_MODULE_2_angular2_highcharts__["ChartModule"]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_6_angular2_schema_form__["c" /* DefaultWidgetRegistry */] },
                {
                    provide: __WEBPACK_IMPORTED_MODULE_3_angular2_highcharts_dist_HighchartsService__["HighchartsStatic"],
                    useFactory: highchartsFactory
                }],
        }), 
        __metadata('design:paramtypes', [])
    ], ResourcereportModule);
    return ResourcereportModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/resourcereport.module.js.map

/***/ },

/***/ 706:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__roleassignment_component__ = __webpack_require__(424);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return RoleassignmentModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var RoleassignmentModule = (function () {
    function RoleassignmentModule() {
    }
    RoleassignmentModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__roleassignment_component__["a" /* RoleassignmentComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], RoleassignmentModule);
    return RoleassignmentModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/roleassignment.module.js.map

/***/ },

/***/ 707:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__roles_component__ = __webpack_require__(425);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return RolesModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var RolesModule = (function () {
    function RolesModule() {
    }
    RolesModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__roles_component__["a" /* RolesComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], RolesModule);
    return RolesModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/roles.module.js.map

/***/ },

/***/ 708:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tracking_component__ = __webpack_require__(426);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_forms__ = __webpack_require__(12);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__ = __webpack_require__(35);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return TrackingModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var TrackingModule = (function () {
    function TrackingModule() {
    }
    TrackingModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__tracking_component__["a" /* TrackingComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["d" /* FormsModule */], __WEBPACK_IMPORTED_MODULE_3__angular_forms__["e" /* ReactiveFormsModule */], __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["a" /* SchemaFormModule */]],
            providers: [{ provide: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["b" /* WidgetRegistry */], useClass: __WEBPACK_IMPORTED_MODULE_4_angular2_schema_form__["c" /* DefaultWidgetRegistry */] }],
        }), 
        __metadata('design:paramtypes', [])
    ], TrackingModule);
    return TrackingModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/tracking.module.js.map

/***/ },

/***/ 709:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__user_component__ = __webpack_require__(427);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_common_crud_crud_module__ = __webpack_require__(408);
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return UserModule; });
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var UserModule = (function () {
    function UserModule() {
    }
    UserModule = __decorate([
        __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__angular_core__["NgModule"])({
            declarations: [__WEBPACK_IMPORTED_MODULE_2__user_component__["a" /* UserComponent */]],
            imports: [__WEBPACK_IMPORTED_MODULE_1__angular_platform_browser__["c" /* BrowserModule */], __WEBPACK_IMPORTED_MODULE_3__components_common_crud_crud_module__["a" /* CrudModule */]],
        }), 
        __metadata('design:paramtypes', [])
    ], UserModule);
    return UserModule;
}());
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/user.module.js.map

/***/ },

/***/ 710:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(exports, "a", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `angular-cli.json`.
var environment = {
    production: false
};
//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/environment.js.map

/***/ },

/***/ 711:
/***/ function(module, exports, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol__ = __webpack_require__(767);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_core_js_es6_symbol__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core_js_es6_object__ = __webpack_require__(760);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_core_js_es6_object___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_core_js_es6_object__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core_js_es6_function__ = __webpack_require__(756);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_core_js_es6_function___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_core_js_es6_function__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int__ = __webpack_require__(762);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_core_js_es6_parse_int__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float__ = __webpack_require__(761);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_core_js_es6_parse_float__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_core_js_es6_number__ = __webpack_require__(759);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_core_js_es6_number___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_core_js_es6_number__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_core_js_es6_math__ = __webpack_require__(758);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_core_js_es6_math___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_core_js_es6_math__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_core_js_es6_string__ = __webpack_require__(766);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_core_js_es6_string___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_core_js_es6_string__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_core_js_es6_date__ = __webpack_require__(755);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_core_js_es6_date___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_core_js_es6_date__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_core_js_es6_array__ = __webpack_require__(754);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_core_js_es6_array___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9_core_js_es6_array__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp__ = __webpack_require__(764);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_core_js_es6_regexp__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_core_js_es6_map__ = __webpack_require__(757);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_core_js_es6_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_core_js_es6_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_core_js_es6_set__ = __webpack_require__(765);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_core_js_es6_set___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_core_js_es6_set__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect__ = __webpack_require__(763);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_core_js_es6_reflect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect__ = __webpack_require__(768);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14_core_js_es7_reflect__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone__ = __webpack_require__(1267);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15_zone_js_dist_zone__);
















//# sourceMappingURL=/home/felipe/Documents/Projects/Precise/codigo/precise_estimate/src/polyfills.js.map

/***/ },

/***/ 922:
/***/ function(module, exports) {

module.exports = "* {\n    font-family: 'Rajdhani', sans-serif;\n}\n\n.homelogo{\n    width: 100px;    \n}\n\n\n"

/***/ },

/***/ 930:
/***/ function(module, exports) {

module.exports = "<!-- Wrapper-->\n<div id=\"wrapper\">\n\n    <!-- Left navigation bar -->\n    <navigation></navigation>\n\n    <!-- Main page wrapper -->\n    <div id=\"page-wrapper\" class=\"gray-bg\">\n\n        <!-- Top navigation -->\n        <topnavbar></topnavbar>\n        \n        <!-- Main view/routes wrapper-->\n        <router-outlet></router-outlet>\n\n        <!-- Footer -->\n        <footer></footer>\n\n    </div>\n    <!-- End page wrapper-->\n\n</div>\n<!-- End wrapper-->\n"

/***/ },

/***/ 931:
/***/ function(module, exports) {

module.exports = "<div>\n    <div *ngIf=\"action=='Listar'\" class=\"panel panel-default\">\n        <div class=\"panel-heading\">\n            {{title}}\n        </div>\n        <div class=\"panel-body\">\n            <table class=\"table table-striped table-bordered table-hover dataTables-example dataTable\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let s of schema.properties | keyValues\">{{s.value.description}}</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let d of data\">\n                        <td *ngFor=\"let s of schema.properties | keyValues\">{{d[s.key]}}</td>\n                        <td>\n                            <button class=\"btn btn-sm btn-primary\" (click)=\"editItem(d[key])\"><i class=\"fa fa-edit\"></i> editar</button>\n                            <button class=\"btn btn-sm btn-primary\" (click)=\"removeItem(d[key])\"><i class=\"fa fa-trash\"></i> eliminar</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <button class=\"btn btn-sm btn-primary\" (click)=\"newItem()\"><i class=\"fa fa-plus-square-o\"></i> nuevo</button>\n        </div>\n    </div>\n    <div *ngIf=\"action=='Crear' || action=='Editar'\" class=\"panel panel-primary\">\n        <div class=\"panel-heading\">\n            {{action}} {{title}}\n        </div>\n        <div class=\"panel-body\">\n            <sf-form [schema]=\"schema\" [model]=\"dataForm\" [actions]=\"actions\" (onChange)=\"model=$event.value\"></sf-form>\n            <button class=\"btn btn-sm btn-primary\" (click)=\"saveItem()\"><i class=\"fa fa-save\"></i> guardar</button>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 932:
/***/ function(module, exports) {

module.exports = "<div class=\"footer\">\n    <div style=\"text-align: center\">\n        <strong>Copyright</strong> <a target=\"_blank\" href=\"https://appsglobals.com\">Apps Globals</a> &copy; 2017\n    </div>\n</div>"

/***/ },

/***/ 933:
/***/ function(module, exports) {

module.exports = "<nav class=\"navbar-default navbar-static-side\" role=\"navigation\">\n    <div class=\"sidebar-collapse\">\n        <ul class=\"nav metismenu\" id=\"side-menu\">\n            <li class=\"nav-header\">\n                <div class=\"dropdown profile-element\">\n                    <a *ngIf=\"loggedIn\" data-toggle=\"dropdown\" class=\"dropdown-toggle\" href=\"#\">\n                        <span class=\"block m-t-xs\"> <strong class=\"font-bold\">Example user</strong> </span>\n                        <span class=\"text-muted text-xs block\">Example <b class=\"caret\"></b> </span>\n                    </a>\n                    <ul *ngIf=\"!loggedIn\" class=\"dropdown-menu animated fadeInRight m-t-xs\">\n                        <li><a href=\"#\">Logout</a></li>\n                    </ul>\n                </div>\n                <div class=\"logo-element\">\n                    <img style=\"max-width: 30px\" src=\"assets/img/logo.svg\" />\n                </div>\n            </li>\n            <li *ngIf=\"_loggedIn\" [ngClass]=\"{active: activeRoute('mainView')}\">\n\n            </li>\n            <li *ngIf=\"_loggedIn\">\n                <a href=\"#\"><i class=\"fa fa-cubes\"></i> <span class=\"nav-label\">Proyectos</span> <span class=\"fa arrow\"></span></a>\n                <ul class=\"nav nav-second-level collapse\">\n                    <li [ngClass]=\"{active: activeRoute('projects')}\">\n                        <a [routerLink]=\"['/projects']\">\n                            <i class=\"fa fa-sitemap\"></i> <span class=\"nav-label\">Gestionar proyecto</span>\n                        </a>\n                    </li>\n                    <li [ngClass]=\"{active: activeRoute('tracking')}\"><a [routerLink]=\"['/tracking']\"><i class=\"fa fa-tasks\"></i>Seguimiento de tareas</a></li>\n                    <li [ngClass]=\"{active: activeRoute('ability')}\"><a [routerLink]=\"['/ability']\"><i class=\"fa fa-star-half-o\"></i>Asignación de Habilidades</a></li>\n                    <li [ngClass]=\"{active: activeRoute('roleassignment')}\"><a [routerLink]=\"['/roleassignment']\"><i class=\"fa fa-drivers-license\"></i>Asignación de roles</a></li>\n                    <li>\n                        <a href=\"#\"><i class=\"fa fa-pie-chart\"></i><span class=\"nav-label\">Reportes</span> <span class=\"fa arrow\"></span></a>\n                        <ul class=\"nav nav-second-level collapse\">\n                            <li [ngClass]=\"{active: activeRoute('costreport')}\"><a [routerLink]=\"['/costreport']\"><i class=\"fa fa-chevron-right\"></i>Reporte de Costos</a></li>\n                            <li [ngClass]=\"{active: activeRoute('progressreport')}\"><a [routerLink]=\"['/progressreport']\"><i class=\"fa fa-chevron-right\"></i>Reporte de avances</a></li>\n                            <li [ngClass]=\"{active: activeRoute('resourcereport')}\"><a [routerLink]=\"['/resourcereport']\"><i class=\"fa fa-chevron-right\"></i>Reporte de recursos</a></li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li *ngIf=\"_loggedIn\" class=\"\">\n                <a href=\"index.html\"><i class=\"fa fa-gears\"></i> <span class=\"nav-label\">Administración</span> <span class=\"fa arrow\"></span></a>\n                <ul class=\"nav nav-second-level collapse in\">\n                    <li>\n                        <a href=\"#\"><i class=\"fa fa-gear\"></i><span class=\"nav-label\">Sistema</span> <span class=\"fa arrow\"></span></a>\n                        <ul class=\"nav nav-second-level collapse\">\n                            <li [ngClass]=\"{active: activeRoute('user')}\"><a [routerLink]=\"['/user']\"><i class=\"fa fa-id-card-o\"></i> <span class=\"nav-label\">Usuarios</span></a></li>\n                            <li [ngClass]=\"{active: activeRoute('profiles')}\"><a [routerLink]=\"['/profiles']\"><i class=\"fa fa-chevron-right\"></i>Perfiles</a></li>\n                            <li [ngClass]=\"{active: activeRoute('permissions')}\"><a [routerLink]=\"['/permissions']\"><i class=\"fa fa-chevron-right\"></i>Permisos</a></li>\n                        </ul>\n                    </li>\n                    <li>\n                        <a href=\"#\"><i class=\"fa fa-list\"></i><span class=\"nav-label\">Dominios</span> <span class=\"fa arrow\"></span></a>\n                        <ul class=\"nav nav-second-level collapse\">\n                            <li [ngClass]=\"{active: activeRoute('habilities')}\"><a [routerLink]=\"['/habilities']\"><i class=\"fa fa-star\"></i> <span class=\"nav-label\">Habilidades</span></a></li>\n                            <li [ngClass]=\"{active: activeRoute('roles')}\"><a [routerLink]=\"['/roles']\"><i class=\"fa fa-drivers-license-o\"></i>Roles</a></li>\n                            <li [ngClass]=\"{active: activeRoute('domains')}\"><a [routerLink]=\"['/domains']\"><i class=\"fa fa-list-alt\"></i>Varios</a></li>\n                        </ul>\n                    </li>\n                </ul>\n            </li>\n            <li *ngIf=\"!_loggedIn\">\n                <a [routerLink]=\"['/login']\"><i class=\"fa fa-sign-in\"></i> <span class=\"nav-label\">Iniciar sesión</span> </a>\n            </li>\n            <li *ngIf=\"!_loggedIn\">\n                <a [routerLink]=\"['/register']\"><i class=\"fa fa-pencil\"></i> <span class=\"nav-label\">Registrarse</span> </a>\n            </li>\n\n        </ul>\n    </div>\n</nav>"

/***/ },

/***/ 934:
/***/ function(module, exports) {

module.exports = "<div class=\"row border-bottom\">\n    <nav class=\"navbar navbar-static-top white-bg\" role=\"navigation\" style=\"margin-bottom: 0\">\n        <div class=\"navbar-header\">\n            <a class=\"minimalize-styl-2 btn btn-primary \" (click)=\"toggleNavigation()\"><i class=\"fa fa-bars\"></i> </a>\n            <form role=\"search\" class=\"navbar-form-custom\" method=\"post\" action=\"#\">\n                <div class=\"form-group\">\n                    <input type=\"text\" placeholder=\"Search for something...\" class=\"form-control\" name=\"top-search\" id=\"top-search\">\n                </div>\n            </form>\n        </div>\n        <ul class=\"nav navbar-top-links navbar-right\">\n            <li *ngIf=\"!loggedIn\">\n                <a [routerLink]=\"['/login']\">\n                        Iniciar sesión\n                        </a>\n            </li>\n            <li *ngIf=\"!loggedIn\">\n                <a [routerLink]=\"['/register']\">\n                            Registrarse\n                        </a>\n            </li>\n            <li *ngIf=\"loggedIn\">\n                {{LoggedInUser}}\n            </li>\n            <li *ngIf=\"loggedIn\" (click)=\"Logout()\">\n                <a href=\"#\">\n                    <i class=\"fa fa-sign-out\"></i> Cerrar sesión\n                </a>\n            </li>\n        </ul>\n    </nav>\n</div>"

/***/ },

/***/ 935:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Habilidades\n                </h1>\n                <select [(ngModel)]=\"user\">\n                    <option *ngFor=\"let u of users\" value=\"{{u.id_user}}\">\n                        {{u.name}}\n                    </option>\n                </select>\n                <select [(ngModel)]=\"ability\">\n                    <option *ngFor=\"let a of abilities\" value=\"{{a.id_ability}}\">\n                        {{a.name_ability}}\n                    </option>\n                </select>\n                <button (click)=\"assignAbility()\">Asignar</button>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 936:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Dominios\n                </h1>\n                <label>Seleccione un dominio: </label>\n                <select [(ngModel)]=\"selected\" (change)=\"onChangeDomain()\">\n                    <option *ngFor=\"let o of options\" value=\"{{o}}\">\n                        {{o}}\n                    </option>\n                </select>\n                <br>\n                <br>\n                <crud *ngIf=\"selected\" [key]=\"key\" [data]=\"dataDomain\" [schema]=\"schema\" [title]=\"selected\"  [model]=\"domain\" \n                (save)=\"saveDomain($event)\" (remove)=\"removeDomain($event)\" \n                (find)=\"findDomain($event)\" (reload)=\"reloadDomain()\"></crud>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 937:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de habilidades\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 938:
/***/ function(module, exports) {

module.exports = "<div class=\"middle-box text-center loginscreen  animated fadeInDown\">\n    <div>\n        <div>\n            <h1 class=\"logo-name\">\n                <div style=\"margin: 10px\">\n                    <img style=\"max-width: 100px\" src=\"assets/img/logo.svg\" />\n                </div>\n            </h1>\n        </div>\n        <h3>Bienvenido a Precise Estimate</h3>\n\n        <form class=\"m-t\" (ngSubmit)=\"login()\" #loginForm=\"ngForm\" role=\"form\">\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" id=\"UserName\" placeholder=\"email\" required [(ngModel)]=\"_loginInfo.user\" name=\"UserName\"\n                    #UserName=\"ngModel\">\n            </div>\n            <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\" id=\"Password\" placeholder=\"contraseña\" required [(ngModel)]=\"_loginInfo.password\"\n                    name=\"Password\" #Password=\"ngModel\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary block full-width m-b ladda-button\" [disabled]=\"!loginForm.form.valid\">\n                    Login\n            </button>\n            <a href=\"#\"><small>¿Olvidó su contraseña?</small></a>\n            <p class=\"text-muted text-center\"><small>¿No tiene cuenta?</small></p>\n            <a class=\"btn btn-sm btn-white btn-block\" href=\"#\">Puedes crear una cuenta facil acá!</a>\n        </form>\n        <hr />\n        <div *ngIf=\"loginFailure\" class=\"alert alert-danger alert-dismissable\">\n            <button aria-hidden=\"true\" data-dismiss=\"alert\" class=\"close\" type=\"button\">×</button> Usuario o contraseña incorrecta!\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 939:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Usuarios\n                </h1>\n                <sf-form [schema]=\"mySchema\" [model]=\"model\" [actions]=\"myActions\"></sf-form>\n                <p>{{ model | json }}</p>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 940:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Permisos\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 941:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Perfiles\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 942:
/***/ function(module, exports) {

module.exports = "<div class=\"animated fadeInDown\">\n    <div>\n\n        <h3>Projects</h3>\n        <div class=\"col-lg-12\">\n            <div class=\"ibox float-e-margins\">\n\n                <div class=\"animated fadeInDown\">\n                    <div>\n                        <h1>\n                            Administración de Proyectos\n                        </h1>\n                        {{epic|json}}\n                        <div [hidden]=\"showForm\">\n                            <table class=\"table table-striped table-bordered table-hover dataTables-example dataTable\">\n                                <thead>\n                                    <tr>\n                                        <th>Id</th>\n                                        <th>Nombre</th>\n                                        <th>Tipo</th>\n                                        <th></th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr *ngFor=\"let u of projects\">\n                                        <td>{{u.id_project}}</td>\n                                        <td>{{u.name}}</td>\n                                        <td>{{u.type}}</td>\n                                        <td><button (click)=\"editProject(u.id_project)\">Editar</button></td>\n                                    </tr>\n                                </tbody>\n                                <tfoot>\n                                    <tr>\n                                        <td colspan=\"4\"><button (click)=\"showProjectForm()\">Crear Proyecto</button></td>\n                                    </tr>\n                                </tfoot>\n                            </table>\n                        </div>\n                        <div [hidden]=\"!showForm\" style=\"margin: 10px\">\n                            <div class=\"panel panel-primary\">\n                                <div class=\"panel-heading\">\n                                    Proyecto\n                                </div>\n                                <div class=\"panel-body\">\n                                    <form [formGroup]=\"projectForm\" (ngSubmit)=\"submit()\">\n                                        <div>\n                                            <label>Nombre</label><br>\n                                            <input type=\"text\" formControlName=\"name\">\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.name.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <div>\n                                            <label>Tipo</label><br>\n                                            <select formControlName=\"typep\">\n                                                    <option *ngFor=\"let t of types\" [value]=\"t\">{{t}}</option>\n                                                </select>\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.typep.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <div>\n                                            <label>Fecha de inicio</label><br>\n                                            <input type=\"date\" formControlName=\"date_start\">\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.date_start.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <div>\n                                            <label>Fecha de finalización</label><br>\n                                            <input type=\"date\" formControlName=\"date_end\">\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.date_end.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <div>\n                                            <label>Costo Total Estimado</label><br>\n                                            <input type=\"text\" formControlName=\"value_estimate_total\">\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.value_estimate_total.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <div>\n                                            <label>Tiempo Total Estimado (Horas)</label><br>\n                                            <input type=\"text\" formControlName=\"time_estimate_total\">\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.time_estimate_total.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n\n                                        <div>\n                                            <label>Estado</label><br>\n                                            <select formControlName=\"status\">\n                                                    <option *ngFor=\"let t of status\" [value]=\"t.id_status\">{{t.status}}</option>\n                                                </select>\n                                            <div>\n                                                <small *ngIf=\"!projectForm.controls.status.valid\">Requerido.</small>\n                                            </div>\n                                        </div>\n                                        <br>\n                                        <button type=\"submit\" [disabled]=\"!projectForm.valid\">Guardar Proyecto</button>\n                                    </form>\n                                </div>\n                            </div>\n                            <div class=\"panel panel-primary\">\n                                <div class=\"panel-heading\">\n                                    Story Mapping\n                                </div>\n                                <div class=\"panel-body\">\n                                    <table class=\"table table-striped table-bordered table-hover dataTables-example dataTable\">\n                                        <thead>\n                                            <tr>\n                                                <th rowspan=\"2\" class=\"bg-success p-xs b-r-xs\">\n                                                    <div class=\"col-md-6 text-left\">Epica</div>\n                                                    <div class=\"col-md-6 text-right\">\n                                                        <a class=\"btn btn-primary btn-xs\" (click)=\"showModal('epic')\">\n                                                            <i style=\"margin:5px 3px 0px 3px;\" class=\"fa fa-plus\"></i>\n                                                        </a>\n                                                    </div>\n                                                </th>\n                                                <th rowspan=\"2\" class=\"bg-info p-xs b-r-xs\">\n                                                    Característica\n                                                </th>\n                                                <th rowspan=\"2\" class=\"bg-warning p-xs b-r-xs\">\n                                                    Historias\n                                                </th>\n                                                <th *ngFor=\"let r of release | filterRelease\" [attr.colspan]=\"r.value\">\n                                                    {{r.key}}\n                                                </th>\n                                            </tr>\n                                            <tr>\n                                                <th *ngFor=\"let r of release | filterSprint\">\n                                                    {{r.value.sprint}}\n                                                </th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                            <tr *ngFor=\"let e of epics | filterEpic\">\n                                                <td>\n                                                    <div class=\"col-md-6 text-left\">{{e.key}}</div>\n                                                    <div class=\"col-md-6 text-right\">\n                                                        <a class=\"btn btn-info btn-xs\" (click)=\"showModal('feature', e.value.id_epic)\">\n                                                            <i style=\"margin:5px 3px 0px 3px;\" class=\"fa fa-plus\"></i>\n                                                        </a>\n                                                    </div>\n                                                </td>\n                                                <td>\n                                                    <div class=\"col-md-6 text-left\">{{e.value.feature}}</div>\n                                                    <div class=\"col-md-6 text-right\">\n                                                        <a class=\"btn btn-warning btn-xs\">\n                                                            <i style=\"margin:5px 3px 0px 3px;\" class=\"fa fa-plus\"></i>\n                                                        </a>\n                                                    </div>\n                                                </td>\n                                                <td>\n                                                    <div *ngFor=\"let s of epics | filterStory:e.value.id_feature:0\" class=\"col-xs-3 story-mini-card bg-warning text-center\">\n                                                        <div class=\"\">\n                                                            <h3 class=\"font-bold no-margins\">\n                                                                {{s.key}}\n                                                            </h3>\n                                                            <small>power</small>\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                                <td *ngFor=\"let r of release | filterSprint\">\n                                                    <div *ngFor=\"let s of epics | filterStory:e.value.id_feature:r.value.id_sprint\" class=\"col-xs-3 story-mini-card bg-warning text-center\">\n                                                        <div class=\"\">\n                                                            <h3 class=\"font-bold no-margins\">\n                                                                {{s.key}}\n                                                            </h3>\n                                                            <small>power</small>\n                                                        </div>\n                                                    </div>\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- The Modal Epic-->\n        <div #epicmodal id=\"epicmodal\" class=\"modal\">\n            <!-- Modal content -->\n            <div class=\"modal-content\">\n                <span class=\"close\" (click)=\"hideModal('epic');\">&times;</span>\n                <h5>Crear Épica</h5>\n\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-content\">\n                        <div class=\"form-group\">\n                            <label class=\"col-sm-2 control-label\">Nombre</label>\n                            <div class=\"col-sm-10\">\n                                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"epicName\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"ibox-footer\">\n                        <span class=\"pull-right\">\n                            <button type=\"button\" (click)=\"hideModal('epic')\" class=\"btn btn-w-m btn-danger\">Cancelar</button>\n                            <button type=\"button\" (click)=\"saveEpic()\" class=\"btn btn-w-m btn-info\">Guardar</button>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n\n        <!-- The Modal Featue-->\n        <div #featuremodal id=\"featuremodal\" class=\"modal\">\n            <!-- Modal content -->\n            <div class=\"modal-content\">\n                <span class=\"close\" (click)=\"hideModal('feature')\">&times;</span>\n                <h3>Crear Característica</h3>\n                <div class=\"ibox float-e-margins\">\n                    <div class=\"ibox-content\">\n                        <div class=\"form-group\">\n                            <label class=\"control-label\">Nombre</label>\n                            <div class=\"\">\n                                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"featureName\">\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"ibox-footer\">\n                        <span class=\"pull-right\">\n                            <button type=\"button\" (click)=\"hideModal('feature')\" class=\"btn btn-w-m btn-danger\">Cancelar</button>\n                            <button type=\"button\" (click)=\"saveFeature()\" class=\"btn btn-w-m btn-info\">Guardar</button>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n    </div>\n</div>"

/***/ },

/***/ 943:
/***/ function(module, exports) {

module.exports = "<div class=\"middle-box text-center loginscreen animated fadeInDown\">\n    <div>\n        <div>\n            <h1 class=\"logo-name\">IN+</h1>\n        </div>\n        <h3>Register to IN+</h3>\n        <p>Create account to see it in action.</p>\n        <form class=\"m-t\" role=\"form\" action=\"#\">\n            <div class=\"form-group\">\n                <input type=\"text\" class=\"form-control\" placeholder=\"Name\" required=\"\">\n            </div>\n            <div class=\"form-group\">\n                <input type=\"email\" class=\"form-control\" placeholder=\"Email\" required=\"\">\n            </div>\n            <div class=\"form-group\">\n                <input type=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"\">\n            </div>\n            <div class=\"form-group\">\n                <div class=\"checkbox i-checks\"><label> <input type=\"checkbox\"><i></i> Agree the terms and policy </label></div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary block full-width m-b\">Register</button>\n\n            <p class=\"text-muted text-center\"><small>Already have an account?</small></p>\n            <a class=\"btn btn-sm btn-white btn-block\" href=\"#\">Login</a>\n        </form>\n        <p class=\"m-t\"> <small>Inspinia we app framework base on Bootstrap 3 &copy; 2014</small> </p>\n    </div>\n</div>"

/***/ },

/***/ 944:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Asignación de Roles\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 945:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Roles\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 946:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Seguimiento de Tareas\n                </h1>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ },

/***/ 947:
/***/ function(module, exports) {

module.exports = "<div class=\"wrapper wrapper-content animated fadeInRight\">\n    <div class=\"row\">\n        <div class=\"col-lg-12\">\n            <div class=\"text-center m-t-lg\">\n                <h1>\n                    Administración de Usuarios\n                </h1>\n                <crud [key]=\"key\" [data]=\"users\" [schema]=\"schema\" title=\"Usuarios\" [model]=\"user\" (save)=\"save($event)\"\n                    (remove)=\"remove($event)\" (find)=\"find($event)\" (reload)=\"reload()\"></crud>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }

},[1268]);
//# sourceMappingURL=main.bundle.map